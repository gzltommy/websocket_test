// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.0
// source: Bidirect.proto

package metaverse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MicroMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId int64   `protobuf:"varint,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	RequireId int64   `protobuf:"varint,2,opt,name=requireId,proto3" json:"requireId,omitempty"`
	Guid      int64   `protobuf:"varint,3,opt,name=guid,proto3" json:"guid,omitempty"`
	Guids     []int64 `protobuf:"varint,4,rep,packed,name=guids,proto3" json:"guids,omitempty"`
	SpaceId   int64   `protobuf:"varint,5,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	ConnId    string  `protobuf:"bytes,6,opt,name=connId,proto3" json:"connId,omitempty"`
	Key       string  `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
	Body      []byte  `protobuf:"bytes,8,opt,name=body,proto3" json:"body,omitempty"`
	BodyMsgId int64   `protobuf:"varint,9,opt,name=bodyMsgId,proto3" json:"bodyMsgId,omitempty"`
}

func (x *MicroMessage) Reset() {
	*x = MicroMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Bidirect_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicroMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroMessage) ProtoMessage() {}

func (x *MicroMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Bidirect_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicroMessage.ProtoReflect.Descriptor instead.
func (*MicroMessage) Descriptor() ([]byte, []int) {
	return file_Bidirect_proto_rawDescGZIP(), []int{0}
}

func (x *MicroMessage) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *MicroMessage) GetRequireId() int64 {
	if x != nil {
		return x.RequireId
	}
	return 0
}

func (x *MicroMessage) GetGuid() int64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *MicroMessage) GetGuids() []int64 {
	if x != nil {
		return x.Guids
	}
	return nil
}

func (x *MicroMessage) GetSpaceId() int64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

func (x *MicroMessage) GetConnId() string {
	if x != nil {
		return x.ConnId
	}
	return ""
}

func (x *MicroMessage) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MicroMessage) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *MicroMessage) GetBodyMsgId() int64 {
	if x != nil {
		return x.BodyMsgId
	}
	return 0
}

type ServiceInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services []*ServiceInfo `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *ServiceInfos) Reset() {
	*x = ServiceInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Bidirect_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInfos) ProtoMessage() {}

func (x *ServiceInfos) ProtoReflect() protoreflect.Message {
	mi := &file_Bidirect_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInfos.ProtoReflect.Descriptor instead.
func (*ServiceInfos) Descriptor() ([]byte, []int) {
	return file_Bidirect_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceInfos) GetServices() []*ServiceInfo {
	if x != nil {
		return x.Services
	}
	return nil
}

type ReqStartSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequireId int64     `protobuf:"varint,1,opt,name=requireId,proto3" json:"requireId,omitempty"`
	SpaceId   int64     `protobuf:"varint,2,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	Line      int64     `protobuf:"varint,3,opt,name=line,proto3" json:"line,omitempty"`
	SpaceType SpaceType `protobuf:"varint,4,opt,name=spaceType,proto3,enum=metaverse.SpaceType" json:"spaceType,omitempty"`
	RoomType  RoomType  `protobuf:"varint,5,opt,name=roomType,proto3,enum=metaverse.RoomType" json:"roomType,omitempty"`
}

func (x *ReqStartSpace) Reset() {
	*x = ReqStartSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Bidirect_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStartSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStartSpace) ProtoMessage() {}

func (x *ReqStartSpace) ProtoReflect() protoreflect.Message {
	mi := &file_Bidirect_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStartSpace.ProtoReflect.Descriptor instead.
func (*ReqStartSpace) Descriptor() ([]byte, []int) {
	return file_Bidirect_proto_rawDescGZIP(), []int{2}
}

func (x *ReqStartSpace) GetRequireId() int64 {
	if x != nil {
		return x.RequireId
	}
	return 0
}

func (x *ReqStartSpace) GetSpaceId() int64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

func (x *ReqStartSpace) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *ReqStartSpace) GetSpaceType() SpaceType {
	if x != nil {
		return x.SpaceType
	}
	return SpaceType_Hall
}

func (x *ReqStartSpace) GetRoomType() RoomType {
	if x != nil {
		return x.RoomType
	}
	return RoomType_RoomCommon
}

type ResStartSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequireId int64     `protobuf:"varint,1,opt,name=requireId,proto3" json:"requireId,omitempty"`
	SpaceId   int64     `protobuf:"varint,2,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	Status    int32     `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	SpaceType SpaceType `protobuf:"varint,4,opt,name=spaceType,proto3,enum=metaverse.SpaceType" json:"spaceType,omitempty"`
}

func (x *ResStartSpace) Reset() {
	*x = ResStartSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Bidirect_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResStartSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResStartSpace) ProtoMessage() {}

func (x *ResStartSpace) ProtoReflect() protoreflect.Message {
	mi := &file_Bidirect_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResStartSpace.ProtoReflect.Descriptor instead.
func (*ResStartSpace) Descriptor() ([]byte, []int) {
	return file_Bidirect_proto_rawDescGZIP(), []int{3}
}

func (x *ResStartSpace) GetRequireId() int64 {
	if x != nil {
		return x.RequireId
	}
	return 0
}

func (x *ResStartSpace) GetSpaceId() int64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

func (x *ResStartSpace) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ResStartSpace) GetSpaceType() SpaceType {
	if x != nil {
		return x.SpaceType
	}
	return SpaceType_Hall
}

type ReqBoradcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId int64   `protobuf:"varint,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	RequireId int64   `protobuf:"varint,2,opt,name=requireId,proto3" json:"requireId,omitempty"`
	Guid      []int64 `protobuf:"varint,3,rep,packed,name=guid,proto3" json:"guid,omitempty"`
	SpaceId   []int64 `protobuf:"varint,4,rep,packed,name=spaceId,proto3" json:"spaceId,omitempty"`
	Body      []byte  `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *ReqBoradcast) Reset() {
	*x = ReqBoradcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Bidirect_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBoradcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBoradcast) ProtoMessage() {}

func (x *ReqBoradcast) ProtoReflect() protoreflect.Message {
	mi := &file_Bidirect_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBoradcast.ProtoReflect.Descriptor instead.
func (*ReqBoradcast) Descriptor() ([]byte, []int) {
	return file_Bidirect_proto_rawDescGZIP(), []int{4}
}

func (x *ReqBoradcast) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ReqBoradcast) GetRequireId() int64 {
	if x != nil {
		return x.RequireId
	}
	return 0
}

func (x *ReqBoradcast) GetGuid() []int64 {
	if x != nil {
		return x.Guid
	}
	return nil
}

func (x *ReqBoradcast) GetSpaceId() []int64 {
	if x != nil {
		return x.SpaceId
	}
	return nil
}

func (x *ReqBoradcast) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type ResBoradcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId int64 `protobuf:"varint,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	RequireId int64 `protobuf:"varint,2,opt,name=requireId,proto3" json:"requireId,omitempty"`
	Status    int64 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ResBoradcast) Reset() {
	*x = ResBoradcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Bidirect_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResBoradcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResBoradcast) ProtoMessage() {}

func (x *ResBoradcast) ProtoReflect() protoreflect.Message {
	mi := &file_Bidirect_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResBoradcast.ProtoReflect.Descriptor instead.
func (*ResBoradcast) Descriptor() ([]byte, []int) {
	return file_Bidirect_proto_rawDescGZIP(), []int{5}
}

func (x *ResBoradcast) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ResBoradcast) GetRequireId() int64 {
	if x != nil {
		return x.RequireId
	}
	return 0
}

func (x *ResBoradcast) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ReqCurrSquidSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReqCurrSquidSpace) Reset() {
	*x = ReqCurrSquidSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Bidirect_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCurrSquidSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCurrSquidSpace) ProtoMessage() {}

func (x *ReqCurrSquidSpace) ProtoReflect() protoreflect.Message {
	mi := &file_Bidirect_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCurrSquidSpace.ProtoReflect.Descriptor instead.
func (*ReqCurrSquidSpace) Descriptor() ([]byte, []int) {
	return file_Bidirect_proto_rawDescGZIP(), []int{6}
}

type ResCurrSquidSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId    int64 `protobuf:"varint,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	SpaceCount int32 `protobuf:"varint,2,opt,name=spaceCount,proto3" json:"spaceCount,omitempty"`
}

func (x *ResCurrSquidSpace) Reset() {
	*x = ResCurrSquidSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Bidirect_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResCurrSquidSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCurrSquidSpace) ProtoMessage() {}

func (x *ResCurrSquidSpace) ProtoReflect() protoreflect.Message {
	mi := &file_Bidirect_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCurrSquidSpace.ProtoReflect.Descriptor instead.
func (*ResCurrSquidSpace) Descriptor() ([]byte, []int) {
	return file_Bidirect_proto_rawDescGZIP(), []int{7}
}

func (x *ResCurrSquidSpace) GetSpaceId() int64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

func (x *ResCurrSquidSpace) GetSpaceCount() int32 {
	if x != nil {
		return x.SpaceCount
	}
	return 0
}

var File_Bidirect_proto protoreflect.FileDescriptor

var file_Bidirect_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x42, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x1a, 0x0d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xea, 0x01, 0x0a, 0x0c, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x75, 0x69, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x67, 0x75, 0x69, 0x64, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x6e,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x6f,
	0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x0d,
	0x52, 0x65, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a,
	0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x72, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0x62, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x42, 0x6f, 0x72, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x43, 0x75, 0x72, 0x72, 0x53,
	0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x4d, 0x0a, 0x11, 0x52, 0x65, 0x73,
	0x43, 0x75, 0x72, 0x72, 0x53, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xc3, 0x03, 0x0a, 0x12, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x42, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x47, 0x52, 0x70, 0x63, 0x12,
	0x44, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x12, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x71,
	0x42, 0x6f, 0x72, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x42, 0x6f, 0x72, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x18, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x71, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x18, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x53, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x75, 0x72,
	0x72, 0x53, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x1c, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x75, 0x72, 0x72, 0x53,
	0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0x51,
	0x0a, 0x0c, 0x42, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x47, 0x52, 0x70, 0x63, 0x12, 0x41,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f, 0x3b, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Bidirect_proto_rawDescOnce sync.Once
	file_Bidirect_proto_rawDescData = file_Bidirect_proto_rawDesc
)

func file_Bidirect_proto_rawDescGZIP() []byte {
	file_Bidirect_proto_rawDescOnce.Do(func() {
		file_Bidirect_proto_rawDescData = protoimpl.X.CompressGZIP(file_Bidirect_proto_rawDescData)
	})
	return file_Bidirect_proto_rawDescData
}

var file_Bidirect_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_Bidirect_proto_goTypes = []interface{}{
	(*MicroMessage)(nil),      // 0: metaverse.MicroMessage
	(*ServiceInfos)(nil),      // 1: metaverse.ServiceInfos
	(*ReqStartSpace)(nil),     // 2: metaverse.ReqStartSpace
	(*ResStartSpace)(nil),     // 3: metaverse.ResStartSpace
	(*ReqBoradcast)(nil),      // 4: metaverse.ReqBoradcast
	(*ResBoradcast)(nil),      // 5: metaverse.ResBoradcast
	(*ReqCurrSquidSpace)(nil), // 6: metaverse.ReqCurrSquidSpace
	(*ResCurrSquidSpace)(nil), // 7: metaverse.ResCurrSquidSpace
	(*ServiceInfo)(nil),       // 8: metaverse.ServiceInfo
	(SpaceType)(0),            // 9: metaverse.SpaceType
	(RoomType)(0),             // 10: metaverse.RoomType
	(*GetServiceRequest)(nil), // 11: metaverse.GetServiceRequest
}
var file_Bidirect_proto_depIdxs = []int32{
	8,  // 0: metaverse.ServiceInfos.services:type_name -> metaverse.ServiceInfo
	9,  // 1: metaverse.ReqStartSpace.spaceType:type_name -> metaverse.SpaceType
	10, // 2: metaverse.ReqStartSpace.roomType:type_name -> metaverse.RoomType
	9,  // 3: metaverse.ResStartSpace.spaceType:type_name -> metaverse.SpaceType
	11, // 4: metaverse.CenterBidirectGRpc.GetService:input_type -> metaverse.GetServiceRequest
	11, // 5: metaverse.CenterBidirectGRpc.GetAllServiceInfo:input_type -> metaverse.GetServiceRequest
	4,  // 6: metaverse.CenterBidirectGRpc.Broadcast:input_type -> metaverse.ReqBoradcast
	2,  // 7: metaverse.CenterBidirectGRpc.StartSpace:input_type -> metaverse.ReqStartSpace
	6,  // 8: metaverse.CenterBidirectGRpc.GetCurrSquidSpace:input_type -> metaverse.ReqCurrSquidSpace
	0,  // 9: metaverse.CenterBidirectGRpc.Connect:input_type -> metaverse.MicroMessage
	0,  // 10: metaverse.BidirectGRpc.Connect:input_type -> metaverse.MicroMessage
	8,  // 11: metaverse.CenterBidirectGRpc.GetService:output_type -> metaverse.ServiceInfo
	1,  // 12: metaverse.CenterBidirectGRpc.GetAllServiceInfo:output_type -> metaverse.ServiceInfos
	5,  // 13: metaverse.CenterBidirectGRpc.Broadcast:output_type -> metaverse.ResBoradcast
	3,  // 14: metaverse.CenterBidirectGRpc.StartSpace:output_type -> metaverse.ResStartSpace
	7,  // 15: metaverse.CenterBidirectGRpc.GetCurrSquidSpace:output_type -> metaverse.ResCurrSquidSpace
	0,  // 16: metaverse.CenterBidirectGRpc.Connect:output_type -> metaverse.MicroMessage
	0,  // 17: metaverse.BidirectGRpc.Connect:output_type -> metaverse.MicroMessage
	11, // [11:18] is the sub-list for method output_type
	4,  // [4:11] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_Bidirect_proto_init() }
func file_Bidirect_proto_init() {
	if File_Bidirect_proto != nil {
		return
	}
	file_Service_proto_init()
	file_Space_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_Bidirect_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MicroMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Bidirect_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Bidirect_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStartSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Bidirect_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResStartSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Bidirect_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBoradcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Bidirect_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResBoradcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Bidirect_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCurrSquidSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Bidirect_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResCurrSquidSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Bidirect_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_Bidirect_proto_goTypes,
		DependencyIndexes: file_Bidirect_proto_depIdxs,
		MessageInfos:      file_Bidirect_proto_msgTypes,
	}.Build()
	File_Bidirect_proto = out.File
	file_Bidirect_proto_rawDesc = nil
	file_Bidirect_proto_goTypes = nil
	file_Bidirect_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CenterBidirectGRpcClient is the client API for CenterBidirectGRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CenterBidirectGRpcClient interface {
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*ServiceInfo, error)
	GetAllServiceInfo(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*ServiceInfos, error)
	Broadcast(ctx context.Context, in *ReqBoradcast, opts ...grpc.CallOption) (*ResBoradcast, error)
	StartSpace(ctx context.Context, in *ReqStartSpace, opts ...grpc.CallOption) (*ResStartSpace, error)
	GetCurrSquidSpace(ctx context.Context, in *ReqCurrSquidSpace, opts ...grpc.CallOption) (*ResCurrSquidSpace, error)
	Connect(ctx context.Context, opts ...grpc.CallOption) (CenterBidirectGRpc_ConnectClient, error)
}

type centerBidirectGRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewCenterBidirectGRpcClient(cc grpc.ClientConnInterface) CenterBidirectGRpcClient {
	return &centerBidirectGRpcClient{cc}
}

func (c *centerBidirectGRpcClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*ServiceInfo, error) {
	out := new(ServiceInfo)
	err := c.cc.Invoke(ctx, "/metaverse.CenterBidirectGRpc/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerBidirectGRpcClient) GetAllServiceInfo(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*ServiceInfos, error) {
	out := new(ServiceInfos)
	err := c.cc.Invoke(ctx, "/metaverse.CenterBidirectGRpc/GetAllServiceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerBidirectGRpcClient) Broadcast(ctx context.Context, in *ReqBoradcast, opts ...grpc.CallOption) (*ResBoradcast, error) {
	out := new(ResBoradcast)
	err := c.cc.Invoke(ctx, "/metaverse.CenterBidirectGRpc/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerBidirectGRpcClient) StartSpace(ctx context.Context, in *ReqStartSpace, opts ...grpc.CallOption) (*ResStartSpace, error) {
	out := new(ResStartSpace)
	err := c.cc.Invoke(ctx, "/metaverse.CenterBidirectGRpc/StartSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerBidirectGRpcClient) GetCurrSquidSpace(ctx context.Context, in *ReqCurrSquidSpace, opts ...grpc.CallOption) (*ResCurrSquidSpace, error) {
	out := new(ResCurrSquidSpace)
	err := c.cc.Invoke(ctx, "/metaverse.CenterBidirectGRpc/GetCurrSquidSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerBidirectGRpcClient) Connect(ctx context.Context, opts ...grpc.CallOption) (CenterBidirectGRpc_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CenterBidirectGRpc_serviceDesc.Streams[0], "/metaverse.CenterBidirectGRpc/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &centerBidirectGRpcConnectClient{stream}
	return x, nil
}

type CenterBidirectGRpc_ConnectClient interface {
	Send(*MicroMessage) error
	Recv() (*MicroMessage, error)
	grpc.ClientStream
}

type centerBidirectGRpcConnectClient struct {
	grpc.ClientStream
}

func (x *centerBidirectGRpcConnectClient) Send(m *MicroMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *centerBidirectGRpcConnectClient) Recv() (*MicroMessage, error) {
	m := new(MicroMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CenterBidirectGRpcServer is the server API for CenterBidirectGRpc service.
type CenterBidirectGRpcServer interface {
	GetService(context.Context, *GetServiceRequest) (*ServiceInfo, error)
	GetAllServiceInfo(context.Context, *GetServiceRequest) (*ServiceInfos, error)
	Broadcast(context.Context, *ReqBoradcast) (*ResBoradcast, error)
	StartSpace(context.Context, *ReqStartSpace) (*ResStartSpace, error)
	GetCurrSquidSpace(context.Context, *ReqCurrSquidSpace) (*ResCurrSquidSpace, error)
	Connect(CenterBidirectGRpc_ConnectServer) error
}

// UnimplementedCenterBidirectGRpcServer can be embedded to have forward compatible implementations.
type UnimplementedCenterBidirectGRpcServer struct {
}

func (*UnimplementedCenterBidirectGRpcServer) GetService(context.Context, *GetServiceRequest) (*ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (*UnimplementedCenterBidirectGRpcServer) GetAllServiceInfo(context.Context, *GetServiceRequest) (*ServiceInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllServiceInfo not implemented")
}
func (*UnimplementedCenterBidirectGRpcServer) Broadcast(context.Context, *ReqBoradcast) (*ResBoradcast, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (*UnimplementedCenterBidirectGRpcServer) StartSpace(context.Context, *ReqStartSpace) (*ResStartSpace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSpace not implemented")
}
func (*UnimplementedCenterBidirectGRpcServer) GetCurrSquidSpace(context.Context, *ReqCurrSquidSpace) (*ResCurrSquidSpace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrSquidSpace not implemented")
}
func (*UnimplementedCenterBidirectGRpcServer) Connect(CenterBidirectGRpc_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

func RegisterCenterBidirectGRpcServer(s *grpc.Server, srv CenterBidirectGRpcServer) {
	s.RegisterService(&_CenterBidirectGRpc_serviceDesc, srv)
}

func _CenterBidirectGRpc_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterBidirectGRpcServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metaverse.CenterBidirectGRpc/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterBidirectGRpcServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CenterBidirectGRpc_GetAllServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterBidirectGRpcServer).GetAllServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metaverse.CenterBidirectGRpc/GetAllServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterBidirectGRpcServer).GetAllServiceInfo(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CenterBidirectGRpc_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBoradcast)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterBidirectGRpcServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metaverse.CenterBidirectGRpc/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterBidirectGRpcServer).Broadcast(ctx, req.(*ReqBoradcast))
	}
	return interceptor(ctx, in, info, handler)
}

func _CenterBidirectGRpc_StartSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStartSpace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterBidirectGRpcServer).StartSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metaverse.CenterBidirectGRpc/StartSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterBidirectGRpcServer).StartSpace(ctx, req.(*ReqStartSpace))
	}
	return interceptor(ctx, in, info, handler)
}

func _CenterBidirectGRpc_GetCurrSquidSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCurrSquidSpace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterBidirectGRpcServer).GetCurrSquidSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metaverse.CenterBidirectGRpc/GetCurrSquidSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterBidirectGRpcServer).GetCurrSquidSpace(ctx, req.(*ReqCurrSquidSpace))
	}
	return interceptor(ctx, in, info, handler)
}

func _CenterBidirectGRpc_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CenterBidirectGRpcServer).Connect(&centerBidirectGRpcConnectServer{stream})
}

type CenterBidirectGRpc_ConnectServer interface {
	Send(*MicroMessage) error
	Recv() (*MicroMessage, error)
	grpc.ServerStream
}

type centerBidirectGRpcConnectServer struct {
	grpc.ServerStream
}

func (x *centerBidirectGRpcConnectServer) Send(m *MicroMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *centerBidirectGRpcConnectServer) Recv() (*MicroMessage, error) {
	m := new(MicroMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CenterBidirectGRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metaverse.CenterBidirectGRpc",
	HandlerType: (*CenterBidirectGRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetService",
			Handler:    _CenterBidirectGRpc_GetService_Handler,
		},
		{
			MethodName: "GetAllServiceInfo",
			Handler:    _CenterBidirectGRpc_GetAllServiceInfo_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _CenterBidirectGRpc_Broadcast_Handler,
		},
		{
			MethodName: "StartSpace",
			Handler:    _CenterBidirectGRpc_StartSpace_Handler,
		},
		{
			MethodName: "GetCurrSquidSpace",
			Handler:    _CenterBidirectGRpc_GetCurrSquidSpace_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _CenterBidirectGRpc_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "Bidirect.proto",
}

// BidirectGRpcClient is the client API for BidirectGRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BidirectGRpcClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (BidirectGRpc_ConnectClient, error)
}

type bidirectGRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewBidirectGRpcClient(cc grpc.ClientConnInterface) BidirectGRpcClient {
	return &bidirectGRpcClient{cc}
}

func (c *bidirectGRpcClient) Connect(ctx context.Context, opts ...grpc.CallOption) (BidirectGRpc_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BidirectGRpc_serviceDesc.Streams[0], "/metaverse.BidirectGRpc/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &bidirectGRpcConnectClient{stream}
	return x, nil
}

type BidirectGRpc_ConnectClient interface {
	Send(*MicroMessage) error
	Recv() (*MicroMessage, error)
	grpc.ClientStream
}

type bidirectGRpcConnectClient struct {
	grpc.ClientStream
}

func (x *bidirectGRpcConnectClient) Send(m *MicroMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bidirectGRpcConnectClient) Recv() (*MicroMessage, error) {
	m := new(MicroMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BidirectGRpcServer is the server API for BidirectGRpc service.
type BidirectGRpcServer interface {
	Connect(BidirectGRpc_ConnectServer) error
}

// UnimplementedBidirectGRpcServer can be embedded to have forward compatible implementations.
type UnimplementedBidirectGRpcServer struct {
}

func (*UnimplementedBidirectGRpcServer) Connect(BidirectGRpc_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

func RegisterBidirectGRpcServer(s *grpc.Server, srv BidirectGRpcServer) {
	s.RegisterService(&_BidirectGRpc_serviceDesc, srv)
}

func _BidirectGRpc_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BidirectGRpcServer).Connect(&bidirectGRpcConnectServer{stream})
}

type BidirectGRpc_ConnectServer interface {
	Send(*MicroMessage) error
	Recv() (*MicroMessage, error)
	grpc.ServerStream
}

type bidirectGRpcConnectServer struct {
	grpc.ServerStream
}

func (x *bidirectGRpcConnectServer) Send(m *MicroMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bidirectGRpcConnectServer) Recv() (*MicroMessage, error) {
	m := new(MicroMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BidirectGRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metaverse.BidirectGRpc",
	HandlerType: (*BidirectGRpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _BidirectGRpc_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "Bidirect.proto",
}
