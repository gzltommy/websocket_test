// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.0
// source: Message.proto

package metaverse

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceStatus int32

const (
	ServiceStatus_Normal  ServiceStatus = 0
	ServiceStatus_Crowded ServiceStatus = 1
	ServiceStatus_Full    ServiceStatus = 2
)

// Enum value maps for ServiceStatus.
var (
	ServiceStatus_name = map[int32]string{
		0: "Normal",
		1: "Crowded",
		2: "Full",
	}
	ServiceStatus_value = map[string]int32{
		"Normal":  0,
		"Crowded": 1,
		"Full":    2,
	}
)

func (x ServiceStatus) Enum() *ServiceStatus {
	p := new(ServiceStatus)
	*p = x
	return p
}

func (x ServiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Message_proto_enumTypes[0].Descriptor()
}

func (ServiceStatus) Type() protoreflect.EnumType {
	return &file_Message_proto_enumTypes[0]
}

func (x ServiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStatus.Descriptor instead.
func (ServiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{0}
}

type OnlineStatus int32

const (
	OnlineStatus_Offline OnlineStatus = 0
	OnlineStatus_Online  OnlineStatus = 1
)

// Enum value maps for OnlineStatus.
var (
	OnlineStatus_name = map[int32]string{
		0: "Offline",
		1: "Online",
	}
	OnlineStatus_value = map[string]int32{
		"Offline": 0,
		"Online":  1,
	}
)

func (x OnlineStatus) Enum() *OnlineStatus {
	p := new(OnlineStatus)
	*p = x
	return p
}

func (x OnlineStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnlineStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Message_proto_enumTypes[1].Descriptor()
}

func (OnlineStatus) Type() protoreflect.EnumType {
	return &file_Message_proto_enumTypes[1]
}

func (x OnlineStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnlineStatus.Descriptor instead.
func (OnlineStatus) EnumDescriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{1}
}

type NotifyType int32

const (
	NotifyType_OnlineOffline NotifyType = 0
	NotifyType_SpaceChange   NotifyType = 1
)

// Enum value maps for NotifyType.
var (
	NotifyType_name = map[int32]string{
		0: "OnlineOffline",
		1: "SpaceChange",
	}
	NotifyType_value = map[string]int32{
		"OnlineOffline": 0,
		"SpaceChange":   1,
	}
)

func (x NotifyType) Enum() *NotifyType {
	p := new(NotifyType)
	*p = x
	return p
}

func (x NotifyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifyType) Descriptor() protoreflect.EnumDescriptor {
	return file_Message_proto_enumTypes[2].Descriptor()
}

func (NotifyType) Type() protoreflect.EnumType {
	return &file_Message_proto_enumTypes[2]
}

func (x NotifyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifyType.Descriptor instead.
func (NotifyType) EnumDescriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{2}
}

type StatusCode int32

const (
	StatusCode_Success StatusCode = 0
	StatusCode_Failed  StatusCode = 1
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0: "Success",
		1: "Failed",
	}
	StatusCode_value = map[string]int32{
		"Success": 0,
		"Failed":  1,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_Message_proto_enumTypes[3].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_Message_proto_enumTypes[3]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{3}
}

type Sex int32

const (
	Sex_Man   Sex = 0
	Sex_Woman Sex = 1
)

// Enum value maps for Sex.
var (
	Sex_name = map[int32]string{
		0: "Man",
		1: "Woman",
	}
	Sex_value = map[string]int32{
		"Man":   0,
		"Woman": 1,
	}
)

func (x Sex) Enum() *Sex {
	p := new(Sex)
	*p = x
	return p
}

func (x Sex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sex) Descriptor() protoreflect.EnumDescriptor {
	return file_Message_proto_enumTypes[4].Descriptor()
}

func (Sex) Type() protoreflect.EnumType {
	return &file_Message_proto_enumTypes[4]
}

func (x Sex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sex.Descriptor instead.
func (Sex) EnumDescriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{4}
}

type LoginStatusCode int32

const (
	LoginStatusCode_LoginFailed  LoginStatusCode = 0
	LoginStatusCode_LoginSuccess LoginStatusCode = 1
	LoginStatusCode_Create       LoginStatusCode = 2
)

// Enum value maps for LoginStatusCode.
var (
	LoginStatusCode_name = map[int32]string{
		0: "LoginFailed",
		1: "LoginSuccess",
		2: "Create",
	}
	LoginStatusCode_value = map[string]int32{
		"LoginFailed":  0,
		"LoginSuccess": 1,
		"Create":       2,
	}
)

func (x LoginStatusCode) Enum() *LoginStatusCode {
	p := new(LoginStatusCode)
	*p = x
	return p
}

func (x LoginStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_Message_proto_enumTypes[5].Descriptor()
}

func (LoginStatusCode) Type() protoreflect.EnumType {
	return &file_Message_proto_enumTypes[5]
}

func (x LoginStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginStatusCode.Descriptor instead.
func (LoginStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{5}
}

type PersonalSpaceGroup int32

const (
	PersonalSpaceGroup_Self  PersonalSpaceGroup = 0
	PersonalSpaceGroup_Other PersonalSpaceGroup = 1
)

// Enum value maps for PersonalSpaceGroup.
var (
	PersonalSpaceGroup_name = map[int32]string{
		0: "Self",
		1: "Other",
	}
	PersonalSpaceGroup_value = map[string]int32{
		"Self":  0,
		"Other": 1,
	}
)

func (x PersonalSpaceGroup) Enum() *PersonalSpaceGroup {
	p := new(PersonalSpaceGroup)
	*p = x
	return p
}

func (x PersonalSpaceGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PersonalSpaceGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_Message_proto_enumTypes[6].Descriptor()
}

func (PersonalSpaceGroup) Type() protoreflect.EnumType {
	return &file_Message_proto_enumTypes[6]
}

func (x PersonalSpaceGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PersonalSpaceGroup.Descriptor instead.
func (PersonalSpaceGroup) EnumDescriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{6}
}

type ChatBanStatus int32

const (
	ChatBanStatus_Forbidden ChatBanStatus = 0
	ChatBanStatus_Allowed   ChatBanStatus = 1
)

// Enum value maps for ChatBanStatus.
var (
	ChatBanStatus_name = map[int32]string{
		0: "Forbidden",
		1: "Allowed",
	}
	ChatBanStatus_value = map[string]int32{
		"Forbidden": 0,
		"Allowed":   1,
	}
)

func (x ChatBanStatus) Enum() *ChatBanStatus {
	p := new(ChatBanStatus)
	*p = x
	return p
}

func (x ChatBanStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatBanStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Message_proto_enumTypes[7].Descriptor()
}

func (ChatBanStatus) Type() protoreflect.EnumType {
	return &file_Message_proto_enumTypes[7]
}

func (x ChatBanStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatBanStatus.Descriptor instead.
func (ChatBanStatus) EnumDescriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{7}
}

type Line struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ServiceStatus `protobuf:"varint,1,opt,name=status,proto3,enum=metaverse.ServiceStatus" json:"status,omitempty"`
	LineId int64         `protobuf:"varint,2,opt,name=lineId,proto3" json:"lineId,omitempty"`
}

func (x *Line) Reset() {
	*x = Line{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Line) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Line) ProtoMessage() {}

func (x *Line) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Line.ProtoReflect.Descriptor instead.
func (*Line) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{0}
}

func (x *Line) GetStatus() ServiceStatus {
	if x != nil {
		return x.Status
	}
	return ServiceStatus_Normal
}

func (x *Line) GetLineId() int64 {
	if x != nil {
		return x.LineId
	}
	return 0
}

type Vector3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Vector3) Reset() {
	*x = Vector3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector3) ProtoMessage() {}

func (x *Vector3) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector3.ProtoReflect.Descriptor instead.
func (*Vector3) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{1}
}

func (x *Vector3) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vector3) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Vector3) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type PickupItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Userguid int64 `protobuf:"varint,2,opt,name=userguid,proto3" json:"userguid,omitempty"`
}

func (x *PickupItemInfo) Reset() {
	*x = PickupItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickupItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickupItemInfo) ProtoMessage() {}

func (x *PickupItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickupItemInfo.ProtoReflect.Descriptor instead.
func (*PickupItemInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{2}
}

func (x *PickupItemInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PickupItemInfo) GetUserguid() int64 {
	if x != nil {
		return x.Userguid
	}
	return 0
}

type LotteryPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid    int64  `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	HeadImg string `protobuf:"bytes,4,opt,name=headImg,proto3" json:"headImg,omitempty"`
	Prize   string `protobuf:"bytes,5,opt,name=prize,proto3" json:"prize,omitempty"`
}

func (x *LotteryPlayerInfo) Reset() {
	*x = LotteryPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryPlayerInfo) ProtoMessage() {}

func (x *LotteryPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryPlayerInfo.ProtoReflect.Descriptor instead.
func (*LotteryPlayerInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{3}
}

func (x *LotteryPlayerInfo) GetGuid() int64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *LotteryPlayerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LotteryPlayerInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *LotteryPlayerInfo) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

func (x *LotteryPlayerInfo) GetPrize() string {
	if x != nil {
		return x.Prize
	}
	return ""
}

type PlayerAssetsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HairIds      []int32 `protobuf:"varint,1,rep,packed,name=hairIds,proto3" json:"hairIds,omitempty"`
	CoatIds      []int32 `protobuf:"varint,2,rep,packed,name=coatIds,proto3" json:"coatIds,omitempty"`
	UpperBodyIds []int32 `protobuf:"varint,3,rep,packed,name=upperBodyIds,proto3" json:"upperBodyIds,omitempty"`
	LowerBodyIds []int32 `protobuf:"varint,4,rep,packed,name=lowerBodyIds,proto3" json:"lowerBodyIds,omitempty"`
	ShoesIds     []int32 `protobuf:"varint,5,rep,packed,name=shoesIds,proto3" json:"shoesIds,omitempty"`
	DogIds       []int32 `protobuf:"varint,6,rep,packed,name=dogIds,proto3" json:"dogIds,omitempty"`
}

func (x *PlayerAssetsInfo) Reset() {
	*x = PlayerAssetsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAssetsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAssetsInfo) ProtoMessage() {}

func (x *PlayerAssetsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAssetsInfo.ProtoReflect.Descriptor instead.
func (*PlayerAssetsInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerAssetsInfo) GetHairIds() []int32 {
	if x != nil {
		return x.HairIds
	}
	return nil
}

func (x *PlayerAssetsInfo) GetCoatIds() []int32 {
	if x != nil {
		return x.CoatIds
	}
	return nil
}

func (x *PlayerAssetsInfo) GetUpperBodyIds() []int32 {
	if x != nil {
		return x.UpperBodyIds
	}
	return nil
}

func (x *PlayerAssetsInfo) GetLowerBodyIds() []int32 {
	if x != nil {
		return x.LowerBodyIds
	}
	return nil
}

func (x *PlayerAssetsInfo) GetShoesIds() []int32 {
	if x != nil {
		return x.ShoesIds
	}
	return nil
}

func (x *PlayerAssetsInfo) GetDogIds() []int32 {
	if x != nil {
		return x.DogIds
	}
	return nil
}

type PlayerAvatarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HairId      int32 `protobuf:"varint,1,opt,name=hairId,proto3" json:"hairId,omitempty"`
	CoatId      int32 `protobuf:"varint,2,opt,name=coatId,proto3" json:"coatId,omitempty"`
	UpperBodyId int32 `protobuf:"varint,3,opt,name=upperBodyId,proto3" json:"upperBodyId,omitempty"`
	LowerBodyId int32 `protobuf:"varint,4,opt,name=lowerBodyId,proto3" json:"lowerBodyId,omitempty"`
	ShoesId     int32 `protobuf:"varint,5,opt,name=shoesId,proto3" json:"shoesId,omitempty"`
	DogId       int32 `protobuf:"varint,6,opt,name=dogId,proto3" json:"dogId,omitempty"`
}

func (x *PlayerAvatarInfo) Reset() {
	*x = PlayerAvatarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAvatarInfo) ProtoMessage() {}

func (x *PlayerAvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAvatarInfo.ProtoReflect.Descriptor instead.
func (*PlayerAvatarInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{5}
}

func (x *PlayerAvatarInfo) GetHairId() int32 {
	if x != nil {
		return x.HairId
	}
	return 0
}

func (x *PlayerAvatarInfo) GetCoatId() int32 {
	if x != nil {
		return x.CoatId
	}
	return 0
}

func (x *PlayerAvatarInfo) GetUpperBodyId() int32 {
	if x != nil {
		return x.UpperBodyId
	}
	return 0
}

func (x *PlayerAvatarInfo) GetLowerBodyId() int32 {
	if x != nil {
		return x.LowerBodyId
	}
	return 0
}

func (x *PlayerAvatarInfo) GetShoesId() int32 {
	if x != nil {
		return x.ShoesId
	}
	return 0
}

func (x *PlayerAvatarInfo) GetDogId() int32 {
	if x != nil {
		return x.DogId
	}
	return 0
}

type PlayerBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Money    string `protobuf:"bytes,2,opt,name=money,proto3" json:"money,omitempty"`
	HeadIcon string `protobuf:"bytes,3,opt,name=headIcon,proto3" json:"headIcon,omitempty"`
	Sex      Sex    `protobuf:"varint,4,opt,name=sex,proto3,enum=metaverse.Sex" json:"sex,omitempty"`
	Level    int32  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *PlayerBaseInfo) Reset() {
	*x = PlayerBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBaseInfo) ProtoMessage() {}

func (x *PlayerBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBaseInfo.ProtoReflect.Descriptor instead.
func (*PlayerBaseInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{6}
}

func (x *PlayerBaseInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerBaseInfo) GetMoney() string {
	if x != nil {
		return x.Money
	}
	return ""
}

func (x *PlayerBaseInfo) GetHeadIcon() string {
	if x != nil {
		return x.HeadIcon
	}
	return ""
}

func (x *PlayerBaseInfo) GetSex() Sex {
	if x != nil {
		return x.Sex
	}
	return Sex_Man
}

func (x *PlayerBaseInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type SyncTrans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid        int64    `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Position    *Vector3 `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Orientation float32  `protobuf:"fixed32,3,opt,name=orientation,proto3" json:"orientation,omitempty"`
	Speed       float32  `protobuf:"fixed32,4,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *SyncTrans) Reset() {
	*x = SyncTrans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncTrans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncTrans) ProtoMessage() {}

func (x *SyncTrans) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncTrans.ProtoReflect.Descriptor instead.
func (*SyncTrans) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{7}
}

func (x *SyncTrans) GetGuid() int64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *SyncTrans) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *SyncTrans) GetOrientation() float32 {
	if x != nil {
		return x.Orientation
	}
	return 0
}

func (x *SyncTrans) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

type PlayerSceneInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid        int64             `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Position    *Vector3          `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Orientation float32           `protobuf:"fixed32,3,opt,name=orientation,proto3" json:"orientation,omitempty"`
	BaseInfo    *PlayerBaseInfo   `protobuf:"bytes,4,opt,name=baseInfo,proto3" json:"baseInfo,omitempty"`
	AvatarInfo  *PlayerAvatarInfo `protobuf:"bytes,5,opt,name=avatarInfo,proto3" json:"avatarInfo,omitempty"`
}

func (x *PlayerSceneInfo) Reset() {
	*x = PlayerSceneInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSceneInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSceneInfo) ProtoMessage() {}

func (x *PlayerSceneInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSceneInfo.ProtoReflect.Descriptor instead.
func (*PlayerSceneInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{8}
}

func (x *PlayerSceneInfo) GetGuid() int64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *PlayerSceneInfo) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *PlayerSceneInfo) GetOrientation() float32 {
	if x != nil {
		return x.Orientation
	}
	return 0
}

func (x *PlayerSceneInfo) GetBaseInfo() *PlayerBaseInfo {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *PlayerSceneInfo) GetAvatarInfo() *PlayerAvatarInfo {
	if x != nil {
		return x.AvatarInfo
	}
	return nil
}

type BoothInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid              int32  `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Index             int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	ProjectLogo       string `protobuf:"bytes,3,opt,name=projectLogo,proto3" json:"projectLogo,omitempty"`
	ProjectUrl        string `protobuf:"bytes,4,opt,name=projectUrl,proto3" json:"projectUrl,omitempty"`
	IsShowMohe        bool   `protobuf:"varint,5,opt,name=isShowMohe,proto3" json:"isShowMohe,omitempty"`
	MoheUrl           string `protobuf:"bytes,6,opt,name=moheUrl,proto3" json:"moheUrl,omitempty"`
	ProjectName       string `protobuf:"bytes,7,opt,name=projectName,proto3" json:"projectName,omitempty"`
	LargeUrl          string `protobuf:"bytes,8,opt,name=largeUrl,proto3" json:"largeUrl,omitempty"`
	BoardBgColor      string `protobuf:"bytes,9,opt,name=board_bg_color,json=boardBgColor,proto3" json:"board_bg_color,omitempty"`
	BoardBtnBgColor   string `protobuf:"bytes,10,opt,name=board_btn_bg_color,json=boardBtnBgColor,proto3" json:"board_btn_bg_color,omitempty"`
	BoardBtnFontColor string `protobuf:"bytes,11,opt,name=board_btn_font_color,json=boardBtnFontColor,proto3" json:"board_btn_font_color,omitempty"`
	DataBgColor       string `protobuf:"bytes,12,opt,name=data_bg_color,json=dataBgColor,proto3" json:"data_bg_color,omitempty"`
	DataContentColor  string `protobuf:"bytes,13,opt,name=data_content_color,json=dataContentColor,proto3" json:"data_content_color,omitempty"`
	DataTitleColor    string `protobuf:"bytes,14,opt,name=data_title_color,json=dataTitleColor,proto3" json:"data_title_color,omitempty"`
	IsShowLike        bool   `protobuf:"varint,15,opt,name=isShowLike,proto3" json:"isShowLike,omitempty"`
}

func (x *BoothInfo) Reset() {
	*x = BoothInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoothInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoothInfo) ProtoMessage() {}

func (x *BoothInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoothInfo.ProtoReflect.Descriptor instead.
func (*BoothInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{9}
}

func (x *BoothInfo) GetGuid() int32 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *BoothInfo) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BoothInfo) GetProjectLogo() string {
	if x != nil {
		return x.ProjectLogo
	}
	return ""
}

func (x *BoothInfo) GetProjectUrl() string {
	if x != nil {
		return x.ProjectUrl
	}
	return ""
}

func (x *BoothInfo) GetIsShowMohe() bool {
	if x != nil {
		return x.IsShowMohe
	}
	return false
}

func (x *BoothInfo) GetMoheUrl() string {
	if x != nil {
		return x.MoheUrl
	}
	return ""
}

func (x *BoothInfo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *BoothInfo) GetLargeUrl() string {
	if x != nil {
		return x.LargeUrl
	}
	return ""
}

func (x *BoothInfo) GetBoardBgColor() string {
	if x != nil {
		return x.BoardBgColor
	}
	return ""
}

func (x *BoothInfo) GetBoardBtnBgColor() string {
	if x != nil {
		return x.BoardBtnBgColor
	}
	return ""
}

func (x *BoothInfo) GetBoardBtnFontColor() string {
	if x != nil {
		return x.BoardBtnFontColor
	}
	return ""
}

func (x *BoothInfo) GetDataBgColor() string {
	if x != nil {
		return x.DataBgColor
	}
	return ""
}

func (x *BoothInfo) GetDataContentColor() string {
	if x != nil {
		return x.DataContentColor
	}
	return ""
}

func (x *BoothInfo) GetDataTitleColor() string {
	if x != nil {
		return x.DataTitleColor
	}
	return ""
}

func (x *BoothInfo) GetIsShowLike() bool {
	if x != nil {
		return x.IsShowLike
	}
	return false
}

type MVBBoothCallInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxCallNumber     int32 `protobuf:"varint,1,opt,name=max_call_number,json=maxCallNumber,proto3" json:"max_call_number,omitempty"`
	CurrentCallNumber int32 `protobuf:"varint,2,opt,name=current_call_number,json=currentCallNumber,proto3" json:"current_call_number,omitempty"`
	TotalCallNumber   int32 `protobuf:"varint,3,opt,name=total_call_number,json=totalCallNumber,proto3" json:"total_call_number,omitempty"`
	SprinkleTime      int64 `protobuf:"varint,4,opt,name=sprinkle_time,json=sprinkleTime,proto3" json:"sprinkle_time,omitempty"`
	RewardTime        int64 `protobuf:"varint,5,opt,name=reward_time,json=rewardTime,proto3" json:"reward_time,omitempty"`
}

func (x *MVBBoothCallInfo) Reset() {
	*x = MVBBoothCallInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MVBBoothCallInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MVBBoothCallInfo) ProtoMessage() {}

func (x *MVBBoothCallInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MVBBoothCallInfo.ProtoReflect.Descriptor instead.
func (*MVBBoothCallInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{10}
}

func (x *MVBBoothCallInfo) GetMaxCallNumber() int32 {
	if x != nil {
		return x.MaxCallNumber
	}
	return 0
}

func (x *MVBBoothCallInfo) GetCurrentCallNumber() int32 {
	if x != nil {
		return x.CurrentCallNumber
	}
	return 0
}

func (x *MVBBoothCallInfo) GetTotalCallNumber() int32 {
	if x != nil {
		return x.TotalCallNumber
	}
	return 0
}

func (x *MVBBoothCallInfo) GetSprinkleTime() int64 {
	if x != nil {
		return x.SprinkleTime
	}
	return 0
}

func (x *MVBBoothCallInfo) GetRewardTime() int64 {
	if x != nil {
		return x.RewardTime
	}
	return 0
}

type MVBBoothInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LogoImgUrl      string            `protobuf:"bytes,2,opt,name=logo_img_url,json=logoImgUrl,proto3" json:"logo_img_url,omitempty"`
	IntroduceImgUrl string            `protobuf:"bytes,3,opt,name=introduce_img_url,json=introduceImgUrl,proto3" json:"introduce_img_url,omitempty"`
	IsCallEnable    bool              `protobuf:"varint,4,opt,name=isCallEnable,proto3" json:"isCallEnable,omitempty"`
	Link            string            `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
	CallInfo        *MVBBoothCallInfo `protobuf:"bytes,6,opt,name=call_info,json=callInfo,proto3" json:"call_info,omitempty"`
	ProjectName     string            `protobuf:"bytes,7,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
}

func (x *MVBBoothInfo) Reset() {
	*x = MVBBoothInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MVBBoothInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MVBBoothInfo) ProtoMessage() {}

func (x *MVBBoothInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MVBBoothInfo.ProtoReflect.Descriptor instead.
func (*MVBBoothInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{11}
}

func (x *MVBBoothInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MVBBoothInfo) GetLogoImgUrl() string {
	if x != nil {
		return x.LogoImgUrl
	}
	return ""
}

func (x *MVBBoothInfo) GetIntroduceImgUrl() string {
	if x != nil {
		return x.IntroduceImgUrl
	}
	return ""
}

func (x *MVBBoothInfo) GetIsCallEnable() bool {
	if x != nil {
		return x.IsCallEnable
	}
	return false
}

func (x *MVBBoothInfo) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *MVBBoothInfo) GetCallInfo() *MVBBoothCallInfo {
	if x != nil {
		return x.CallInfo
	}
	return nil
}

func (x *MVBBoothInfo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type BoothValueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid  int32    `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *BoothValueInfo) Reset() {
	*x = BoothValueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoothValueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoothValueInfo) ProtoMessage() {}

func (x *BoothValueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoothValueInfo.ProtoReflect.Descriptor instead.
func (*BoothValueInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{12}
}

func (x *BoothValueInfo) GetGuid() int32 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *BoothValueInfo) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type CoinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Position  *Vector3 `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Amount    string   `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Symbol    string   `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	StartTime int64    `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64    `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *CoinInfo) Reset() {
	*x = CoinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinInfo) ProtoMessage() {}

func (x *CoinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinInfo.ProtoReflect.Descriptor instead.
func (*CoinInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{13}
}

func (x *CoinInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CoinInfo) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CoinInfo) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *CoinInfo) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CoinInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *CoinInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type MVBProjectData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName   string  `protobuf:"bytes,1,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ProjectIntro  string  `protobuf:"bytes,2,opt,name=projectIntro,proto3" json:"projectIntro,omitempty"`
	RoadMapUrl    string  `protobuf:"bytes,3,opt,name=roadMapUrl,proto3" json:"roadMapUrl,omitempty"`
	VideoUrl      string  `protobuf:"bytes,4,opt,name=videoUrl,proto3" json:"videoUrl,omitempty"`
	CoinName      string  `protobuf:"bytes,5,opt,name=coinName,proto3" json:"coinName,omitempty"`
	CoinValue     float64 `protobuf:"fixed64,6,opt,name=coinValue,proto3" json:"coinValue,omitempty"`
	Volume        float64 `protobuf:"fixed64,7,opt,name=volume,proto3" json:"volume,omitempty"`
	Supply        float64 `protobuf:"fixed64,8,opt,name=supply,proto3" json:"supply,omitempty"`
	MarketCap     float64 `protobuf:"fixed64,9,opt,name=marketCap,proto3" json:"marketCap,omitempty"`
	IconUrl       string  `protobuf:"bytes,10,opt,name=iconUrl,proto3" json:"iconUrl,omitempty"`
	VideoImageUrl string  `protobuf:"bytes,11,opt,name=videoImageUrl,proto3" json:"videoImageUrl,omitempty"`
	RoadMapIntro  string  `protobuf:"bytes,12,opt,name=roadMapIntro,proto3" json:"roadMapIntro,omitempty"`
}

func (x *MVBProjectData) Reset() {
	*x = MVBProjectData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MVBProjectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MVBProjectData) ProtoMessage() {}

func (x *MVBProjectData) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MVBProjectData.ProtoReflect.Descriptor instead.
func (*MVBProjectData) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{14}
}

func (x *MVBProjectData) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *MVBProjectData) GetProjectIntro() string {
	if x != nil {
		return x.ProjectIntro
	}
	return ""
}

func (x *MVBProjectData) GetRoadMapUrl() string {
	if x != nil {
		return x.RoadMapUrl
	}
	return ""
}

func (x *MVBProjectData) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *MVBProjectData) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *MVBProjectData) GetCoinValue() float64 {
	if x != nil {
		return x.CoinValue
	}
	return 0
}

func (x *MVBProjectData) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MVBProjectData) GetSupply() float64 {
	if x != nil {
		return x.Supply
	}
	return 0
}

func (x *MVBProjectData) GetMarketCap() float64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *MVBProjectData) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *MVBProjectData) GetVideoImageUrl() string {
	if x != nil {
		return x.VideoImageUrl
	}
	return ""
}

func (x *MVBProjectData) GetRoadMapIntro() string {
	if x != nil {
		return x.RoadMapIntro
	}
	return ""
}

type PersonalSpaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserGuid       int64  `protobuf:"varint,2,opt,name=user_guid,json=userGuid,proto3" json:"user_guid,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	MaxPeopleCount int32  `protobuf:"varint,4,opt,name=max_people_count,json=maxPeopleCount,proto3" json:"max_people_count,omitempty"`
	PeopleCount    int32  `protobuf:"varint,5,opt,name=people_count,json=peopleCount,proto3" json:"people_count,omitempty"`
	UrlAsset       string `protobuf:"bytes,6,opt,name=url_asset,json=urlAsset,proto3" json:"url_asset,omitempty"`
}

func (x *PersonalSpaceInfo) Reset() {
	*x = PersonalSpaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalSpaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalSpaceInfo) ProtoMessage() {}

func (x *PersonalSpaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalSpaceInfo.ProtoReflect.Descriptor instead.
func (*PersonalSpaceInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{15}
}

func (x *PersonalSpaceInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PersonalSpaceInfo) GetUserGuid() int64 {
	if x != nil {
		return x.UserGuid
	}
	return 0
}

func (x *PersonalSpaceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PersonalSpaceInfo) GetMaxPeopleCount() int32 {
	if x != nil {
		return x.MaxPeopleCount
	}
	return 0
}

func (x *PersonalSpaceInfo) GetPeopleCount() int32 {
	if x != nil {
		return x.PeopleCount
	}
	return 0
}

func (x *PersonalSpaceInfo) GetUrlAsset() string {
	if x != nil {
		return x.UrlAsset
	}
	return ""
}

type AMASpacePersonalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	McState         bool             `protobuf:"varint,1,opt,name=mcState,proto3" json:"mcState,omitempty"`
	ScenePlayerInfo *PlayerSceneInfo `protobuf:"bytes,2,opt,name=scenePlayerInfo,proto3" json:"scenePlayerInfo,omitempty"`
	Broadcast       bool             `protobuf:"varint,3,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
}

func (x *AMASpacePersonalInfo) Reset() {
	*x = AMASpacePersonalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AMASpacePersonalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AMASpacePersonalInfo) ProtoMessage() {}

func (x *AMASpacePersonalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AMASpacePersonalInfo.ProtoReflect.Descriptor instead.
func (*AMASpacePersonalInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{16}
}

func (x *AMASpacePersonalInfo) GetMcState() bool {
	if x != nil {
		return x.McState
	}
	return false
}

func (x *AMASpacePersonalInfo) GetScenePlayerInfo() *PlayerSceneInfo {
	if x != nil {
		return x.ScenePlayerInfo
	}
	return nil
}

func (x *AMASpacePersonalInfo) GetBroadcast() bool {
	if x != nil {
		return x.Broadcast
	}
	return false
}

type SNSFollowerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	HeadImg      string       `protobuf:"bytes,3,opt,name=head_img,json=headImg,proto3" json:"head_img,omitempty"`
	Status       OnlineStatus `protobuf:"varint,4,opt,name=status,proto3,enum=metaverse.OnlineStatus" json:"status,omitempty"`
	FollowStatus int32        `protobuf:"varint,5,opt,name=follow_status,json=followStatus,proto3" json:"follow_status,omitempty"`
	SpaceId      int32        `protobuf:"varint,6,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
}

func (x *SNSFollowerInfo) Reset() {
	*x = SNSFollowerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNSFollowerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNSFollowerInfo) ProtoMessage() {}

func (x *SNSFollowerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNSFollowerInfo.ProtoReflect.Descriptor instead.
func (*SNSFollowerInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{17}
}

func (x *SNSFollowerInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SNSFollowerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SNSFollowerInfo) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

func (x *SNSFollowerInfo) GetStatus() OnlineStatus {
	if x != nil {
		return x.Status
	}
	return OnlineStatus_Offline
}

func (x *SNSFollowerInfo) GetFollowStatus() int32 {
	if x != nil {
		return x.FollowStatus
	}
	return 0
}

func (x *SNSFollowerInfo) GetSpaceId() int32 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

type MVBBoxInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Position *Vector3 `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Amount   string   `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Symbol   string   `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	EndTime  int64    `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	BoothId  string   `protobuf:"bytes,6,opt,name=booth_id,json=boothId,proto3" json:"booth_id,omitempty"`
}

func (x *MVBBoxInfo) Reset() {
	*x = MVBBoxInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MVBBoxInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MVBBoxInfo) ProtoMessage() {}

func (x *MVBBoxInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MVBBoxInfo.ProtoReflect.Descriptor instead.
func (*MVBBoxInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{18}
}

func (x *MVBBoxInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MVBBoxInfo) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *MVBBoxInfo) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *MVBBoxInfo) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MVBBoxInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *MVBBoxInfo) GetBoothId() string {
	if x != nil {
		return x.BoothId
	}
	return ""
}

type BlockheadGameVictoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid int64 `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Rank int32 `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *BlockheadGameVictoryInfo) Reset() {
	*x = BlockheadGameVictoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockheadGameVictoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockheadGameVictoryInfo) ProtoMessage() {}

func (x *BlockheadGameVictoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockheadGameVictoryInfo.ProtoReflect.Descriptor instead.
func (*BlockheadGameVictoryInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{19}
}

func (x *BlockheadGameVictoryInfo) GetGuid() int64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *BlockheadGameVictoryInfo) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type SC_Tips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *SC_Tips) Reset() {
	*x = SC_Tips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_Tips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_Tips) ProtoMessage() {}

func (x *SC_Tips) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_Tips.ProtoReflect.Descriptor instead.
func (*SC_Tips) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{20}
}

func (x *SC_Tips) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SC_Tips) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type SC_Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *SC_Version) Reset() {
	*x = SC_Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_Version) ProtoMessage() {}

func (x *SC_Version) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_Version.ProtoReflect.Descriptor instead.
func (*SC_Version) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{21}
}

func (x *SC_Version) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type CS_Login struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CS_Login) Reset() {
	*x = CS_Login{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_Login) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_Login) ProtoMessage() {}

func (x *CS_Login) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_Login.ProtoReflect.Descriptor instead.
func (*CS_Login) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{22}
}

func (x *CS_Login) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SC_Login struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     LoginStatusCode   `protobuf:"varint,1,opt,name=status,proto3,enum=metaverse.LoginStatusCode" json:"status,omitempty"`
	StatusInfo string            `protobuf:"bytes,2,opt,name=statusInfo,proto3" json:"statusInfo,omitempty"`
	Guid       int64             `protobuf:"varint,3,opt,name=guid,proto3" json:"guid,omitempty"`
	BaseInfo   *PlayerBaseInfo   `protobuf:"bytes,4,opt,name=baseInfo,proto3" json:"baseInfo,omitempty"`
	AvatarInfo *PlayerAvatarInfo `protobuf:"bytes,5,opt,name=avatarInfo,proto3" json:"avatarInfo,omitempty"`
	AssetsInfo *PlayerAssetsInfo `protobuf:"bytes,6,opt,name=assetsInfo,proto3" json:"assetsInfo,omitempty"`
}

func (x *SC_Login) Reset() {
	*x = SC_Login{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_Login) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_Login) ProtoMessage() {}

func (x *SC_Login) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_Login.ProtoReflect.Descriptor instead.
func (*SC_Login) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{23}
}

func (x *SC_Login) GetStatus() LoginStatusCode {
	if x != nil {
		return x.Status
	}
	return LoginStatusCode_LoginFailed
}

func (x *SC_Login) GetStatusInfo() string {
	if x != nil {
		return x.StatusInfo
	}
	return ""
}

func (x *SC_Login) GetGuid() int64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *SC_Login) GetBaseInfo() *PlayerBaseInfo {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *SC_Login) GetAvatarInfo() *PlayerAvatarInfo {
	if x != nil {
		return x.AvatarInfo
	}
	return nil
}

func (x *SC_Login) GetAssetsInfo() *PlayerAssetsInfo {
	if x != nil {
		return x.AssetsInfo
	}
	return nil
}

type CS_ChangePlayerInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid       int64             `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	PalyerName string            `protobuf:"bytes,2,opt,name=palyerName,proto3" json:"palyerName,omitempty"`
	Sex        Sex               `protobuf:"varint,3,opt,name=sex,proto3,enum=metaverse.Sex" json:"sex,omitempty"`
	AvatarInfo *PlayerAvatarInfo `protobuf:"bytes,4,opt,name=avatarInfo,proto3" json:"avatarInfo,omitempty"`
}

func (x *CS_ChangePlayerInfos) Reset() {
	*x = CS_ChangePlayerInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_ChangePlayerInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_ChangePlayerInfos) ProtoMessage() {}

func (x *CS_ChangePlayerInfos) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_ChangePlayerInfos.ProtoReflect.Descriptor instead.
func (*CS_ChangePlayerInfos) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{24}
}

func (x *CS_ChangePlayerInfos) GetGuid() int64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *CS_ChangePlayerInfos) GetPalyerName() string {
	if x != nil {
		return x.PalyerName
	}
	return ""
}

func (x *CS_ChangePlayerInfos) GetSex() Sex {
	if x != nil {
		return x.Sex
	}
	return Sex_Man
}

func (x *CS_ChangePlayerInfos) GetAvatarInfo() *PlayerAvatarInfo {
	if x != nil {
		return x.AvatarInfo
	}
	return nil
}

type SC_ChangePlayerInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=metaverse.StatusCode" json:"status,omitempty"`
}

func (x *SC_ChangePlayerInfos) Reset() {
	*x = SC_ChangePlayerInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_ChangePlayerInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_ChangePlayerInfos) ProtoMessage() {}

func (x *SC_ChangePlayerInfos) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_ChangePlayerInfos.ProtoReflect.Descriptor instead.
func (*SC_ChangePlayerInfos) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{25}
}

func (x *SC_ChangePlayerInfos) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_Success
}

type CS_UpdateBoothInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid int32 `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
}

func (x *CS_UpdateBoothInfo) Reset() {
	*x = CS_UpdateBoothInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_UpdateBoothInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_UpdateBoothInfo) ProtoMessage() {}

func (x *CS_UpdateBoothInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_UpdateBoothInfo.ProtoReflect.Descriptor instead.
func (*CS_UpdateBoothInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{26}
}

func (x *CS_UpdateBoothInfo) GetGuid() int32 {
	if x != nil {
		return x.Guid
	}
	return 0
}

type SC_UpdateBoothInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BothValueInfo *BoothValueInfo `protobuf:"bytes,2,opt,name=bothValueInfo,proto3" json:"bothValueInfo,omitempty"`
}

func (x *SC_UpdateBoothInfo) Reset() {
	*x = SC_UpdateBoothInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_UpdateBoothInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_UpdateBoothInfo) ProtoMessage() {}

func (x *SC_UpdateBoothInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_UpdateBoothInfo.ProtoReflect.Descriptor instead.
func (*SC_UpdateBoothInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{27}
}

func (x *SC_UpdateBoothInfo) GetBothValueInfo() *BoothValueInfo {
	if x != nil {
		return x.BothValueInfo
	}
	return nil
}

type CS_EnterScene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid        int64    `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Spaceid     int64    `protobuf:"varint,2,opt,name=spaceid,proto3" json:"spaceid,omitempty"`
	Position    *Vector3 `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Orientation float32  `protobuf:"fixed32,4,opt,name=orientation,proto3" json:"orientation,omitempty"`
}

func (x *CS_EnterScene) Reset() {
	*x = CS_EnterScene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_EnterScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_EnterScene) ProtoMessage() {}

func (x *CS_EnterScene) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_EnterScene.ProtoReflect.Descriptor instead.
func (*CS_EnterScene) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{28}
}

func (x *CS_EnterScene) GetGuid() int64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *CS_EnterScene) GetSpaceid() int64 {
	if x != nil {
		return x.Spaceid
	}
	return 0
}

func (x *CS_EnterScene) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CS_EnterScene) GetOrientation() float32 {
	if x != nil {
		return x.Orientation
	}
	return 0
}

type SC_EnterScene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BothInfos        []*BoothInfo       `protobuf:"bytes,1,rep,name=bothInfos,proto3" json:"bothInfos,omitempty"`
	BothValueInfos   []*BoothValueInfo  `protobuf:"bytes,2,rep,name=bothValueInfos,proto3" json:"bothValueInfos,omitempty"`
	IncomeUrl        string             `protobuf:"bytes,3,opt,name=incomeUrl,proto3" json:"incomeUrl,omitempty"`
	IncomValue       []string           `protobuf:"bytes,4,rep,name=incomValue,proto3" json:"incomValue,omitempty"`
	StatisticalValue []string           `protobuf:"bytes,5,rep,name=statisticalValue,proto3" json:"statisticalValue,omitempty"`
	AllPlayerInfo    []*PlayerSceneInfo `protobuf:"bytes,6,rep,name=allPlayerInfo,proto3" json:"allPlayerInfo,omitempty"`
	AllCoinInfo      []*CoinInfo        `protobuf:"bytes,7,rep,name=allCoinInfo,proto3" json:"allCoinInfo,omitempty"`
	AllLikeBoothIds  []int32            `protobuf:"varint,8,rep,packed,name=allLikeBoothIds,proto3" json:"allLikeBoothIds,omitempty"`
}

func (x *SC_EnterScene) Reset() {
	*x = SC_EnterScene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_EnterScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_EnterScene) ProtoMessage() {}

func (x *SC_EnterScene) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_EnterScene.ProtoReflect.Descriptor instead.
func (*SC_EnterScene) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{29}
}

func (x *SC_EnterScene) GetBothInfos() []*BoothInfo {
	if x != nil {
		return x.BothInfos
	}
	return nil
}

func (x *SC_EnterScene) GetBothValueInfos() []*BoothValueInfo {
	if x != nil {
		return x.BothValueInfos
	}
	return nil
}

func (x *SC_EnterScene) GetIncomeUrl() string {
	if x != nil {
		return x.IncomeUrl
	}
	return ""
}

func (x *SC_EnterScene) GetIncomValue() []string {
	if x != nil {
		return x.IncomValue
	}
	return nil
}

func (x *SC_EnterScene) GetStatisticalValue() []string {
	if x != nil {
		return x.StatisticalValue
	}
	return nil
}

func (x *SC_EnterScene) GetAllPlayerInfo() []*PlayerSceneInfo {
	if x != nil {
		return x.AllPlayerInfo
	}
	return nil
}

func (x *SC_EnterScene) GetAllCoinInfo() []*CoinInfo {
	if x != nil {
		return x.AllCoinInfo
	}
	return nil
}

func (x *SC_EnterScene) GetAllLikeBoothIds() []int32 {
	if x != nil {
		return x.AllLikeBoothIds
	}
	return nil
}

type CS_ReadyEnterScene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spaceid int64 `protobuf:"varint,2,opt,name=spaceid,proto3" json:"spaceid,omitempty"`
}

func (x *CS_ReadyEnterScene) Reset() {
	*x = CS_ReadyEnterScene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_ReadyEnterScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_ReadyEnterScene) ProtoMessage() {}

func (x *CS_ReadyEnterScene) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_ReadyEnterScene.ProtoReflect.Descriptor instead.
func (*CS_ReadyEnterScene) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{30}
}

func (x *CS_ReadyEnterScene) GetSpaceid() int64 {
	if x != nil {
		return x.Spaceid
	}
	return 0
}

type CS_GetGameSpaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gameid int64 `protobuf:"varint,1,opt,name=gameid,proto3" json:"gameid,omitempty"`
}

func (x *CS_GetGameSpaceInfo) Reset() {
	*x = CS_GetGameSpaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_GetGameSpaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_GetGameSpaceInfo) ProtoMessage() {}

func (x *CS_GetGameSpaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_GetGameSpaceInfo.ProtoReflect.Descriptor instead.
func (*CS_GetGameSpaceInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{31}
}

func (x *CS_GetGameSpaceInfo) GetGameid() int64 {
	if x != nil {
		return x.Gameid
	}
	return 0
}

type SC_GetGameSpaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spaceid int64 `protobuf:"varint,1,opt,name=spaceid,proto3" json:"spaceid,omitempty"`
}

func (x *SC_GetGameSpaceInfo) Reset() {
	*x = SC_GetGameSpaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_GetGameSpaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_GetGameSpaceInfo) ProtoMessage() {}

func (x *SC_GetGameSpaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_GetGameSpaceInfo.ProtoReflect.Descriptor instead.
func (*SC_GetGameSpaceInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{32}
}

func (x *SC_GetGameSpaceInfo) GetSpaceid() int64 {
	if x != nil {
		return x.Spaceid
	}
	return 0
}

type CS_ExitScene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid int64 `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
}

func (x *CS_ExitScene) Reset() {
	*x = CS_ExitScene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_ExitScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_ExitScene) ProtoMessage() {}

func (x *CS_ExitScene) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_ExitScene.ProtoReflect.Descriptor instead.
func (*CS_ExitScene) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{33}
}

func (x *CS_ExitScene) GetGuid() int64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

type SC_ExitScene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=metaverse.StatusCode" json:"status,omitempty"`
}

func (x *SC_ExitScene) Reset() {
	*x = SC_ExitScene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_ExitScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_ExitScene) ProtoMessage() {}

func (x *SC_ExitScene) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_ExitScene.ProtoReflect.Descriptor instead.
func (*SC_ExitScene) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{34}
}

func (x *SC_ExitScene) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_Success
}

type SC_EnterSceneNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo *PlayerSceneInfo `protobuf:"bytes,1,opt,name=playerInfo,proto3" json:"playerInfo,omitempty"`
}

func (x *SC_EnterSceneNotify) Reset() {
	*x = SC_EnterSceneNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_EnterSceneNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_EnterSceneNotify) ProtoMessage() {}

func (x *SC_EnterSceneNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_EnterSceneNotify.ProtoReflect.Descriptor instead.
func (*SC_EnterSceneNotify) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{35}
}

func (x *SC_EnterSceneNotify) GetPlayerInfo() *PlayerSceneInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type SC_ExitSceneNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid int64 `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
}

func (x *SC_ExitSceneNotify) Reset() {
	*x = SC_ExitSceneNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_ExitSceneNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_ExitSceneNotify) ProtoMessage() {}

func (x *SC_ExitSceneNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_ExitSceneNotify.ProtoReflect.Descriptor instead.
func (*SC_ExitSceneNotify) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{36}
}

func (x *SC_ExitSceneNotify) GetGuid() int64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

type CS_PlayerMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid        int64    `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Position    *Vector3 `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Orientation float32  `protobuf:"fixed32,3,opt,name=orientation,proto3" json:"orientation,omitempty"`
	Speed       float32  `protobuf:"fixed32,4,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *CS_PlayerMove) Reset() {
	*x = CS_PlayerMove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_PlayerMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_PlayerMove) ProtoMessage() {}

func (x *CS_PlayerMove) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_PlayerMove.ProtoReflect.Descriptor instead.
func (*CS_PlayerMove) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{37}
}

func (x *CS_PlayerMove) GetGuid() int64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *CS_PlayerMove) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CS_PlayerMove) GetOrientation() float32 {
	if x != nil {
		return x.Orientation
	}
	return 0
}

func (x *CS_PlayerMove) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

type CS_PlayerAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid   int64 `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Action int32 `protobuf:"varint,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *CS_PlayerAction) Reset() {
	*x = CS_PlayerAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_PlayerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_PlayerAction) ProtoMessage() {}

func (x *CS_PlayerAction) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_PlayerAction.ProtoReflect.Descriptor instead.
func (*CS_PlayerAction) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{38}
}

func (x *CS_PlayerAction) GetGuid() int64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *CS_PlayerAction) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

type SC_PlayerMoveNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerTrans []*SyncTrans `protobuf:"bytes,1,rep,name=playerTrans,proto3" json:"playerTrans,omitempty"`
}

func (x *SC_PlayerMoveNotify) Reset() {
	*x = SC_PlayerMoveNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_PlayerMoveNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_PlayerMoveNotify) ProtoMessage() {}

func (x *SC_PlayerMoveNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_PlayerMoveNotify.ProtoReflect.Descriptor instead.
func (*SC_PlayerMoveNotify) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{39}
}

func (x *SC_PlayerMoveNotify) GetPlayerTrans() []*SyncTrans {
	if x != nil {
		return x.PlayerTrans
	}
	return nil
}

type SC_PlayerActionNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid   int64 `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Action int32 `protobuf:"varint,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *SC_PlayerActionNotify) Reset() {
	*x = SC_PlayerActionNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_PlayerActionNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_PlayerActionNotify) ProtoMessage() {}

func (x *SC_PlayerActionNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_PlayerActionNotify.ProtoReflect.Descriptor instead.
func (*SC_PlayerActionNotify) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{40}
}

func (x *SC_PlayerActionNotify) GetGuid() int64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *SC_PlayerActionNotify) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

type SC_ChangePlayerInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid       int64             `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	BaseInfo   *PlayerBaseInfo   `protobuf:"bytes,2,opt,name=baseInfo,proto3" json:"baseInfo,omitempty"`
	AvatarInfo *PlayerAvatarInfo `protobuf:"bytes,3,opt,name=avatarInfo,proto3" json:"avatarInfo,omitempty"`
}

func (x *SC_ChangePlayerInfoNotify) Reset() {
	*x = SC_ChangePlayerInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_ChangePlayerInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_ChangePlayerInfoNotify) ProtoMessage() {}

func (x *SC_ChangePlayerInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_ChangePlayerInfoNotify.ProtoReflect.Descriptor instead.
func (*SC_ChangePlayerInfoNotify) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{41}
}

func (x *SC_ChangePlayerInfoNotify) GetGuid() int64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *SC_ChangePlayerInfoNotify) GetBaseInfo() *PlayerBaseInfo {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *SC_ChangePlayerInfoNotify) GetAvatarInfo() *PlayerAvatarInfo {
	if x != nil {
		return x.AvatarInfo
	}
	return nil
}

type CS_PlayerFloor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Floor    int32    `protobuf:"varint,1,opt,name=floor,proto3" json:"floor,omitempty"`
	Position *Vector3 `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *CS_PlayerFloor) Reset() {
	*x = CS_PlayerFloor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_PlayerFloor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_PlayerFloor) ProtoMessage() {}

func (x *CS_PlayerFloor) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_PlayerFloor.ProtoReflect.Descriptor instead.
func (*CS_PlayerFloor) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{42}
}

func (x *CS_PlayerFloor) GetFloor() int32 {
	if x != nil {
		return x.Floor
	}
	return 0
}

func (x *CS_PlayerFloor) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

type CS_Chat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromGuid int64  `protobuf:"varint,1,opt,name=fromGuid,proto3" json:"fromGuid,omitempty"`
	ToGuid   int64  `protobuf:"varint,2,opt,name=toGuid,proto3" json:"toGuid,omitempty"`
	ChatType int32  `protobuf:"varint,3,opt,name=chatType,proto3" json:"chatType,omitempty"`
	Content  string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *CS_Chat) Reset() {
	*x = CS_Chat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_Chat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_Chat) ProtoMessage() {}

func (x *CS_Chat) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_Chat.ProtoReflect.Descriptor instead.
func (*CS_Chat) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{43}
}

func (x *CS_Chat) GetFromGuid() int64 {
	if x != nil {
		return x.FromGuid
	}
	return 0
}

func (x *CS_Chat) GetToGuid() int64 {
	if x != nil {
		return x.ToGuid
	}
	return 0
}

func (x *CS_Chat) GetChatType() int32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *CS_Chat) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type SC_Chat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromGuid  int64  `protobuf:"varint,1,opt,name=fromGuid,proto3" json:"fromGuid,omitempty"`
	UserLevel int32  `protobuf:"varint,2,opt,name=userLevel,proto3" json:"userLevel,omitempty"`
	FromName  string `protobuf:"bytes,3,opt,name=fromName,proto3" json:"fromName,omitempty"`
	ToGuid    int64  `protobuf:"varint,4,opt,name=toGuid,proto3" json:"toGuid,omitempty"`
	ChatType  int32  `protobuf:"varint,5,opt,name=chatType,proto3" json:"chatType,omitempty"`
	Content   string `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	Time      int64  `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SC_Chat) Reset() {
	*x = SC_Chat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_Chat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_Chat) ProtoMessage() {}

func (x *SC_Chat) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_Chat.ProtoReflect.Descriptor instead.
func (*SC_Chat) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{44}
}

func (x *SC_Chat) GetFromGuid() int64 {
	if x != nil {
		return x.FromGuid
	}
	return 0
}

func (x *SC_Chat) GetUserLevel() int32 {
	if x != nil {
		return x.UserLevel
	}
	return 0
}

func (x *SC_Chat) GetFromName() string {
	if x != nil {
		return x.FromName
	}
	return ""
}

func (x *SC_Chat) GetToGuid() int64 {
	if x != nil {
		return x.ToGuid
	}
	return 0
}

func (x *SC_Chat) GetChatType() int32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *SC_Chat) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SC_Chat) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SC_CreateCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*CoinInfo `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *SC_CreateCoin) Reset() {
	*x = SC_CreateCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_CreateCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_CreateCoin) ProtoMessage() {}

func (x *SC_CreateCoin) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_CreateCoin.ProtoReflect.Descriptor instead.
func (*SC_CreateCoin) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{45}
}

func (x *SC_CreateCoin) GetCoins() []*CoinInfo {
	if x != nil {
		return x.Coins
	}
	return nil
}

type CS_PickupCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CS_PickupCoin) Reset() {
	*x = CS_PickupCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_PickupCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_PickupCoin) ProtoMessage() {}

func (x *CS_PickupCoin) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_PickupCoin.ProtoReflect.Descriptor instead.
func (*CS_PickupCoin) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{46}
}

func (x *CS_PickupCoin) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SC_PickupCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status StatusCode `protobuf:"varint,2,opt,name=status,proto3,enum=metaverse.StatusCode" json:"status,omitempty"`
	Tip    string     `protobuf:"bytes,3,opt,name=tip,proto3" json:"tip,omitempty"`
}

func (x *SC_PickupCoin) Reset() {
	*x = SC_PickupCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_PickupCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_PickupCoin) ProtoMessage() {}

func (x *SC_PickupCoin) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_PickupCoin.ProtoReflect.Descriptor instead.
func (*SC_PickupCoin) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{47}
}

func (x *SC_PickupCoin) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SC_PickupCoin) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_Success
}

func (x *SC_PickupCoin) GetTip() string {
	if x != nil {
		return x.Tip
	}
	return ""
}

type SC_PickupCoinNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PickupItemInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *SC_PickupCoinNotify) Reset() {
	*x = SC_PickupCoinNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_PickupCoinNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_PickupCoinNotify) ProtoMessage() {}

func (x *SC_PickupCoinNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_PickupCoinNotify.ProtoReflect.Descriptor instead.
func (*SC_PickupCoinNotify) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{48}
}

func (x *SC_PickupCoinNotify) GetInfos() []*PickupItemInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type SC_LineupNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank int32 `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *SC_LineupNotify) Reset() {
	*x = SC_LineupNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_LineupNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_LineupNotify) ProtoMessage() {}

func (x *SC_LineupNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_LineupNotify.ProtoReflect.Descriptor instead.
func (*SC_LineupNotify) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{49}
}

func (x *SC_LineupNotify) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type CS_CancelLineUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CS_CancelLineUp) Reset() {
	*x = CS_CancelLineUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_CancelLineUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_CancelLineUp) ProtoMessage() {}

func (x *CS_CancelLineUp) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_CancelLineUp.ProtoReflect.Descriptor instead.
func (*CS_CancelLineUp) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{50}
}

type CS_LikeBooth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoothId int32 `protobuf:"varint,1,opt,name=boothId,proto3" json:"boothId,omitempty"`
}

func (x *CS_LikeBooth) Reset() {
	*x = CS_LikeBooth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_LikeBooth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_LikeBooth) ProtoMessage() {}

func (x *CS_LikeBooth) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_LikeBooth.ProtoReflect.Descriptor instead.
func (*CS_LikeBooth) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{51}
}

func (x *CS_LikeBooth) GetBoothId() int32 {
	if x != nil {
		return x.BoothId
	}
	return 0
}

type SC_LikeBooth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode StatusCode `protobuf:"varint,1,opt,name=statusCode,proto3,enum=metaverse.StatusCode" json:"statusCode,omitempty"`
	BoothId    int32      `protobuf:"varint,2,opt,name=boothId,proto3" json:"boothId,omitempty"`
}

func (x *SC_LikeBooth) Reset() {
	*x = SC_LikeBooth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_LikeBooth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_LikeBooth) ProtoMessage() {}

func (x *SC_LikeBooth) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_LikeBooth.ProtoReflect.Descriptor instead.
func (*SC_LikeBooth) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{52}
}

func (x *SC_LikeBooth) GetStatusCode() StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return StatusCode_Success
}

func (x *SC_LikeBooth) GetBoothId() int32 {
	if x != nil {
		return x.BoothId
	}
	return 0
}

type SC_ReadyPersonalSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterGuid int64 `protobuf:"varint,1,opt,name=master_guid,json=masterGuid,proto3" json:"master_guid,omitempty"`
	LocalId    int32 `protobuf:"varint,2,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
}

func (x *SC_ReadyPersonalSpace) Reset() {
	*x = SC_ReadyPersonalSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_ReadyPersonalSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_ReadyPersonalSpace) ProtoMessage() {}

func (x *SC_ReadyPersonalSpace) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_ReadyPersonalSpace.ProtoReflect.Descriptor instead.
func (*SC_ReadyPersonalSpace) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{53}
}

func (x *SC_ReadyPersonalSpace) GetMasterGuid() int64 {
	if x != nil {
		return x.MasterGuid
	}
	return 0
}

func (x *SC_ReadyPersonalSpace) GetLocalId() int32 {
	if x != nil {
		return x.LocalId
	}
	return 0
}

type CS_EnterPersonalSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CS_EnterPersonalSpace) Reset() {
	*x = CS_EnterPersonalSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_EnterPersonalSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_EnterPersonalSpace) ProtoMessage() {}

func (x *CS_EnterPersonalSpace) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_EnterPersonalSpace.ProtoReflect.Descriptor instead.
func (*CS_EnterPersonalSpace) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{54}
}

type SC_EnterPersonalSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllPlayerInfo []*PlayerSceneInfo `protobuf:"bytes,1,rep,name=allPlayerInfo,proto3" json:"allPlayerInfo,omitempty"`
}

func (x *SC_EnterPersonalSpace) Reset() {
	*x = SC_EnterPersonalSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_EnterPersonalSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_EnterPersonalSpace) ProtoMessage() {}

func (x *SC_EnterPersonalSpace) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_EnterPersonalSpace.ProtoReflect.Descriptor instead.
func (*SC_EnterPersonalSpace) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{55}
}

func (x *SC_EnterPersonalSpace) GetAllPlayerInfo() []*PlayerSceneInfo {
	if x != nil {
		return x.AllPlayerInfo
	}
	return nil
}

type CS_PersonalSpaceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group   PersonalSpaceGroup `protobuf:"varint,1,opt,name=group,proto3,enum=metaverse.PersonalSpaceGroup" json:"group,omitempty"`
	Start   int32              `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	Length  int32              `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Keyword string             `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *CS_PersonalSpaceList) Reset() {
	*x = CS_PersonalSpaceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_PersonalSpaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_PersonalSpaceList) ProtoMessage() {}

func (x *CS_PersonalSpaceList) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_PersonalSpaceList.ProtoReflect.Descriptor instead.
func (*CS_PersonalSpaceList) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{56}
}

func (x *CS_PersonalSpaceList) GetGroup() PersonalSpaceGroup {
	if x != nil {
		return x.Group
	}
	return PersonalSpaceGroup_Self
}

func (x *CS_PersonalSpaceList) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *CS_PersonalSpaceList) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *CS_PersonalSpaceList) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type SC_PersonalSpaceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group    PersonalSpaceGroup   `protobuf:"varint,1,opt,name=group,proto3,enum=metaverse.PersonalSpaceGroup" json:"group,omitempty"`
	Spaces   []*PersonalSpaceInfo `protobuf:"bytes,2,rep,name=spaces,proto3" json:"spaces,omitempty"`
	MaxCount int32                `protobuf:"varint,3,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
}

func (x *SC_PersonalSpaceList) Reset() {
	*x = SC_PersonalSpaceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_PersonalSpaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_PersonalSpaceList) ProtoMessage() {}

func (x *SC_PersonalSpaceList) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_PersonalSpaceList.ProtoReflect.Descriptor instead.
func (*SC_PersonalSpaceList) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{57}
}

func (x *SC_PersonalSpaceList) GetGroup() PersonalSpaceGroup {
	if x != nil {
		return x.Group
	}
	return PersonalSpaceGroup_Self
}

func (x *SC_PersonalSpaceList) GetSpaces() []*PersonalSpaceInfo {
	if x != nil {
		return x.Spaces
	}
	return nil
}

func (x *SC_PersonalSpaceList) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

type CS_UpdatePersonalSpaceTV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId int64  `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	TvOff   bool   `protobuf:"varint,2,opt,name=tv_off,json=tvOff,proto3" json:"tv_off,omitempty"`
	Url     string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CS_UpdatePersonalSpaceTV) Reset() {
	*x = CS_UpdatePersonalSpaceTV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_UpdatePersonalSpaceTV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_UpdatePersonalSpaceTV) ProtoMessage() {}

func (x *CS_UpdatePersonalSpaceTV) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_UpdatePersonalSpaceTV.ProtoReflect.Descriptor instead.
func (*CS_UpdatePersonalSpaceTV) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{58}
}

func (x *CS_UpdatePersonalSpaceTV) GetSpaceId() int64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

func (x *CS_UpdatePersonalSpaceTV) GetTvOff() bool {
	if x != nil {
		return x.TvOff
	}
	return false
}

func (x *CS_UpdatePersonalSpaceTV) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SC_UpdatePersonalSpaceTV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=metaverse.StatusCode" json:"status,omitempty"`
}

func (x *SC_UpdatePersonalSpaceTV) Reset() {
	*x = SC_UpdatePersonalSpaceTV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_UpdatePersonalSpaceTV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_UpdatePersonalSpaceTV) ProtoMessage() {}

func (x *SC_UpdatePersonalSpaceTV) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_UpdatePersonalSpaceTV.ProtoReflect.Descriptor instead.
func (*SC_UpdatePersonalSpaceTV) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{59}
}

func (x *SC_UpdatePersonalSpaceTV) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_Success
}

type SC_ChangePersonalSpaceNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TvUrl   string `protobuf:"bytes,1,opt,name=tv_url,json=tvUrl,proto3" json:"tv_url,omitempty"`
	PlayUrl string `protobuf:"bytes,2,opt,name=play_url,json=playUrl,proto3" json:"play_url,omitempty"`
	TvOff   bool   `protobuf:"varint,3,opt,name=tv_off,json=tvOff,proto3" json:"tv_off,omitempty"`
}

func (x *SC_ChangePersonalSpaceNotify) Reset() {
	*x = SC_ChangePersonalSpaceNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_ChangePersonalSpaceNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_ChangePersonalSpaceNotify) ProtoMessage() {}

func (x *SC_ChangePersonalSpaceNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_ChangePersonalSpaceNotify.ProtoReflect.Descriptor instead.
func (*SC_ChangePersonalSpaceNotify) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{60}
}

func (x *SC_ChangePersonalSpaceNotify) GetTvUrl() string {
	if x != nil {
		return x.TvUrl
	}
	return ""
}

func (x *SC_ChangePersonalSpaceNotify) GetPlayUrl() string {
	if x != nil {
		return x.PlayUrl
	}
	return ""
}

func (x *SC_ChangePersonalSpaceNotify) GetTvOff() bool {
	if x != nil {
		return x.TvOff
	}
	return false
}

type SC_ReadyEnterMVBSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res         string   `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
	Position    *Vector3 `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Orientation float32  `protobuf:"fixed32,3,opt,name=orientation,proto3" json:"orientation,omitempty"`
}

func (x *SC_ReadyEnterMVBSpace) Reset() {
	*x = SC_ReadyEnterMVBSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_ReadyEnterMVBSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_ReadyEnterMVBSpace) ProtoMessage() {}

func (x *SC_ReadyEnterMVBSpace) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_ReadyEnterMVBSpace.ProtoReflect.Descriptor instead.
func (*SC_ReadyEnterMVBSpace) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{61}
}

func (x *SC_ReadyEnterMVBSpace) GetRes() string {
	if x != nil {
		return x.Res
	}
	return ""
}

func (x *SC_ReadyEnterMVBSpace) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *SC_ReadyEnterMVBSpace) GetOrientation() float32 {
	if x != nil {
		return x.Orientation
	}
	return 0
}

type CS_EnterMVBSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CS_EnterMVBSpace) Reset() {
	*x = CS_EnterMVBSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_EnterMVBSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_EnterMVBSpace) ProtoMessage() {}

func (x *CS_EnterMVBSpace) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_EnterMVBSpace.ProtoReflect.Descriptor instead.
func (*CS_EnterMVBSpace) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{62}
}

type SC_EnterMVBSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BothInfos             []*MVBBoothInfo    `protobuf:"bytes,1,rep,name=bothInfos,proto3" json:"bothInfos,omitempty"`
	AllPlayerInfos        []*PlayerSceneInfo `protobuf:"bytes,2,rep,name=allPlayerInfos,proto3" json:"allPlayerInfos,omitempty"`
	AllBoxInfos           []*MVBBoxInfo      `protobuf:"bytes,9,rep,name=allBoxInfos,proto3" json:"allBoxInfos,omitempty"`
	AllCoinInfo           []*CoinInfo        `protobuf:"bytes,10,rep,name=allCoinInfo,proto3" json:"allCoinInfo,omitempty"`
	GiftAvailabilityCount int32              `protobuf:"varint,3,opt,name=giftAvailabilityCount,proto3" json:"giftAvailabilityCount,omitempty"`
	GiftStartDataTime     int64              `protobuf:"varint,4,opt,name=giftStartDataTime,proto3" json:"giftStartDataTime,omitempty"`
	GiftEndDataTime       int64              `protobuf:"varint,5,opt,name=giftEndDataTime,proto3" json:"giftEndDataTime,omitempty"`
	CallAvailabilityCount int32              `protobuf:"varint,6,opt,name=callAvailabilityCount,proto3" json:"callAvailabilityCount,omitempty"`
	CallStartDataTime     int64              `protobuf:"varint,7,opt,name=callStartDataTime,proto3" json:"callStartDataTime,omitempty"`
	CallEndDataTime       int64              `protobuf:"varint,8,opt,name=callEndDataTime,proto3" json:"callEndDataTime,omitempty"`
}

func (x *SC_EnterMVBSpace) Reset() {
	*x = SC_EnterMVBSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_EnterMVBSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_EnterMVBSpace) ProtoMessage() {}

func (x *SC_EnterMVBSpace) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_EnterMVBSpace.ProtoReflect.Descriptor instead.
func (*SC_EnterMVBSpace) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{63}
}

func (x *SC_EnterMVBSpace) GetBothInfos() []*MVBBoothInfo {
	if x != nil {
		return x.BothInfos
	}
	return nil
}

func (x *SC_EnterMVBSpace) GetAllPlayerInfos() []*PlayerSceneInfo {
	if x != nil {
		return x.AllPlayerInfos
	}
	return nil
}

func (x *SC_EnterMVBSpace) GetAllBoxInfos() []*MVBBoxInfo {
	if x != nil {
		return x.AllBoxInfos
	}
	return nil
}

func (x *SC_EnterMVBSpace) GetAllCoinInfo() []*CoinInfo {
	if x != nil {
		return x.AllCoinInfo
	}
	return nil
}

func (x *SC_EnterMVBSpace) GetGiftAvailabilityCount() int32 {
	if x != nil {
		return x.GiftAvailabilityCount
	}
	return 0
}

func (x *SC_EnterMVBSpace) GetGiftStartDataTime() int64 {
	if x != nil {
		return x.GiftStartDataTime
	}
	return 0
}

func (x *SC_EnterMVBSpace) GetGiftEndDataTime() int64 {
	if x != nil {
		return x.GiftEndDataTime
	}
	return 0
}

func (x *SC_EnterMVBSpace) GetCallAvailabilityCount() int32 {
	if x != nil {
		return x.CallAvailabilityCount
	}
	return 0
}

func (x *SC_EnterMVBSpace) GetCallStartDataTime() int64 {
	if x != nil {
		return x.CallStartDataTime
	}
	return 0
}

func (x *SC_EnterMVBSpace) GetCallEndDataTime() int64 {
	if x != nil {
		return x.CallEndDataTime
	}
	return 0
}

type CS_ChristmasGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CS_ChristmasGift) Reset() {
	*x = CS_ChristmasGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_ChristmasGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_ChristmasGift) ProtoMessage() {}

func (x *CS_ChristmasGift) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_ChristmasGift.ProtoReflect.Descriptor instead.
func (*CS_ChristmasGift) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{64}
}

type SC_ChristmasGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardType int32  `protobuf:"varint,1,opt,name=reward_type,json=rewardType,proto3" json:"reward_type,omitempty"`
	Amount     string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Symbol     string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	NftName    string `protobuf:"bytes,4,opt,name=nft_name,json=nftName,proto3" json:"nft_name,omitempty"`
	NftLevel   int32  `protobuf:"varint,5,opt,name=nft_level,json=nftLevel,proto3" json:"nft_level,omitempty"`
}

func (x *SC_ChristmasGift) Reset() {
	*x = SC_ChristmasGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_ChristmasGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_ChristmasGift) ProtoMessage() {}

func (x *SC_ChristmasGift) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_ChristmasGift.ProtoReflect.Descriptor instead.
func (*SC_ChristmasGift) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{65}
}

func (x *SC_ChristmasGift) GetRewardType() int32 {
	if x != nil {
		return x.RewardType
	}
	return 0
}

func (x *SC_ChristmasGift) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *SC_ChristmasGift) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SC_ChristmasGift) GetNftName() string {
	if x != nil {
		return x.NftName
	}
	return ""
}

func (x *SC_ChristmasGift) GetNftLevel() int32 {
	if x != nil {
		return x.NftLevel
	}
	return 0
}

type CS_MVBBoothCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoothId string `protobuf:"bytes,1,opt,name=booth_id,json=boothId,proto3" json:"booth_id,omitempty"`
}

func (x *CS_MVBBoothCall) Reset() {
	*x = CS_MVBBoothCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_MVBBoothCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_MVBBoothCall) ProtoMessage() {}

func (x *CS_MVBBoothCall) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_MVBBoothCall.ProtoReflect.Descriptor instead.
func (*CS_MVBBoothCall) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{66}
}

func (x *CS_MVBBoothCall) GetBoothId() string {
	if x != nil {
		return x.BoothId
	}
	return ""
}

type SC_MVBCallInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoothId  string            `protobuf:"bytes,1,opt,name=booth_id,json=boothId,proto3" json:"booth_id,omitempty"`
	CallInfo *MVBBoothCallInfo `protobuf:"bytes,2,opt,name=call_info,json=callInfo,proto3" json:"call_info,omitempty"`
}

func (x *SC_MVBCallInfoNotify) Reset() {
	*x = SC_MVBCallInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_MVBCallInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_MVBCallInfoNotify) ProtoMessage() {}

func (x *SC_MVBCallInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_MVBCallInfoNotify.ProtoReflect.Descriptor instead.
func (*SC_MVBCallInfoNotify) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{67}
}

func (x *SC_MVBCallInfoNotify) GetBoothId() string {
	if x != nil {
		return x.BoothId
	}
	return ""
}

func (x *SC_MVBCallInfoNotify) GetCallInfo() *MVBBoothCallInfo {
	if x != nil {
		return x.CallInfo
	}
	return nil
}

type SC_MVBCreateBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boxs []*MVBBoxInfo `protobuf:"bytes,1,rep,name=boxs,proto3" json:"boxs,omitempty"`
}

func (x *SC_MVBCreateBox) Reset() {
	*x = SC_MVBCreateBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_MVBCreateBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_MVBCreateBox) ProtoMessage() {}

func (x *SC_MVBCreateBox) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_MVBCreateBox.ProtoReflect.Descriptor instead.
func (*SC_MVBCreateBox) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{68}
}

func (x *SC_MVBCreateBox) GetBoxs() []*MVBBoxInfo {
	if x != nil {
		return x.Boxs
	}
	return nil
}

type CS_MVBPickupBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CS_MVBPickupBox) Reset() {
	*x = CS_MVBPickupBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_MVBPickupBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_MVBPickupBox) ProtoMessage() {}

func (x *CS_MVBPickupBox) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_MVBPickupBox.ProtoReflect.Descriptor instead.
func (*CS_MVBPickupBox) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{69}
}

func (x *CS_MVBPickupBox) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SC_MVBPickupBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status StatusCode `protobuf:"varint,2,opt,name=status,proto3,enum=metaverse.StatusCode" json:"status,omitempty"`
	Tip    string     `protobuf:"bytes,3,opt,name=tip,proto3" json:"tip,omitempty"`
}

func (x *SC_MVBPickupBox) Reset() {
	*x = SC_MVBPickupBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_MVBPickupBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_MVBPickupBox) ProtoMessage() {}

func (x *SC_MVBPickupBox) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_MVBPickupBox.ProtoReflect.Descriptor instead.
func (*SC_MVBPickupBox) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{70}
}

func (x *SC_MVBPickupBox) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SC_MVBPickupBox) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_Success
}

func (x *SC_MVBPickupBox) GetTip() string {
	if x != nil {
		return x.Tip
	}
	return ""
}

type SC_MVBPickupBoxNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PickupItemInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *SC_MVBPickupBoxNotify) Reset() {
	*x = SC_MVBPickupBoxNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_MVBPickupBoxNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_MVBPickupBoxNotify) ProtoMessage() {}

func (x *SC_MVBPickupBoxNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_MVBPickupBoxNotify.ProtoReflect.Descriptor instead.
func (*SC_MVBPickupBoxNotify) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{71}
}

func (x *SC_MVBPickupBoxNotify) GetInfos() []*PickupItemInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CS_MVBProjectDataRefresh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month int32 `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *CS_MVBProjectDataRefresh) Reset() {
	*x = CS_MVBProjectDataRefresh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_MVBProjectDataRefresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_MVBProjectDataRefresh) ProtoMessage() {}

func (x *CS_MVBProjectDataRefresh) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_MVBProjectDataRefresh.ProtoReflect.Descriptor instead.
func (*CS_MVBProjectDataRefresh) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{72}
}

func (x *CS_MVBProjectDataRefresh) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

type SC_MVBProjectDataRefresh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month int32             `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	Datas []*MVBProjectData `protobuf:"bytes,2,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *SC_MVBProjectDataRefresh) Reset() {
	*x = SC_MVBProjectDataRefresh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_MVBProjectDataRefresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_MVBProjectDataRefresh) ProtoMessage() {}

func (x *SC_MVBProjectDataRefresh) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_MVBProjectDataRefresh.ProtoReflect.Descriptor instead.
func (*SC_MVBProjectDataRefresh) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{73}
}

func (x *SC_MVBProjectDataRefresh) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *SC_MVBProjectDataRefresh) GetDatas() []*MVBProjectData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type CS_HeartBeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CS_HeartBeat) Reset() {
	*x = CS_HeartBeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_HeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_HeartBeat) ProtoMessage() {}

func (x *CS_HeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_HeartBeat.ProtoReflect.Descriptor instead.
func (*CS_HeartBeat) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{74}
}

type SC_HeartBeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SC_HeartBeat) Reset() {
	*x = SC_HeartBeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_HeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_HeartBeat) ProtoMessage() {}

func (x *SC_HeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_HeartBeat.ProtoReflect.Descriptor instead.
func (*SC_HeartBeat) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{75}
}

type CS_ServiceLines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CS_ServiceLines) Reset() {
	*x = CS_ServiceLines{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_ServiceLines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_ServiceLines) ProtoMessage() {}

func (x *CS_ServiceLines) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_ServiceLines.ProtoReflect.Descriptor instead.
func (*CS_ServiceLines) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{76}
}

type SC_ServiceLines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentLineId int64   `protobuf:"varint,1,opt,name=current_line_id,json=currentLineId,proto3" json:"current_line_id,omitempty"`
	Lines         []*Line `protobuf:"bytes,2,rep,name=lines,proto3" json:"lines,omitempty"`
}

func (x *SC_ServiceLines) Reset() {
	*x = SC_ServiceLines{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_ServiceLines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_ServiceLines) ProtoMessage() {}

func (x *SC_ServiceLines) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_ServiceLines.ProtoReflect.Descriptor instead.
func (*SC_ServiceLines) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{77}
}

func (x *SC_ServiceLines) GetCurrentLineId() int64 {
	if x != nil {
		return x.CurrentLineId
	}
	return 0
}

func (x *SC_ServiceLines) GetLines() []*Line {
	if x != nil {
		return x.Lines
	}
	return nil
}

type CS_ReadyChangeLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineId   int64    `protobuf:"varint,1,opt,name=lineId,proto3" json:"lineId,omitempty"`
	Position *Vector3 `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *CS_ReadyChangeLine) Reset() {
	*x = CS_ReadyChangeLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_ReadyChangeLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_ReadyChangeLine) ProtoMessage() {}

func (x *CS_ReadyChangeLine) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_ReadyChangeLine.ProtoReflect.Descriptor instead.
func (*CS_ReadyChangeLine) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{78}
}

func (x *CS_ReadyChangeLine) GetLineId() int64 {
	if x != nil {
		return x.LineId
	}
	return 0
}

func (x *CS_ReadyChangeLine) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

type SC_ReadyChangeLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=metaverse.StatusCode" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SC_ReadyChangeLine) Reset() {
	*x = SC_ReadyChangeLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_ReadyChangeLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_ReadyChangeLine) ProtoMessage() {}

func (x *SC_ReadyChangeLine) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_ReadyChangeLine.ProtoReflect.Descriptor instead.
func (*SC_ReadyChangeLine) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{79}
}

func (x *SC_ReadyChangeLine) GetCode() StatusCode {
	if x != nil {
		return x.Code
	}
	return StatusCode_Success
}

func (x *SC_ReadyChangeLine) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SC_LiveBoradcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveBoradcastStatus bool   `protobuf:"varint,1,opt,name=live_boradcast_status,json=liveBoradcastStatus,proto3" json:"live_boradcast_status,omitempty"`
	ChannelName         string `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	Token               string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SC_LiveBoradcast) Reset() {
	*x = SC_LiveBoradcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_LiveBoradcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_LiveBoradcast) ProtoMessage() {}

func (x *SC_LiveBoradcast) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_LiveBoradcast.ProtoReflect.Descriptor instead.
func (*SC_LiveBoradcast) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{80}
}

func (x *SC_LiveBoradcast) GetLiveBoradcastStatus() bool {
	if x != nil {
		return x.LiveBoradcastStatus
	}
	return false
}

func (x *SC_LiveBoradcast) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *SC_LiveBoradcast) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SC_StartRollingLottery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*LotteryPlayerInfo `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *SC_StartRollingLottery) Reset() {
	*x = SC_StartRollingLottery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_StartRollingLottery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_StartRollingLottery) ProtoMessage() {}

func (x *SC_StartRollingLottery) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_StartRollingLottery.ProtoReflect.Descriptor instead.
func (*SC_StartRollingLottery) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{81}
}

func (x *SC_StartRollingLottery) GetPlayers() []*LotteryPlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

type CS_RefreshToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CS_RefreshToken) Reset() {
	*x = CS_RefreshToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_RefreshToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_RefreshToken) ProtoMessage() {}

func (x *CS_RefreshToken) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_RefreshToken.ProtoReflect.Descriptor instead.
func (*CS_RefreshToken) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{82}
}

type SC_RefreshToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewToken string `protobuf:"bytes,1,opt,name=newToken,proto3" json:"newToken,omitempty"`
	Result   bool   `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SC_RefreshToken) Reset() {
	*x = SC_RefreshToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_RefreshToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_RefreshToken) ProtoMessage() {}

func (x *SC_RefreshToken) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_RefreshToken.ProtoReflect.Descriptor instead.
func (*SC_RefreshToken) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{83}
}

func (x *SC_RefreshToken) GetNewToken() string {
	if x != nil {
		return x.NewToken
	}
	return ""
}

func (x *SC_RefreshToken) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type SC_LiveBroadcastBanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content     string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	StartupTime int64  `protobuf:"varint,2,opt,name=startupTime,proto3" json:"startupTime,omitempty"`
	EndTime     int64  `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *SC_LiveBroadcastBanner) Reset() {
	*x = SC_LiveBroadcastBanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_LiveBroadcastBanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_LiveBroadcastBanner) ProtoMessage() {}

func (x *SC_LiveBroadcastBanner) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_LiveBroadcastBanner.ProtoReflect.Descriptor instead.
func (*SC_LiveBroadcastBanner) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{84}
}

func (x *SC_LiveBroadcastBanner) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SC_LiveBroadcastBanner) GetStartupTime() int64 {
	if x != nil {
		return x.StartupTime
	}
	return 0
}

func (x *SC_LiveBroadcastBanner) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type SC_ChatBan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ChatBanStatus `protobuf:"varint,1,opt,name=status,proto3,enum=metaverse.ChatBanStatus" json:"status,omitempty"`
}

func (x *SC_ChatBan) Reset() {
	*x = SC_ChatBan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_ChatBan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_ChatBan) ProtoMessage() {}

func (x *SC_ChatBan) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_ChatBan.ProtoReflect.Descriptor instead.
func (*SC_ChatBan) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{85}
}

func (x *SC_ChatBan) GetStatus() ChatBanStatus {
	if x != nil {
		return x.Status
	}
	return ChatBanStatus_Forbidden
}

type SC_ReadyBlockheadGameSapce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPlayerCount int32     `protobuf:"varint,1,opt,name=maxPlayerCount,proto3" json:"maxPlayerCount,omitempty"`
	TotalTime      int64     `protobuf:"varint,2,opt,name=totalTime,proto3" json:"totalTime,omitempty"`
	Position       *Vector3  `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	RankReward     []float32 `protobuf:"fixed32,4,rep,packed,name=rankReward,proto3" json:"rankReward,omitempty"`
}

func (x *SC_ReadyBlockheadGameSapce) Reset() {
	*x = SC_ReadyBlockheadGameSapce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_ReadyBlockheadGameSapce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_ReadyBlockheadGameSapce) ProtoMessage() {}

func (x *SC_ReadyBlockheadGameSapce) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_ReadyBlockheadGameSapce.ProtoReflect.Descriptor instead.
func (*SC_ReadyBlockheadGameSapce) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{86}
}

func (x *SC_ReadyBlockheadGameSapce) GetMaxPlayerCount() int32 {
	if x != nil {
		return x.MaxPlayerCount
	}
	return 0
}

func (x *SC_ReadyBlockheadGameSapce) GetTotalTime() int64 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *SC_ReadyBlockheadGameSapce) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *SC_ReadyBlockheadGameSapce) GetRankReward() []float32 {
	if x != nil {
		return x.RankReward
	}
	return nil
}

type CS_EnterBlockheadGameSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CS_EnterBlockheadGameSpace) Reset() {
	*x = CS_EnterBlockheadGameSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_EnterBlockheadGameSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_EnterBlockheadGameSpace) ProtoMessage() {}

func (x *CS_EnterBlockheadGameSpace) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_EnterBlockheadGameSpace.ProtoReflect.Descriptor instead.
func (*CS_EnterBlockheadGameSpace) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{87}
}

type SC_EnterBlockheadGameSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllPlayerInfo []*PlayerSceneInfo `protobuf:"bytes,1,rep,name=allPlayerInfo,proto3" json:"allPlayerInfo,omitempty"`
}

func (x *SC_EnterBlockheadGameSpace) Reset() {
	*x = SC_EnterBlockheadGameSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_EnterBlockheadGameSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_EnterBlockheadGameSpace) ProtoMessage() {}

func (x *SC_EnterBlockheadGameSpace) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_EnterBlockheadGameSpace.ProtoReflect.Descriptor instead.
func (*SC_EnterBlockheadGameSpace) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{88}
}

func (x *SC_EnterBlockheadGameSpace) GetAllPlayerInfo() []*PlayerSceneInfo {
	if x != nil {
		return x.AllPlayerInfo
	}
	return nil
}

type SC_StartBlockheadGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartupTime int64 `protobuf:"varint,1,opt,name=startupTime,proto3" json:"startupTime,omitempty"`
	EndTime     int64 `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	First       bool  `protobuf:"varint,3,opt,name=first,proto3" json:"first,omitempty"`
}

func (x *SC_StartBlockheadGame) Reset() {
	*x = SC_StartBlockheadGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_StartBlockheadGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_StartBlockheadGame) ProtoMessage() {}

func (x *SC_StartBlockheadGame) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_StartBlockheadGame.ProtoReflect.Descriptor instead.
func (*SC_StartBlockheadGame) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{89}
}

func (x *SC_StartBlockheadGame) GetStartupTime() int64 {
	if x != nil {
		return x.StartupTime
	}
	return 0
}

func (x *SC_StartBlockheadGame) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SC_StartBlockheadGame) GetFirst() bool {
	if x != nil {
		return x.First
	}
	return false
}

type SC_BlockheadGameKillNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerGuids []int64 `protobuf:"varint,1,rep,packed,name=playerGuids,proto3" json:"playerGuids,omitempty"`
}

func (x *SC_BlockheadGameKillNotify) Reset() {
	*x = SC_BlockheadGameKillNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_BlockheadGameKillNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_BlockheadGameKillNotify) ProtoMessage() {}

func (x *SC_BlockheadGameKillNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_BlockheadGameKillNotify.ProtoReflect.Descriptor instead.
func (*SC_BlockheadGameKillNotify) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{90}
}

func (x *SC_BlockheadGameKillNotify) GetPlayerGuids() []int64 {
	if x != nil {
		return x.PlayerGuids
	}
	return nil
}

type SC_BlockheadGameVictoryNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*BlockheadGameVictoryInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *SC_BlockheadGameVictoryNotify) Reset() {
	*x = SC_BlockheadGameVictoryNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_BlockheadGameVictoryNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_BlockheadGameVictoryNotify) ProtoMessage() {}

func (x *SC_BlockheadGameVictoryNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_BlockheadGameVictoryNotify.ProtoReflect.Descriptor instead.
func (*SC_BlockheadGameVictoryNotify) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{91}
}

func (x *SC_BlockheadGameVictoryNotify) GetInfos() []*BlockheadGameVictoryInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type SC_ReadyEnterAMASpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalId int32 `protobuf:"varint,2,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
}

func (x *SC_ReadyEnterAMASpace) Reset() {
	*x = SC_ReadyEnterAMASpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_ReadyEnterAMASpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_ReadyEnterAMASpace) ProtoMessage() {}

func (x *SC_ReadyEnterAMASpace) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_ReadyEnterAMASpace.ProtoReflect.Descriptor instead.
func (*SC_ReadyEnterAMASpace) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{92}
}

func (x *SC_ReadyEnterAMASpace) GetLocalId() int32 {
	if x != nil {
		return x.LocalId
	}
	return 0
}

type CS_EnterAMASpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CS_EnterAMASpace) Reset() {
	*x = CS_EnterAMASpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_EnterAMASpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_EnterAMASpace) ProtoMessage() {}

func (x *CS_EnterAMASpace) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_EnterAMASpace.ProtoReflect.Descriptor instead.
func (*CS_EnterAMASpace) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{93}
}

type SC_EnterAMASpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterGuid       int64                   `protobuf:"varint,1,opt,name=master_guid,json=masterGuid,proto3" json:"master_guid,omitempty"`
	BroadMaxCount    int32                   `protobuf:"varint,2,opt,name=broadMaxCount,proto3" json:"broadMaxCount,omitempty"`
	ListenerMaxCount int32                   `protobuf:"varint,3,opt,name=listenerMaxCount,proto3" json:"listenerMaxCount,omitempty"`
	AllPlayerInfo    []*AMASpacePersonalInfo `protobuf:"bytes,4,rep,name=allPlayerInfo,proto3" json:"allPlayerInfo,omitempty"`
	Token            string                  `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	Channel          string                  `protobuf:"bytes,6,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *SC_EnterAMASpace) Reset() {
	*x = SC_EnterAMASpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_EnterAMASpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_EnterAMASpace) ProtoMessage() {}

func (x *SC_EnterAMASpace) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_EnterAMASpace.ProtoReflect.Descriptor instead.
func (*SC_EnterAMASpace) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{94}
}

func (x *SC_EnterAMASpace) GetMasterGuid() int64 {
	if x != nil {
		return x.MasterGuid
	}
	return 0
}

func (x *SC_EnterAMASpace) GetBroadMaxCount() int32 {
	if x != nil {
		return x.BroadMaxCount
	}
	return 0
}

func (x *SC_EnterAMASpace) GetListenerMaxCount() int32 {
	if x != nil {
		return x.ListenerMaxCount
	}
	return 0
}

func (x *SC_EnterAMASpace) GetAllPlayerInfo() []*AMASpacePersonalInfo {
	if x != nil {
		return x.AllPlayerInfo
	}
	return nil
}

func (x *SC_EnterAMASpace) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SC_EnterAMASpace) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

type SC_AMANotifyMemberEnter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo *AMASpacePersonalInfo `protobuf:"bytes,1,opt,name=playerInfo,proto3" json:"playerInfo,omitempty"`
}

func (x *SC_AMANotifyMemberEnter) Reset() {
	*x = SC_AMANotifyMemberEnter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_AMANotifyMemberEnter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_AMANotifyMemberEnter) ProtoMessage() {}

func (x *SC_AMANotifyMemberEnter) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_AMANotifyMemberEnter.ProtoReflect.Descriptor instead.
func (*SC_AMANotifyMemberEnter) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{95}
}

func (x *SC_AMANotifyMemberEnter) GetPlayerInfo() *AMASpacePersonalInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type SC_AMANotifyMemberExit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *SC_AMANotifyMemberExit) Reset() {
	*x = SC_AMANotifyMemberExit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_AMANotifyMemberExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_AMANotifyMemberExit) ProtoMessage() {}

func (x *SC_AMANotifyMemberExit) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_AMANotifyMemberExit.ProtoReflect.Descriptor instead.
func (*SC_AMANotifyMemberExit) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{96}
}

func (x *SC_AMANotifyMemberExit) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CS_AMAMCState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	State  bool  `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *CS_AMAMCState) Reset() {
	*x = CS_AMAMCState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_AMAMCState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_AMAMCState) ProtoMessage() {}

func (x *CS_AMAMCState) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_AMAMCState.ProtoReflect.Descriptor instead.
func (*CS_AMAMCState) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{97}
}

func (x *CS_AMAMCState) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CS_AMAMCState) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

type SC_AMAMCState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	State     bool  `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	HandlerId int64 `protobuf:"varint,3,opt,name=handlerId,proto3" json:"handlerId,omitempty"`
}

func (x *SC_AMAMCState) Reset() {
	*x = SC_AMAMCState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_AMAMCState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_AMAMCState) ProtoMessage() {}

func (x *SC_AMAMCState) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_AMAMCState.ProtoReflect.Descriptor instead.
func (*SC_AMAMCState) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{98}
}

func (x *SC_AMAMCState) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SC_AMAMCState) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *SC_AMAMCState) GetHandlerId() int64 {
	if x != nil {
		return x.HandlerId
	}
	return 0
}

type CS_AMAInviteSpeak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *CS_AMAInviteSpeak) Reset() {
	*x = CS_AMAInviteSpeak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_AMAInviteSpeak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_AMAInviteSpeak) ProtoMessage() {}

func (x *CS_AMAInviteSpeak) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_AMAInviteSpeak.ProtoReflect.Descriptor instead.
func (*CS_AMAInviteSpeak) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{99}
}

func (x *CS_AMAInviteSpeak) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SC_AMAInviteSpeak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SC_AMAInviteSpeak) Reset() {
	*x = SC_AMAInviteSpeak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_AMAInviteSpeak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_AMAInviteSpeak) ProtoMessage() {}

func (x *SC_AMAInviteSpeak) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_AMAInviteSpeak.ProtoReflect.Descriptor instead.
func (*SC_AMAInviteSpeak) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{100}
}

type CS_AMAInviteSpeakResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agree bool `protobuf:"varint,1,opt,name=agree,proto3" json:"agree,omitempty"`
}

func (x *CS_AMAInviteSpeakResponse) Reset() {
	*x = CS_AMAInviteSpeakResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_AMAInviteSpeakResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_AMAInviteSpeakResponse) ProtoMessage() {}

func (x *CS_AMAInviteSpeakResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_AMAInviteSpeakResponse.ProtoReflect.Descriptor instead.
func (*CS_AMAInviteSpeakResponse) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{101}
}

func (x *CS_AMAInviteSpeakResponse) GetAgree() bool {
	if x != nil {
		return x.Agree
	}
	return false
}

type SC_AMAInviteSpeakResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agree  bool  `protobuf:"varint,1,opt,name=agree,proto3" json:"agree,omitempty"`
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *SC_AMAInviteSpeakResponse) Reset() {
	*x = SC_AMAInviteSpeakResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_AMAInviteSpeakResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_AMAInviteSpeakResponse) ProtoMessage() {}

func (x *SC_AMAInviteSpeakResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_AMAInviteSpeakResponse.ProtoReflect.Descriptor instead.
func (*SC_AMAInviteSpeakResponse) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{102}
}

func (x *SC_AMAInviteSpeakResponse) GetAgree() bool {
	if x != nil {
		return x.Agree
	}
	return false
}

func (x *SC_AMAInviteSpeakResponse) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CS_AMAKick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *CS_AMAKick) Reset() {
	*x = CS_AMAKick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_AMAKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_AMAKick) ProtoMessage() {}

func (x *CS_AMAKick) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_AMAKick.ProtoReflect.Descriptor instead.
func (*CS_AMAKick) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{103}
}

func (x *CS_AMAKick) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SC_AMAKick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SC_AMAKick) Reset() {
	*x = SC_AMAKick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_AMAKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_AMAKick) ProtoMessage() {}

func (x *SC_AMAKick) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_AMAKick.ProtoReflect.Descriptor instead.
func (*SC_AMAKick) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{104}
}

type CS_AMASpeakRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CS_AMASpeakRequest) Reset() {
	*x = CS_AMASpeakRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_AMASpeakRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_AMASpeakRequest) ProtoMessage() {}

func (x *CS_AMASpeakRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_AMASpeakRequest.ProtoReflect.Descriptor instead.
func (*CS_AMASpeakRequest) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{105}
}

type CS_AMASpeakRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *CS_AMASpeakRequestResponse) Reset() {
	*x = CS_AMASpeakRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_AMASpeakRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_AMASpeakRequestResponse) ProtoMessage() {}

func (x *CS_AMASpeakRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_AMASpeakRequestResponse.ProtoReflect.Descriptor instead.
func (*CS_AMASpeakRequestResponse) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{106}
}

func (x *CS_AMASpeakRequestResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CS_AMASpeakRequestResponse) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SC_AMASpeakRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *SC_AMASpeakRequestResponse) Reset() {
	*x = SC_AMASpeakRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_AMASpeakRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_AMASpeakRequestResponse) ProtoMessage() {}

func (x *SC_AMASpeakRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_AMASpeakRequestResponse.ProtoReflect.Descriptor instead.
func (*SC_AMASpeakRequestResponse) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{107}
}

func (x *SC_AMASpeakRequestResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *SC_AMASpeakRequestResponse) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CS_AMANewListenerEnter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *CS_AMANewListenerEnter) Reset() {
	*x = CS_AMANewListenerEnter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_AMANewListenerEnter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_AMANewListenerEnter) ProtoMessage() {}

func (x *CS_AMANewListenerEnter) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_AMANewListenerEnter.ProtoReflect.Descriptor instead.
func (*CS_AMANewListenerEnter) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{108}
}

func (x *CS_AMANewListenerEnter) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SC_AMANewListenerEnter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	HandlerId int64 `protobuf:"varint,2,opt,name=handlerId,proto3" json:"handlerId,omitempty"`
}

func (x *SC_AMANewListenerEnter) Reset() {
	*x = SC_AMANewListenerEnter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_AMANewListenerEnter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_AMANewListenerEnter) ProtoMessage() {}

func (x *SC_AMANewListenerEnter) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_AMANewListenerEnter.ProtoReflect.Descriptor instead.
func (*SC_AMANewListenerEnter) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{109}
}

func (x *SC_AMANewListenerEnter) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SC_AMANewListenerEnter) GetHandlerId() int64 {
	if x != nil {
		return x.HandlerId
	}
	return 0
}

type SC_AMANewBroadcastEnter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *SC_AMANewBroadcastEnter) Reset() {
	*x = SC_AMANewBroadcastEnter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_AMANewBroadcastEnter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_AMANewBroadcastEnter) ProtoMessage() {}

func (x *SC_AMANewBroadcastEnter) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_AMANewBroadcastEnter.ProtoReflect.Descriptor instead.
func (*SC_AMANewBroadcastEnter) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{110}
}

func (x *SC_AMANewBroadcastEnter) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SC_AMASpeakRequestNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []int64 `protobuf:"varint,1,rep,packed,name=players,proto3" json:"players,omitempty"`
}

func (x *SC_AMASpeakRequestNotify) Reset() {
	*x = SC_AMASpeakRequestNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_AMASpeakRequestNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_AMASpeakRequestNotify) ProtoMessage() {}

func (x *SC_AMASpeakRequestNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_AMASpeakRequestNotify.ProtoReflect.Descriptor instead.
func (*SC_AMASpeakRequestNotify) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{111}
}

func (x *SC_AMASpeakRequestNotify) GetPlayers() []int64 {
	if x != nil {
		return x.Players
	}
	return nil
}

type SC_AMAMasterChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewMaster int64 `protobuf:"varint,1,opt,name=newMaster,proto3" json:"newMaster,omitempty"`
}

func (x *SC_AMAMasterChangeNotify) Reset() {
	*x = SC_AMAMasterChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_AMAMasterChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_AMAMasterChangeNotify) ProtoMessage() {}

func (x *SC_AMAMasterChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_AMAMasterChangeNotify.ProtoReflect.Descriptor instead.
func (*SC_AMAMasterChangeNotify) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{112}
}

func (x *SC_AMAMasterChangeNotify) GetNewMaster() int64 {
	if x != nil {
		return x.NewMaster
	}
	return 0
}

type CS_AMACancelHandsup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CS_AMACancelHandsup) Reset() {
	*x = CS_AMACancelHandsup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_AMACancelHandsup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_AMACancelHandsup) ProtoMessage() {}

func (x *CS_AMACancelHandsup) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_AMACancelHandsup.ProtoReflect.Descriptor instead.
func (*CS_AMACancelHandsup) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{113}
}

type SC_AMACancelHandsup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *SC_AMACancelHandsup) Reset() {
	*x = SC_AMACancelHandsup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_AMACancelHandsup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_AMACancelHandsup) ProtoMessage() {}

func (x *SC_AMACancelHandsup) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_AMACancelHandsup.ProtoReflect.Descriptor instead.
func (*SC_AMACancelHandsup) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{114}
}

func (x *SC_AMACancelHandsup) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CS_FollowerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	PageNo int32 `protobuf:"varint,2,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
	Limit  int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CS_FollowerList) Reset() {
	*x = CS_FollowerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_FollowerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_FollowerList) ProtoMessage() {}

func (x *CS_FollowerList) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_FollowerList.ProtoReflect.Descriptor instead.
func (*CS_FollowerList) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{115}
}

func (x *CS_FollowerList) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CS_FollowerList) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *CS_FollowerList) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SC_FollowerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List   []*SNSFollowerInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	PageNo int32              `protobuf:"varint,2,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
	Limit  int32              `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Total  int32              `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SC_FollowerList) Reset() {
	*x = SC_FollowerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_FollowerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_FollowerList) ProtoMessage() {}

func (x *SC_FollowerList) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_FollowerList.ProtoReflect.Descriptor instead.
func (*SC_FollowerList) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{116}
}

func (x *SC_FollowerList) GetList() []*SNSFollowerInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *SC_FollowerList) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *SC_FollowerList) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SC_FollowerList) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CS_FollowingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	PageNo int32 `protobuf:"varint,2,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
	Limit  int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CS_FollowingList) Reset() {
	*x = CS_FollowingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_FollowingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_FollowingList) ProtoMessage() {}

func (x *CS_FollowingList) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_FollowingList.ProtoReflect.Descriptor instead.
func (*CS_FollowingList) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{117}
}

func (x *CS_FollowingList) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CS_FollowingList) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *CS_FollowingList) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SC_FollowingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List   []*SNSFollowerInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	PageNo int32              `protobuf:"varint,2,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
	Limit  int32              `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Total  int32              `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SC_FollowingList) Reset() {
	*x = SC_FollowingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_FollowingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_FollowingList) ProtoMessage() {}

func (x *SC_FollowingList) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_FollowingList.ProtoReflect.Descriptor instead.
func (*SC_FollowingList) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{118}
}

func (x *SC_FollowingList) GetList() []*SNSFollowerInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *SC_FollowingList) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *SC_FollowingList) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SC_FollowingList) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CS_UpdateFollow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetUserId int64 `protobuf:"varint,1,opt,name=targetUserId,proto3" json:"targetUserId,omitempty"`
	Status       bool  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CS_UpdateFollow) Reset() {
	*x = CS_UpdateFollow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_UpdateFollow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_UpdateFollow) ProtoMessage() {}

func (x *CS_UpdateFollow) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_UpdateFollow.ProtoReflect.Descriptor instead.
func (*CS_UpdateFollow) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{119}
}

func (x *CS_UpdateFollow) GetTargetUserId() int64 {
	if x != nil {
		return x.TargetUserId
	}
	return 0
}

func (x *CS_UpdateFollow) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type SC_UpdateFollow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64            `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	TargetUserId int64            `protobuf:"varint,2,opt,name=targetUserId,proto3" json:"targetUserId,omitempty"`
	Status       bool             `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	UserInfo     *SNSFollowerInfo `protobuf:"bytes,4,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
}

func (x *SC_UpdateFollow) Reset() {
	*x = SC_UpdateFollow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_UpdateFollow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_UpdateFollow) ProtoMessage() {}

func (x *SC_UpdateFollow) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_UpdateFollow.ProtoReflect.Descriptor instead.
func (*SC_UpdateFollow) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{120}
}

func (x *SC_UpdateFollow) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SC_UpdateFollow) GetTargetUserId() int64 {
	if x != nil {
		return x.TargetUserId
	}
	return 0
}

func (x *SC_UpdateFollow) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *SC_UpdateFollow) GetUserInfo() *SNSFollowerInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type CS_GetFollowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CS_GetFollowInfo) Reset() {
	*x = CS_GetFollowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_GetFollowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_GetFollowInfo) ProtoMessage() {}

func (x *CS_GetFollowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_GetFollowInfo.ProtoReflect.Descriptor instead.
func (*CS_GetFollowInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{121}
}

func (x *CS_GetFollowInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SC_GetFollowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	HeadImg     string       `protobuf:"bytes,3,opt,name=head_img,json=headImg,proto3" json:"head_img,omitempty"`
	Followers   int64        `protobuf:"varint,4,opt,name=followers,proto3" json:"followers,omitempty"`
	Following   int64        `protobuf:"varint,5,opt,name=following,proto3" json:"following,omitempty"`
	IsFollowing int32        `protobuf:"varint,6,opt,name=is_following,json=isFollowing,proto3" json:"is_following,omitempty"`
	Status      OnlineStatus `protobuf:"varint,7,opt,name=status,proto3,enum=metaverse.OnlineStatus" json:"status,omitempty"`
	IsFriend    int32        `protobuf:"varint,8,opt,name=is_friend,json=isFriend,proto3" json:"is_friend,omitempty"`
}

func (x *SC_GetFollowInfo) Reset() {
	*x = SC_GetFollowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_GetFollowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_GetFollowInfo) ProtoMessage() {}

func (x *SC_GetFollowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_GetFollowInfo.ProtoReflect.Descriptor instead.
func (*SC_GetFollowInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{122}
}

func (x *SC_GetFollowInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SC_GetFollowInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SC_GetFollowInfo) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

func (x *SC_GetFollowInfo) GetFollowers() int64 {
	if x != nil {
		return x.Followers
	}
	return 0
}

func (x *SC_GetFollowInfo) GetFollowing() int64 {
	if x != nil {
		return x.Following
	}
	return 0
}

func (x *SC_GetFollowInfo) GetIsFollowing() int32 {
	if x != nil {
		return x.IsFollowing
	}
	return 0
}

func (x *SC_GetFollowInfo) GetStatus() OnlineStatus {
	if x != nil {
		return x.Status
	}
	return OnlineStatus_Offline
}

func (x *SC_GetFollowInfo) GetIsFriend() int32 {
	if x != nil {
		return x.IsFriend
	}
	return 0
}

type SC_UserStatusChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeType NotifyType   `protobuf:"varint,1,opt,name=change_type,json=changeType,proto3,enum=metaverse.NotifyType" json:"change_type,omitempty"`
	UserId     int64        `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Status     OnlineStatus `protobuf:"varint,3,opt,name=status,proto3,enum=metaverse.OnlineStatus" json:"status,omitempty"`
	SpaceId    int32        `protobuf:"varint,4,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
}

func (x *SC_UserStatusChangeNotify) Reset() {
	*x = SC_UserStatusChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_UserStatusChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_UserStatusChangeNotify) ProtoMessage() {}

func (x *SC_UserStatusChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_UserStatusChangeNotify.ProtoReflect.Descriptor instead.
func (*SC_UserStatusChangeNotify) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{123}
}

func (x *SC_UserStatusChangeNotify) GetChangeType() NotifyType {
	if x != nil {
		return x.ChangeType
	}
	return NotifyType_OnlineOffline
}

func (x *SC_UserStatusChangeNotify) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SC_UserStatusChangeNotify) GetStatus() OnlineStatus {
	if x != nil {
		return x.Status
	}
	return OnlineStatus_Offline
}

func (x *SC_UserStatusChangeNotify) GetSpaceId() int32 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

type CS_GetUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []int64 `protobuf:"varint,1,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *CS_GetUserInfo) Reset() {
	*x = CS_GetUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_GetUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_GetUserInfo) ProtoMessage() {}

func (x *CS_GetUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_GetUserInfo.ProtoReflect.Descriptor instead.
func (*CS_GetUserInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{124}
}

func (x *CS_GetUserInfo) GetUserIds() []int64 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type SC_GetUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*SNSFollowerInfo `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *SC_GetUserInfo) Reset() {
	*x = SC_GetUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_GetUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_GetUserInfo) ProtoMessage() {}

func (x *SC_GetUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_GetUserInfo.ProtoReflect.Descriptor instead.
func (*SC_GetUserInfo) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{125}
}

func (x *SC_GetUserInfo) GetUsers() []*SNSFollowerInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

type CS_OtherPlayers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId int64 `protobuf:"varint,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
}

func (x *CS_OtherPlayers) Reset() {
	*x = CS_OtherPlayers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_OtherPlayers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_OtherPlayers) ProtoMessage() {}

func (x *CS_OtherPlayers) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_OtherPlayers.ProtoReflect.Descriptor instead.
func (*CS_OtherPlayers) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{126}
}

func (x *CS_OtherPlayers) GetSpaceId() int64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

type SC_OtherPlayers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllPlayerInfos []*PlayerSceneInfo `protobuf:"bytes,1,rep,name=allPlayerInfos,proto3" json:"allPlayerInfos,omitempty"`
	AllCoinInfo    []*CoinInfo        `protobuf:"bytes,2,rep,name=allCoinInfo,proto3" json:"allCoinInfo,omitempty"`
}

func (x *SC_OtherPlayers) Reset() {
	*x = SC_OtherPlayers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_OtherPlayers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_OtherPlayers) ProtoMessage() {}

func (x *SC_OtherPlayers) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_OtherPlayers.ProtoReflect.Descriptor instead.
func (*SC_OtherPlayers) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{127}
}

func (x *SC_OtherPlayers) GetAllPlayerInfos() []*PlayerSceneInfo {
	if x != nil {
		return x.AllPlayerInfos
	}
	return nil
}

func (x *SC_OtherPlayers) GetAllCoinInfo() []*CoinInfo {
	if x != nil {
		return x.AllCoinInfo
	}
	return nil
}

type SC_ReadyEnterIsland struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalId int32 `protobuf:"varint,2,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
}

func (x *SC_ReadyEnterIsland) Reset() {
	*x = SC_ReadyEnterIsland{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_ReadyEnterIsland) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_ReadyEnterIsland) ProtoMessage() {}

func (x *SC_ReadyEnterIsland) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_ReadyEnterIsland.ProtoReflect.Descriptor instead.
func (*SC_ReadyEnterIsland) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{128}
}

func (x *SC_ReadyEnterIsland) GetLocalId() int32 {
	if x != nil {
		return x.LocalId
	}
	return 0
}

type CS_EnterIsland struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CS_EnterIsland) Reset() {
	*x = CS_EnterIsland{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS_EnterIsland) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS_EnterIsland) ProtoMessage() {}

func (x *CS_EnterIsland) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS_EnterIsland.ProtoReflect.Descriptor instead.
func (*CS_EnterIsland) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{129}
}

type SC_EnterIsland struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterGuid       int64                   `protobuf:"varint,1,opt,name=master_guid,json=masterGuid,proto3" json:"master_guid,omitempty"`
	BroadMaxCount    int32                   `protobuf:"varint,2,opt,name=broadMaxCount,proto3" json:"broadMaxCount,omitempty"`
	ListenerMaxCount int32                   `protobuf:"varint,3,opt,name=listenerMaxCount,proto3" json:"listenerMaxCount,omitempty"`
	AllPlayerInfo    []*AMASpacePersonalInfo `protobuf:"bytes,4,rep,name=allPlayerInfo,proto3" json:"allPlayerInfo,omitempty"`
	Token            string                  `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	Channel          string                  `protobuf:"bytes,6,opt,name=channel,proto3" json:"channel,omitempty"`
	OpenVoice        bool                    `protobuf:"varint,7,opt,name=openVoice,proto3" json:"openVoice,omitempty"`
}

func (x *SC_EnterIsland) Reset() {
	*x = SC_EnterIsland{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SC_EnterIsland) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SC_EnterIsland) ProtoMessage() {}

func (x *SC_EnterIsland) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SC_EnterIsland.ProtoReflect.Descriptor instead.
func (*SC_EnterIsland) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{130}
}

func (x *SC_EnterIsland) GetMasterGuid() int64 {
	if x != nil {
		return x.MasterGuid
	}
	return 0
}

func (x *SC_EnterIsland) GetBroadMaxCount() int32 {
	if x != nil {
		return x.BroadMaxCount
	}
	return 0
}

func (x *SC_EnterIsland) GetListenerMaxCount() int32 {
	if x != nil {
		return x.ListenerMaxCount
	}
	return 0
}

func (x *SC_EnterIsland) GetAllPlayerInfo() []*AMASpacePersonalInfo {
	if x != nil {
		return x.AllPlayerInfo
	}
	return nil
}

func (x *SC_EnterIsland) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SC_EnterIsland) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *SC_EnterIsland) GetOpenVoice() bool {
	if x != nil {
		return x.OpenVoice
	}
	return false
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId                    int32                          `protobuf:"varint,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	RequireId                    int32                          `protobuf:"varint,2,opt,name=requireId,proto3" json:"requireId,omitempty"`
	Version                      int32                          `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	ScTips                       *SC_Tips                       `protobuf:"bytes,10011,opt,name=scTips,proto3" json:"scTips,omitempty"`
	ScVersion                    *SC_Version                    `protobuf:"bytes,10012,opt,name=scVersion,proto3" json:"scVersion,omitempty"`
	CsLogin                      *CS_Login                      `protobuf:"bytes,1101,opt,name=csLogin,proto3" json:"csLogin,omitempty"`
	ScLogin                      *SC_Login                      `protobuf:"bytes,10101,opt,name=scLogin,proto3" json:"scLogin,omitempty"`
	CsChangePlayerInfos          *CS_ChangePlayerInfos          `protobuf:"bytes,1102,opt,name=csChangePlayerInfos,proto3" json:"csChangePlayerInfos,omitempty"`
	ScChangePlayerInfos          *SC_ChangePlayerInfos          `protobuf:"bytes,10102,opt,name=scChangePlayerInfos,proto3" json:"scChangePlayerInfos,omitempty"`
	CsUpdateBoothInfo            *CS_UpdateBoothInfo            `protobuf:"bytes,1212,opt,name=csUpdateBoothInfo,proto3" json:"csUpdateBoothInfo,omitempty"`
	ScUpdateBoothInfo            *SC_UpdateBoothInfo            `protobuf:"bytes,10212,opt,name=scUpdateBoothInfo,proto3" json:"scUpdateBoothInfo,omitempty"`
	CsEnterScene                 *CS_EnterScene                 `protobuf:"bytes,1201,opt,name=csEnterScene,proto3" json:"csEnterScene,omitempty"`
	ScEnterScene                 *SC_EnterScene                 `protobuf:"bytes,10201,opt,name=scEnterScene,proto3" json:"scEnterScene,omitempty"`
	CsReadyEnterScene            *CS_ReadyEnterScene            `protobuf:"bytes,1213,opt,name=csReadyEnterScene,proto3" json:"csReadyEnterScene,omitempty"`
	CsGetGameSpaceInfo           *CS_GetGameSpaceInfo           `protobuf:"bytes,1214,opt,name=csGetGameSpaceInfo,proto3" json:"csGetGameSpaceInfo,omitempty"`
	ScGetGameSpaceInfo           *SC_GetGameSpaceInfo           `protobuf:"bytes,10214,opt,name=scGetGameSpaceInfo,proto3" json:"scGetGameSpaceInfo,omitempty"`
	CsExitScene                  *CS_ExitScene                  `protobuf:"bytes,1202,opt,name=csExitScene,proto3" json:"csExitScene,omitempty"`
	ScExitScene                  *SC_ExitScene                  `protobuf:"bytes,10202,opt,name=scExitScene,proto3" json:"scExitScene,omitempty"`
	ScEnterSceneNotify           *SC_EnterSceneNotify           `protobuf:"bytes,10203,opt,name=scEnterSceneNotify,proto3" json:"scEnterSceneNotify,omitempty"`
	ScExitSceneNotify            *SC_ExitSceneNotify            `protobuf:"bytes,10204,opt,name=scExitSceneNotify,proto3" json:"scExitSceneNotify,omitempty"`
	CsPlayerMove                 *CS_PlayerMove                 `protobuf:"bytes,1205,opt,name=csPlayerMove,proto3" json:"csPlayerMove,omitempty"`
	CsPlayerAction               *CS_PlayerAction               `protobuf:"bytes,1206,opt,name=csPlayerAction,proto3" json:"csPlayerAction,omitempty"`
	ScPlayerMoveNotify           *SC_PlayerMoveNotify           `protobuf:"bytes,10207,opt,name=scPlayerMoveNotify,proto3" json:"scPlayerMoveNotify,omitempty"`
	ScPlayerActionNotify         *SC_PlayerActionNotify         `protobuf:"bytes,10208,opt,name=scPlayerActionNotify,proto3" json:"scPlayerActionNotify,omitempty"`
	ScChangePlayerInfoNotify     *SC_ChangePlayerInfoNotify     `protobuf:"bytes,10209,opt,name=scChangePlayerInfoNotify,proto3" json:"scChangePlayerInfoNotify,omitempty"`
	CsPlayerFloor                *CS_PlayerFloor                `protobuf:"bytes,1215,opt,name=csPlayerFloor,proto3" json:"csPlayerFloor,omitempty"`
	CsChat                       *CS_Chat                       `protobuf:"bytes,1301,opt,name=csChat,proto3" json:"csChat,omitempty"`
	ScChat                       *SC_Chat                       `protobuf:"bytes,10301,opt,name=scChat,proto3" json:"scChat,omitempty"`
	ScCreateCoin                 *SC_CreateCoin                 `protobuf:"bytes,10401,opt,name=scCreateCoin,proto3" json:"scCreateCoin,omitempty"`
	CsPickupCoin                 *CS_PickupCoin                 `protobuf:"bytes,1402,opt,name=csPickupCoin,proto3" json:"csPickupCoin,omitempty"`
	ScPickupCoin                 *SC_PickupCoin                 `protobuf:"bytes,10402,opt,name=scPickupCoin,proto3" json:"scPickupCoin,omitempty"`
	ScPickupCoinNotify           *SC_PickupCoinNotify           `protobuf:"bytes,10403,opt,name=scPickupCoinNotify,proto3" json:"scPickupCoinNotify,omitempty"`
	ScLineupNotify               *SC_LineupNotify               `protobuf:"bytes,10501,opt,name=scLineupNotify,proto3" json:"scLineupNotify,omitempty"`
	CsCancelLineUp               *CS_CancelLineUp               `protobuf:"bytes,1502,opt,name=csCancelLineUp,proto3" json:"csCancelLineUp,omitempty"`
	CsLikeBooth                  *CS_LikeBooth                  `protobuf:"bytes,1601,opt,name=csLikeBooth,proto3" json:"csLikeBooth,omitempty"`
	ScLikeBooth                  *SC_LikeBooth                  `protobuf:"bytes,10601,opt,name=scLikeBooth,proto3" json:"scLikeBooth,omitempty"`
	ScReadyPersonalSpace         *SC_ReadyPersonalSpace         `protobuf:"bytes,10701,opt,name=scReadyPersonalSpace,proto3" json:"scReadyPersonalSpace,omitempty"`
	CsEnterPersonalSpace         *CS_EnterPersonalSpace         `protobuf:"bytes,1702,opt,name=csEnterPersonalSpace,proto3" json:"csEnterPersonalSpace,omitempty"`
	ScEnterPersonalSpace         *SC_EnterPersonalSpace         `protobuf:"bytes,10702,opt,name=scEnterPersonalSpace,proto3" json:"scEnterPersonalSpace,omitempty"`
	CsPersonalSpaceList          *CS_PersonalSpaceList          `protobuf:"bytes,1703,opt,name=csPersonalSpaceList,proto3" json:"csPersonalSpaceList,omitempty"`
	ScPersonalSpaceList          *SC_PersonalSpaceList          `protobuf:"bytes,10703,opt,name=scPersonalSpaceList,proto3" json:"scPersonalSpaceList,omitempty"`
	CsUpdatePersonalSpaceTV      *CS_UpdatePersonalSpaceTV      `protobuf:"bytes,1704,opt,name=csUpdatePersonalSpaceTV,proto3" json:"csUpdatePersonalSpaceTV,omitempty"`
	ScUpdatePersonalSpaceTV      *SC_UpdatePersonalSpaceTV      `protobuf:"bytes,10704,opt,name=scUpdatePersonalSpaceTV,proto3" json:"scUpdatePersonalSpaceTV,omitempty"`
	ScChangePersonalSpaceNotify  *SC_ChangePersonalSpaceNotify  `protobuf:"bytes,10705,opt,name=scChangePersonalSpaceNotify,proto3" json:"scChangePersonalSpaceNotify,omitempty"`
	ScReadyEnterMVBSpace         *SC_ReadyEnterMVBSpace         `protobuf:"bytes,10801,opt,name=scReadyEnterMVBSpace,proto3" json:"scReadyEnterMVBSpace,omitempty"`
	CsEnterMVBSpace              *CS_EnterMVBSpace              `protobuf:"bytes,1802,opt,name=csEnterMVBSpace,proto3" json:"csEnterMVBSpace,omitempty"`
	ScEnterMVBSpace              *SC_EnterMVBSpace              `protobuf:"bytes,10802,opt,name=scEnterMVBSpace,proto3" json:"scEnterMVBSpace,omitempty"`
	CsChristmasGift              *CS_ChristmasGift              `protobuf:"bytes,1803,opt,name=csChristmasGift,proto3" json:"csChristmasGift,omitempty"`
	ScChristmasGift              *SC_ChristmasGift              `protobuf:"bytes,10803,opt,name=scChristmasGift,proto3" json:"scChristmasGift,omitempty"`
	CsMVBBoothCall               *CS_MVBBoothCall               `protobuf:"bytes,1804,opt,name=csMVBBoothCall,proto3" json:"csMVBBoothCall,omitempty"`
	ScMVBCallInfoNotify          *SC_MVBCallInfoNotify          `protobuf:"bytes,10805,opt,name=scMVBCallInfoNotify,proto3" json:"scMVBCallInfoNotify,omitempty"`
	ScMVBCreateBox               *SC_MVBCreateBox               `protobuf:"bytes,10806,opt,name=scMVBCreateBox,proto3" json:"scMVBCreateBox,omitempty"`
	CsMVBPickupBox               *CS_MVBPickupBox               `protobuf:"bytes,1807,opt,name=csMVBPickupBox,proto3" json:"csMVBPickupBox,omitempty"`
	ScMVBPickupBox               *SC_MVBPickupBox               `protobuf:"bytes,10807,opt,name=scMVBPickupBox,proto3" json:"scMVBPickupBox,omitempty"`
	ScMVBPickupBoxNotify         *SC_MVBPickupBoxNotify         `protobuf:"bytes,10808,opt,name=scMVBPickupBoxNotify,proto3" json:"scMVBPickupBoxNotify,omitempty"`
	CsMVBProjectDataRefresh      *CS_MVBProjectDataRefresh      `protobuf:"bytes,1809,opt,name=csMVBProjectDataRefresh,proto3" json:"csMVBProjectDataRefresh,omitempty"`
	ScMVBProjectDataRefresh      *SC_MVBProjectDataRefresh      `protobuf:"bytes,10809,opt,name=scMVBProjectDataRefresh,proto3" json:"scMVBProjectDataRefresh,omitempty"`
	CsHeartBeat                  *CS_HeartBeat                  `protobuf:"bytes,1100,opt,name=csHeartBeat,proto3" json:"csHeartBeat,omitempty"`
	ScHeartBeat                  *SC_HeartBeat                  `protobuf:"bytes,10100,opt,name=scHeartBeat,proto3" json:"scHeartBeat,omitempty"`
	CsServiceLines               *CS_ServiceLines               `protobuf:"bytes,1103,opt,name=csServiceLines,proto3" json:"csServiceLines,omitempty"`
	ScServiceLines               *SC_ServiceLines               `protobuf:"bytes,10103,opt,name=scServiceLines,proto3" json:"scServiceLines,omitempty"`
	CsReadyChangeLine            *CS_ReadyChangeLine            `protobuf:"bytes,1104,opt,name=csReadyChangeLine,proto3" json:"csReadyChangeLine,omitempty"`
	ScReadyChangeLine            *SC_ReadyChangeLine            `protobuf:"bytes,10104,opt,name=scReadyChangeLine,proto3" json:"scReadyChangeLine,omitempty"`
	ScLiveBoradcast              *SC_LiveBoradcast              `protobuf:"bytes,10404,opt,name=scLiveBoradcast,proto3" json:"scLiveBoradcast,omitempty"`
	ScStartRollingLottery        *SC_StartRollingLottery        `protobuf:"bytes,10405,opt,name=scStartRollingLottery,proto3" json:"scStartRollingLottery,omitempty"`
	CsRefreshToken               *CS_RefreshToken               `protobuf:"bytes,1406,opt,name=csRefreshToken,proto3" json:"csRefreshToken,omitempty"`
	ScRefreshToken               *SC_RefreshToken               `protobuf:"bytes,10406,opt,name=scRefreshToken,proto3" json:"scRefreshToken,omitempty"`
	ScLiveBroadcastBanner        *SC_LiveBroadcastBanner        `protobuf:"bytes,10407,opt,name=scLiveBroadcastBanner,proto3" json:"scLiveBroadcastBanner,omitempty"`
	ScChatBan                    *SC_ChatBan                    `protobuf:"bytes,10302,opt,name=scChatBan,proto3" json:"scChatBan,omitempty"`
	ScReadyBlockheadGameSapce    *SC_ReadyBlockheadGameSapce    `protobuf:"bytes,10901,opt,name=scReadyBlockheadGameSapce,proto3" json:"scReadyBlockheadGameSapce,omitempty"`
	CsEnterBlockheadGameSpace    *CS_EnterBlockheadGameSpace    `protobuf:"bytes,1902,opt,name=csEnterBlockheadGameSpace,proto3" json:"csEnterBlockheadGameSpace,omitempty"`
	ScEnterBlockheadGameSpace    *SC_EnterBlockheadGameSpace    `protobuf:"bytes,10902,opt,name=scEnterBlockheadGameSpace,proto3" json:"scEnterBlockheadGameSpace,omitempty"`
	ScStartBlockheadGame         *SC_StartBlockheadGame         `protobuf:"bytes,10903,opt,name=scStartBlockheadGame,proto3" json:"scStartBlockheadGame,omitempty"`
	ScBlockheadGameKillNotify    *SC_BlockheadGameKillNotify    `protobuf:"bytes,10904,opt,name=scBlockheadGameKillNotify,proto3" json:"scBlockheadGameKillNotify,omitempty"`
	ScBlockheadGameVictoryNotify *SC_BlockheadGameVictoryNotify `protobuf:"bytes,10905,opt,name=scBlockheadGameVictoryNotify,proto3" json:"scBlockheadGameVictoryNotify,omitempty"`
	ScReadyEnterAMASpace         *SC_ReadyEnterAMASpace         `protobuf:"bytes,11001,opt,name=scReadyEnterAMASpace,proto3" json:"scReadyEnterAMASpace,omitempty"`
	CsEnterAMASpace              *CS_EnterAMASpace              `protobuf:"bytes,2002,opt,name=csEnterAMASpace,proto3" json:"csEnterAMASpace,omitempty"`
	ScEnterAMASpace              *SC_EnterAMASpace              `protobuf:"bytes,11002,opt,name=scEnterAMASpace,proto3" json:"scEnterAMASpace,omitempty"`
	ScAMANotifyMemberEnter       *SC_AMANotifyMemberEnter       `protobuf:"bytes,11003,opt,name=scAMANotifyMemberEnter,proto3" json:"scAMANotifyMemberEnter,omitempty"`
	ScAMANotifyMemberExit        *SC_AMANotifyMemberExit        `protobuf:"bytes,11004,opt,name=scAMANotifyMemberExit,proto3" json:"scAMANotifyMemberExit,omitempty"`
	CsAMAMCState                 *CS_AMAMCState                 `protobuf:"bytes,2005,opt,name=csAMAMCState,proto3" json:"csAMAMCState,omitempty"`
	ScAMAMCState                 *SC_AMAMCState                 `protobuf:"bytes,11005,opt,name=scAMAMCState,proto3" json:"scAMAMCState,omitempty"`
	CsAMAInviteSpeak             *CS_AMAInviteSpeak             `protobuf:"bytes,2006,opt,name=csAMAInviteSpeak,proto3" json:"csAMAInviteSpeak,omitempty"`
	ScAMAInviteSpeak             *SC_AMAInviteSpeak             `protobuf:"bytes,11006,opt,name=scAMAInviteSpeak,proto3" json:"scAMAInviteSpeak,omitempty"`
	CsAMAInviteSpeakResponse     *CS_AMAInviteSpeakResponse     `protobuf:"bytes,2014,opt,name=csAMAInviteSpeakResponse,proto3" json:"csAMAInviteSpeakResponse,omitempty"`
	ScAMAInviteSpeakResponse     *SC_AMAInviteSpeakResponse     `protobuf:"bytes,11014,opt,name=scAMAInviteSpeakResponse,proto3" json:"scAMAInviteSpeakResponse,omitempty"`
	CsAMAKick                    *CS_AMAKick                    `protobuf:"bytes,2009,opt,name=csAMAKick,proto3" json:"csAMAKick,omitempty"`
	ScAMAKick                    *SC_AMAKick                    `protobuf:"bytes,11009,opt,name=scAMAKick,proto3" json:"scAMAKick,omitempty"`
	CsAMASpeakRequest            *CS_AMASpeakRequest            `protobuf:"bytes,2010,opt,name=csAMASpeakRequest,proto3" json:"csAMASpeakRequest,omitempty"`
	CsAMASpeakRequestResponse    *CS_AMASpeakRequestResponse    `protobuf:"bytes,2011,opt,name=csAMASpeakRequestResponse,proto3" json:"csAMASpeakRequestResponse,omitempty"`
	ScAMASpeakRequestResponse    *SC_AMASpeakRequestResponse    `protobuf:"bytes,11011,opt,name=scAMASpeakRequestResponse,proto3" json:"scAMASpeakRequestResponse,omitempty"`
	CsAMANewListenerEnter        *CS_AMANewListenerEnter        `protobuf:"bytes,2012,opt,name=csAMANewListenerEnter,proto3" json:"csAMANewListenerEnter,omitempty"`
	ScAMANewListenerEnter        *SC_AMANewListenerEnter        `protobuf:"bytes,11012,opt,name=scAMANewListenerEnter,proto3" json:"scAMANewListenerEnter,omitempty"`
	ScAMANewBroadcastEnter       *SC_AMANewBroadcastEnter       `protobuf:"bytes,11015,opt,name=scAMANewBroadcastEnter,proto3" json:"scAMANewBroadcastEnter,omitempty"`
	ScAMASpeakRequestNotify      *SC_AMASpeakRequestNotify      `protobuf:"bytes,11013,opt,name=scAMASpeakRequestNotify,proto3" json:"scAMASpeakRequestNotify,omitempty"`
	ScAMAMasterChangeNotify      *SC_AMAMasterChangeNotify      `protobuf:"bytes,11016,opt,name=scAMAMasterChangeNotify,proto3" json:"scAMAMasterChangeNotify,omitempty"`
	CsAMACancelHandsup           *CS_AMACancelHandsup           `protobuf:"bytes,2017,opt,name=csAMACancelHandsup,proto3" json:"csAMACancelHandsup,omitempty"`
	ScAMACancelHandsup           *SC_AMACancelHandsup           `protobuf:"bytes,11017,opt,name=scAMACancelHandsup,proto3" json:"scAMACancelHandsup,omitempty"`
	CsFollowerList               *CS_FollowerList               `protobuf:"bytes,2101,opt,name=csFollowerList,proto3" json:"csFollowerList,omitempty"`
	ScFollowerList               *SC_FollowerList               `protobuf:"bytes,11101,opt,name=scFollowerList,proto3" json:"scFollowerList,omitempty"`
	CsFollowingList              *CS_FollowingList              `protobuf:"bytes,2102,opt,name=csFollowingList,proto3" json:"csFollowingList,omitempty"`
	ScFollowingList              *SC_FollowingList              `protobuf:"bytes,11102,opt,name=scFollowingList,proto3" json:"scFollowingList,omitempty"`
	CsUpdateFollow               *CS_UpdateFollow               `protobuf:"bytes,2103,opt,name=csUpdateFollow,proto3" json:"csUpdateFollow,omitempty"`
	ScUpdateFollow               *SC_UpdateFollow               `protobuf:"bytes,11103,opt,name=scUpdateFollow,proto3" json:"scUpdateFollow,omitempty"`
	CsGetFollowInfo              *CS_GetFollowInfo              `protobuf:"bytes,2104,opt,name=csGetFollowInfo,proto3" json:"csGetFollowInfo,omitempty"`
	ScGetFollowInfo              *SC_GetFollowInfo              `protobuf:"bytes,11104,opt,name=scGetFollowInfo,proto3" json:"scGetFollowInfo,omitempty"`
	ScUserStatusChangeNotify     *SC_UserStatusChangeNotify     `protobuf:"bytes,11105,opt,name=scUserStatusChangeNotify,proto3" json:"scUserStatusChangeNotify,omitempty"`
	CsGetUserInfo                *CS_GetUserInfo                `protobuf:"bytes,2106,opt,name=csGetUserInfo,proto3" json:"csGetUserInfo,omitempty"`
	ScGetUserInfo                *SC_GetUserInfo                `protobuf:"bytes,11106,opt,name=scGetUserInfo,proto3" json:"scGetUserInfo,omitempty"`
	CsOtherPlayers               *CS_OtherPlayers               `protobuf:"bytes,1105,opt,name=csOtherPlayers,proto3" json:"csOtherPlayers,omitempty"`
	ScOtherPlayers               *SC_OtherPlayers               `protobuf:"bytes,10105,opt,name=scOtherPlayers,proto3" json:"scOtherPlayers,omitempty"`
	ScReadyEnterIsland           *SC_ReadyEnterIsland           `protobuf:"bytes,11201,opt,name=scReadyEnterIsland,proto3" json:"scReadyEnterIsland,omitempty"`
	CsEnterIsland                *CS_EnterIsland                `protobuf:"bytes,2202,opt,name=csEnterIsland,proto3" json:"csEnterIsland,omitempty"`
	ScEnterIsland                *SC_EnterIsland                `protobuf:"bytes,11202,opt,name=scEnterIsland,proto3" json:"scEnterIsland,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{131}
}

func (x *Message) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *Message) GetRequireId() int32 {
	if x != nil {
		return x.RequireId
	}
	return 0
}

func (x *Message) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Message) GetScTips() *SC_Tips {
	if x != nil {
		return x.ScTips
	}
	return nil
}

func (x *Message) GetScVersion() *SC_Version {
	if x != nil {
		return x.ScVersion
	}
	return nil
}

func (x *Message) GetCsLogin() *CS_Login {
	if x != nil {
		return x.CsLogin
	}
	return nil
}

func (x *Message) GetScLogin() *SC_Login {
	if x != nil {
		return x.ScLogin
	}
	return nil
}

func (x *Message) GetCsChangePlayerInfos() *CS_ChangePlayerInfos {
	if x != nil {
		return x.CsChangePlayerInfos
	}
	return nil
}

func (x *Message) GetScChangePlayerInfos() *SC_ChangePlayerInfos {
	if x != nil {
		return x.ScChangePlayerInfos
	}
	return nil
}

func (x *Message) GetCsUpdateBoothInfo() *CS_UpdateBoothInfo {
	if x != nil {
		return x.CsUpdateBoothInfo
	}
	return nil
}

func (x *Message) GetScUpdateBoothInfo() *SC_UpdateBoothInfo {
	if x != nil {
		return x.ScUpdateBoothInfo
	}
	return nil
}

func (x *Message) GetCsEnterScene() *CS_EnterScene {
	if x != nil {
		return x.CsEnterScene
	}
	return nil
}

func (x *Message) GetScEnterScene() *SC_EnterScene {
	if x != nil {
		return x.ScEnterScene
	}
	return nil
}

func (x *Message) GetCsReadyEnterScene() *CS_ReadyEnterScene {
	if x != nil {
		return x.CsReadyEnterScene
	}
	return nil
}

func (x *Message) GetCsGetGameSpaceInfo() *CS_GetGameSpaceInfo {
	if x != nil {
		return x.CsGetGameSpaceInfo
	}
	return nil
}

func (x *Message) GetScGetGameSpaceInfo() *SC_GetGameSpaceInfo {
	if x != nil {
		return x.ScGetGameSpaceInfo
	}
	return nil
}

func (x *Message) GetCsExitScene() *CS_ExitScene {
	if x != nil {
		return x.CsExitScene
	}
	return nil
}

func (x *Message) GetScExitScene() *SC_ExitScene {
	if x != nil {
		return x.ScExitScene
	}
	return nil
}

func (x *Message) GetScEnterSceneNotify() *SC_EnterSceneNotify {
	if x != nil {
		return x.ScEnterSceneNotify
	}
	return nil
}

func (x *Message) GetScExitSceneNotify() *SC_ExitSceneNotify {
	if x != nil {
		return x.ScExitSceneNotify
	}
	return nil
}

func (x *Message) GetCsPlayerMove() *CS_PlayerMove {
	if x != nil {
		return x.CsPlayerMove
	}
	return nil
}

func (x *Message) GetCsPlayerAction() *CS_PlayerAction {
	if x != nil {
		return x.CsPlayerAction
	}
	return nil
}

func (x *Message) GetScPlayerMoveNotify() *SC_PlayerMoveNotify {
	if x != nil {
		return x.ScPlayerMoveNotify
	}
	return nil
}

func (x *Message) GetScPlayerActionNotify() *SC_PlayerActionNotify {
	if x != nil {
		return x.ScPlayerActionNotify
	}
	return nil
}

func (x *Message) GetScChangePlayerInfoNotify() *SC_ChangePlayerInfoNotify {
	if x != nil {
		return x.ScChangePlayerInfoNotify
	}
	return nil
}

func (x *Message) GetCsPlayerFloor() *CS_PlayerFloor {
	if x != nil {
		return x.CsPlayerFloor
	}
	return nil
}

func (x *Message) GetCsChat() *CS_Chat {
	if x != nil {
		return x.CsChat
	}
	return nil
}

func (x *Message) GetScChat() *SC_Chat {
	if x != nil {
		return x.ScChat
	}
	return nil
}

func (x *Message) GetScCreateCoin() *SC_CreateCoin {
	if x != nil {
		return x.ScCreateCoin
	}
	return nil
}

func (x *Message) GetCsPickupCoin() *CS_PickupCoin {
	if x != nil {
		return x.CsPickupCoin
	}
	return nil
}

func (x *Message) GetScPickupCoin() *SC_PickupCoin {
	if x != nil {
		return x.ScPickupCoin
	}
	return nil
}

func (x *Message) GetScPickupCoinNotify() *SC_PickupCoinNotify {
	if x != nil {
		return x.ScPickupCoinNotify
	}
	return nil
}

func (x *Message) GetScLineupNotify() *SC_LineupNotify {
	if x != nil {
		return x.ScLineupNotify
	}
	return nil
}

func (x *Message) GetCsCancelLineUp() *CS_CancelLineUp {
	if x != nil {
		return x.CsCancelLineUp
	}
	return nil
}

func (x *Message) GetCsLikeBooth() *CS_LikeBooth {
	if x != nil {
		return x.CsLikeBooth
	}
	return nil
}

func (x *Message) GetScLikeBooth() *SC_LikeBooth {
	if x != nil {
		return x.ScLikeBooth
	}
	return nil
}

func (x *Message) GetScReadyPersonalSpace() *SC_ReadyPersonalSpace {
	if x != nil {
		return x.ScReadyPersonalSpace
	}
	return nil
}

func (x *Message) GetCsEnterPersonalSpace() *CS_EnterPersonalSpace {
	if x != nil {
		return x.CsEnterPersonalSpace
	}
	return nil
}

func (x *Message) GetScEnterPersonalSpace() *SC_EnterPersonalSpace {
	if x != nil {
		return x.ScEnterPersonalSpace
	}
	return nil
}

func (x *Message) GetCsPersonalSpaceList() *CS_PersonalSpaceList {
	if x != nil {
		return x.CsPersonalSpaceList
	}
	return nil
}

func (x *Message) GetScPersonalSpaceList() *SC_PersonalSpaceList {
	if x != nil {
		return x.ScPersonalSpaceList
	}
	return nil
}

func (x *Message) GetCsUpdatePersonalSpaceTV() *CS_UpdatePersonalSpaceTV {
	if x != nil {
		return x.CsUpdatePersonalSpaceTV
	}
	return nil
}

func (x *Message) GetScUpdatePersonalSpaceTV() *SC_UpdatePersonalSpaceTV {
	if x != nil {
		return x.ScUpdatePersonalSpaceTV
	}
	return nil
}

func (x *Message) GetScChangePersonalSpaceNotify() *SC_ChangePersonalSpaceNotify {
	if x != nil {
		return x.ScChangePersonalSpaceNotify
	}
	return nil
}

func (x *Message) GetScReadyEnterMVBSpace() *SC_ReadyEnterMVBSpace {
	if x != nil {
		return x.ScReadyEnterMVBSpace
	}
	return nil
}

func (x *Message) GetCsEnterMVBSpace() *CS_EnterMVBSpace {
	if x != nil {
		return x.CsEnterMVBSpace
	}
	return nil
}

func (x *Message) GetScEnterMVBSpace() *SC_EnterMVBSpace {
	if x != nil {
		return x.ScEnterMVBSpace
	}
	return nil
}

func (x *Message) GetCsChristmasGift() *CS_ChristmasGift {
	if x != nil {
		return x.CsChristmasGift
	}
	return nil
}

func (x *Message) GetScChristmasGift() *SC_ChristmasGift {
	if x != nil {
		return x.ScChristmasGift
	}
	return nil
}

func (x *Message) GetCsMVBBoothCall() *CS_MVBBoothCall {
	if x != nil {
		return x.CsMVBBoothCall
	}
	return nil
}

func (x *Message) GetScMVBCallInfoNotify() *SC_MVBCallInfoNotify {
	if x != nil {
		return x.ScMVBCallInfoNotify
	}
	return nil
}

func (x *Message) GetScMVBCreateBox() *SC_MVBCreateBox {
	if x != nil {
		return x.ScMVBCreateBox
	}
	return nil
}

func (x *Message) GetCsMVBPickupBox() *CS_MVBPickupBox {
	if x != nil {
		return x.CsMVBPickupBox
	}
	return nil
}

func (x *Message) GetScMVBPickupBox() *SC_MVBPickupBox {
	if x != nil {
		return x.ScMVBPickupBox
	}
	return nil
}

func (x *Message) GetScMVBPickupBoxNotify() *SC_MVBPickupBoxNotify {
	if x != nil {
		return x.ScMVBPickupBoxNotify
	}
	return nil
}

func (x *Message) GetCsMVBProjectDataRefresh() *CS_MVBProjectDataRefresh {
	if x != nil {
		return x.CsMVBProjectDataRefresh
	}
	return nil
}

func (x *Message) GetScMVBProjectDataRefresh() *SC_MVBProjectDataRefresh {
	if x != nil {
		return x.ScMVBProjectDataRefresh
	}
	return nil
}

func (x *Message) GetCsHeartBeat() *CS_HeartBeat {
	if x != nil {
		return x.CsHeartBeat
	}
	return nil
}

func (x *Message) GetScHeartBeat() *SC_HeartBeat {
	if x != nil {
		return x.ScHeartBeat
	}
	return nil
}

func (x *Message) GetCsServiceLines() *CS_ServiceLines {
	if x != nil {
		return x.CsServiceLines
	}
	return nil
}

func (x *Message) GetScServiceLines() *SC_ServiceLines {
	if x != nil {
		return x.ScServiceLines
	}
	return nil
}

func (x *Message) GetCsReadyChangeLine() *CS_ReadyChangeLine {
	if x != nil {
		return x.CsReadyChangeLine
	}
	return nil
}

func (x *Message) GetScReadyChangeLine() *SC_ReadyChangeLine {
	if x != nil {
		return x.ScReadyChangeLine
	}
	return nil
}

func (x *Message) GetScLiveBoradcast() *SC_LiveBoradcast {
	if x != nil {
		return x.ScLiveBoradcast
	}
	return nil
}

func (x *Message) GetScStartRollingLottery() *SC_StartRollingLottery {
	if x != nil {
		return x.ScStartRollingLottery
	}
	return nil
}

func (x *Message) GetCsRefreshToken() *CS_RefreshToken {
	if x != nil {
		return x.CsRefreshToken
	}
	return nil
}

func (x *Message) GetScRefreshToken() *SC_RefreshToken {
	if x != nil {
		return x.ScRefreshToken
	}
	return nil
}

func (x *Message) GetScLiveBroadcastBanner() *SC_LiveBroadcastBanner {
	if x != nil {
		return x.ScLiveBroadcastBanner
	}
	return nil
}

func (x *Message) GetScChatBan() *SC_ChatBan {
	if x != nil {
		return x.ScChatBan
	}
	return nil
}

func (x *Message) GetScReadyBlockheadGameSapce() *SC_ReadyBlockheadGameSapce {
	if x != nil {
		return x.ScReadyBlockheadGameSapce
	}
	return nil
}

func (x *Message) GetCsEnterBlockheadGameSpace() *CS_EnterBlockheadGameSpace {
	if x != nil {
		return x.CsEnterBlockheadGameSpace
	}
	return nil
}

func (x *Message) GetScEnterBlockheadGameSpace() *SC_EnterBlockheadGameSpace {
	if x != nil {
		return x.ScEnterBlockheadGameSpace
	}
	return nil
}

func (x *Message) GetScStartBlockheadGame() *SC_StartBlockheadGame {
	if x != nil {
		return x.ScStartBlockheadGame
	}
	return nil
}

func (x *Message) GetScBlockheadGameKillNotify() *SC_BlockheadGameKillNotify {
	if x != nil {
		return x.ScBlockheadGameKillNotify
	}
	return nil
}

func (x *Message) GetScBlockheadGameVictoryNotify() *SC_BlockheadGameVictoryNotify {
	if x != nil {
		return x.ScBlockheadGameVictoryNotify
	}
	return nil
}

func (x *Message) GetScReadyEnterAMASpace() *SC_ReadyEnterAMASpace {
	if x != nil {
		return x.ScReadyEnterAMASpace
	}
	return nil
}

func (x *Message) GetCsEnterAMASpace() *CS_EnterAMASpace {
	if x != nil {
		return x.CsEnterAMASpace
	}
	return nil
}

func (x *Message) GetScEnterAMASpace() *SC_EnterAMASpace {
	if x != nil {
		return x.ScEnterAMASpace
	}
	return nil
}

func (x *Message) GetScAMANotifyMemberEnter() *SC_AMANotifyMemberEnter {
	if x != nil {
		return x.ScAMANotifyMemberEnter
	}
	return nil
}

func (x *Message) GetScAMANotifyMemberExit() *SC_AMANotifyMemberExit {
	if x != nil {
		return x.ScAMANotifyMemberExit
	}
	return nil
}

func (x *Message) GetCsAMAMCState() *CS_AMAMCState {
	if x != nil {
		return x.CsAMAMCState
	}
	return nil
}

func (x *Message) GetScAMAMCState() *SC_AMAMCState {
	if x != nil {
		return x.ScAMAMCState
	}
	return nil
}

func (x *Message) GetCsAMAInviteSpeak() *CS_AMAInviteSpeak {
	if x != nil {
		return x.CsAMAInviteSpeak
	}
	return nil
}

func (x *Message) GetScAMAInviteSpeak() *SC_AMAInviteSpeak {
	if x != nil {
		return x.ScAMAInviteSpeak
	}
	return nil
}

func (x *Message) GetCsAMAInviteSpeakResponse() *CS_AMAInviteSpeakResponse {
	if x != nil {
		return x.CsAMAInviteSpeakResponse
	}
	return nil
}

func (x *Message) GetScAMAInviteSpeakResponse() *SC_AMAInviteSpeakResponse {
	if x != nil {
		return x.ScAMAInviteSpeakResponse
	}
	return nil
}

func (x *Message) GetCsAMAKick() *CS_AMAKick {
	if x != nil {
		return x.CsAMAKick
	}
	return nil
}

func (x *Message) GetScAMAKick() *SC_AMAKick {
	if x != nil {
		return x.ScAMAKick
	}
	return nil
}

func (x *Message) GetCsAMASpeakRequest() *CS_AMASpeakRequest {
	if x != nil {
		return x.CsAMASpeakRequest
	}
	return nil
}

func (x *Message) GetCsAMASpeakRequestResponse() *CS_AMASpeakRequestResponse {
	if x != nil {
		return x.CsAMASpeakRequestResponse
	}
	return nil
}

func (x *Message) GetScAMASpeakRequestResponse() *SC_AMASpeakRequestResponse {
	if x != nil {
		return x.ScAMASpeakRequestResponse
	}
	return nil
}

func (x *Message) GetCsAMANewListenerEnter() *CS_AMANewListenerEnter {
	if x != nil {
		return x.CsAMANewListenerEnter
	}
	return nil
}

func (x *Message) GetScAMANewListenerEnter() *SC_AMANewListenerEnter {
	if x != nil {
		return x.ScAMANewListenerEnter
	}
	return nil
}

func (x *Message) GetScAMANewBroadcastEnter() *SC_AMANewBroadcastEnter {
	if x != nil {
		return x.ScAMANewBroadcastEnter
	}
	return nil
}

func (x *Message) GetScAMASpeakRequestNotify() *SC_AMASpeakRequestNotify {
	if x != nil {
		return x.ScAMASpeakRequestNotify
	}
	return nil
}

func (x *Message) GetScAMAMasterChangeNotify() *SC_AMAMasterChangeNotify {
	if x != nil {
		return x.ScAMAMasterChangeNotify
	}
	return nil
}

func (x *Message) GetCsAMACancelHandsup() *CS_AMACancelHandsup {
	if x != nil {
		return x.CsAMACancelHandsup
	}
	return nil
}

func (x *Message) GetScAMACancelHandsup() *SC_AMACancelHandsup {
	if x != nil {
		return x.ScAMACancelHandsup
	}
	return nil
}

func (x *Message) GetCsFollowerList() *CS_FollowerList {
	if x != nil {
		return x.CsFollowerList
	}
	return nil
}

func (x *Message) GetScFollowerList() *SC_FollowerList {
	if x != nil {
		return x.ScFollowerList
	}
	return nil
}

func (x *Message) GetCsFollowingList() *CS_FollowingList {
	if x != nil {
		return x.CsFollowingList
	}
	return nil
}

func (x *Message) GetScFollowingList() *SC_FollowingList {
	if x != nil {
		return x.ScFollowingList
	}
	return nil
}

func (x *Message) GetCsUpdateFollow() *CS_UpdateFollow {
	if x != nil {
		return x.CsUpdateFollow
	}
	return nil
}

func (x *Message) GetScUpdateFollow() *SC_UpdateFollow {
	if x != nil {
		return x.ScUpdateFollow
	}
	return nil
}

func (x *Message) GetCsGetFollowInfo() *CS_GetFollowInfo {
	if x != nil {
		return x.CsGetFollowInfo
	}
	return nil
}

func (x *Message) GetScGetFollowInfo() *SC_GetFollowInfo {
	if x != nil {
		return x.ScGetFollowInfo
	}
	return nil
}

func (x *Message) GetScUserStatusChangeNotify() *SC_UserStatusChangeNotify {
	if x != nil {
		return x.ScUserStatusChangeNotify
	}
	return nil
}

func (x *Message) GetCsGetUserInfo() *CS_GetUserInfo {
	if x != nil {
		return x.CsGetUserInfo
	}
	return nil
}

func (x *Message) GetScGetUserInfo() *SC_GetUserInfo {
	if x != nil {
		return x.ScGetUserInfo
	}
	return nil
}

func (x *Message) GetCsOtherPlayers() *CS_OtherPlayers {
	if x != nil {
		return x.CsOtherPlayers
	}
	return nil
}

func (x *Message) GetScOtherPlayers() *SC_OtherPlayers {
	if x != nil {
		return x.ScOtherPlayers
	}
	return nil
}

func (x *Message) GetScReadyEnterIsland() *SC_ReadyEnterIsland {
	if x != nil {
		return x.ScReadyEnterIsland
	}
	return nil
}

func (x *Message) GetCsEnterIsland() *CS_EnterIsland {
	if x != nil {
		return x.CsEnterIsland
	}
	return nil
}

func (x *Message) GetScEnterIsland() *SC_EnterIsland {
	if x != nil {
		return x.ScEnterIsland
	}
	return nil
}

var File_Message_proto protoreflect.FileDescriptor

var file_Message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x04, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x07,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x7a, 0x22, 0x3c, 0x0a, 0x0e, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x67, 0x75, 0x69, 0x64, 0x22,
	0x85, 0x01, 0x0a, 0x11, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x49,
	0x6d, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x68,
	0x61, 0x69, 0x72, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x61, 0x74, 0x49, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x61, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x49, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x64,
	0x79, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x64,
	0x79, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x42, 0x6f, 0x64, 0x79, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x65,
	0x73, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x65,
	0x73, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x67, 0x49, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x64, 0x6f, 0x67, 0x49, 0x64, 0x73, 0x22, 0xb6, 0x01, 0x0a,
	0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x61,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x64,
	0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42,
	0x6f, 0x64, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x65, 0x73, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x65, 0x73, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x6f, 0x67, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x64, 0x6f, 0x67, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x78, 0x52, 0x03, 0x73, 0x65, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x87, 0x01, 0x0a, 0x09, 0x53, 0x79, 0x6e, 0x63, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6f,
	0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6f,
	0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8f,
	0x04, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x53, 0x68,
	0x6f, 0x77, 0x4d, 0x6f, 0x68, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x68, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x68, 0x65,
	0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x68, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42,
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x12, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x62, 0x74, 0x6e, 0x5f, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x74, 0x6e, 0x42, 0x67, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x74, 0x6e,
	0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x74, 0x6e, 0x46, 0x6f, 0x6e, 0x74, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x67, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x69, 0x6b, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x69, 0x6b, 0x65,
	0x22, 0xdc, 0x01, 0x0a, 0x10, 0x4d, 0x56, 0x42, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x43, 0x61, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x6d, 0x61, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x61, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x72,
	0x69, 0x6e, 0x6b, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x6b, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x81, 0x02, 0x0a, 0x0c, 0x4d, 0x56, 0x42, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x49, 0x6d, 0x67, 0x55,
	0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f,
	0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x4d, 0x56, 0x42, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x43, 0x61,
	0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x0e, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xb4, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x33, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfe, 0x02, 0x0a, 0x0e, 0x4d, 0x56, 0x42, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x70, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x70, 0x55, 0x72, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x69, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x43, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a,
	0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x72, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x6f, 0x61, 0x64, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x22, 0xbe, 0x01, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x6f,
	0x70, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x6f, 0x70,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x72, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x72, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x41, 0x4d, 0x41,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x22,
	0xc1, 0x01, 0x0a, 0x0f, 0x53, 0x4e, 0x53, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x5f,
	0x69, 0x6d, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x49,
	0x6d, 0x67, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x0a, 0x4d, 0x56, 0x42, 0x42, 0x6f, 0x78, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x18, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x68, 0x65, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x31, 0x0a, 0x07,
	0x53, 0x43, 0x5f, 0x54, 0x69, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x20, 0x0a, 0x0a, 0x53, 0x43, 0x5f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x20, 0x0a, 0x08, 0x43, 0x53, 0x5f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xa3, 0x02, 0x0a, 0x08, 0x53, 0x43, 0x5f, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3b, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa9, 0x01, 0x0a, 0x14, 0x43, 0x53,
	0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x6c, 0x79, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x6c, 0x79,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e,
	0x53, 0x65, 0x78, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x45, 0x0a, 0x14, 0x53, 0x43, 0x5f, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x2d, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x28, 0x0a, 0x12,
	0x43, 0x53, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x12, 0x53, 0x43, 0x5f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0d,
	0x62, 0x6f, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e,
	0x42, 0x6f, 0x6f, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d,
	0x62, 0x6f, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8f, 0x01,
	0x0a, 0x0d, 0x43, 0x53, 0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67,
	0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x69, 0x64, 0x12, 0x2e, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x33, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x93, 0x03, 0x0a, 0x0d, 0x53, 0x43, 0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x12, 0x32, 0x0a, 0x09, 0x62, 0x6f, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x6f, 0x74, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x68, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x68, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x61,
	0x6c, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x64, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x42, 0x6f, 0x6f,
	0x74, 0x68, 0x49, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x12, 0x43, 0x53, 0x5f, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x13, 0x43, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x53, 0x43, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x69, 0x64, 0x22, 0x22, 0x0a, 0x0c, 0x43, 0x53, 0x5f, 0x45, 0x78, 0x69, 0x74,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0x3d, 0x0a, 0x0c, 0x53, 0x43, 0x5f,
	0x45, 0x78, 0x69, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x51, 0x0a, 0x13, 0x53, 0x43, 0x5f, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x3a, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x28, 0x0a, 0x12, 0x53,
	0x43, 0x5f, 0x45, 0x78, 0x69, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x43, 0x53, 0x5f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x33, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x22, 0x3d, 0x0a, 0x0f, 0x43, 0x53, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x13, 0x53, 0x43, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d,
	0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x22, 0x43, 0x0a, 0x15, 0x53, 0x43, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x19, 0x53, 0x43, 0x5f, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3b, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x0e,
	0x43, 0x53, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x07, 0x43, 0x53, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x47, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x47, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x6f, 0x47, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x47,
	0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x07, 0x53, 0x43,
	0x5f, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x47, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x47, 0x75, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x6f, 0x47, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x47,
	0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x0a,
	0x0d, 0x53, 0x43, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x29,
	0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0x1f, 0x0a, 0x0d, 0x43, 0x53, 0x5f,
	0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x0d, 0x53, 0x43,
	0x5f, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x70, 0x22, 0x46, 0x0a, 0x13,
	0x53, 0x43, 0x5f, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x50,
	0x69, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x25, 0x0a, 0x0f, 0x53, 0x43, 0x5f, 0x4c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x11, 0x0a, 0x0f, 0x43,
	0x53, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x22, 0x28,
	0x0a, 0x0c, 0x43, 0x53, 0x5f, 0x4c, 0x69, 0x6b, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x62, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x0c, 0x53, 0x43, 0x5f, 0x4c,
	0x69, 0x6b, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x62, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x15, 0x53, 0x43, 0x5f,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x47,
	0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x17,
	0x0a, 0x15, 0x43, 0x53, 0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x59, 0x0a, 0x15, 0x53, 0x43, 0x5f, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x40, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x93, 0x01, 0x0a, 0x14, 0x43, 0x53, 0x5f, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x14, 0x53, 0x43, 0x5f,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5e, 0x0a, 0x18, 0x43, 0x53, 0x5f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x54, 0x56, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x74, 0x76, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x74, 0x76, 0x4f, 0x66, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x49, 0x0a, 0x18, 0x53, 0x43, 0x5f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x54, 0x56, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x67, 0x0a, 0x1c, 0x53, 0x43, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x76, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x76, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x76, 0x5f, 0x6f, 0x66, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x76, 0x4f, 0x66, 0x66, 0x22, 0x7b, 0x0a,
	0x15, 0x53, 0x43, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x56,
	0x42, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6f,
	0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x53,
	0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x56, 0x42, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x99,
	0x04, 0x0a, 0x10, 0x53, 0x43, 0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x56, 0x42, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x62, 0x6f, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x2e, 0x4d, 0x56, 0x42, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x62, 0x6f, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x61, 0x6c,
	0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x37,
	0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x42, 0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e,
	0x4d, 0x56, 0x42, 0x42, 0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x42,
	0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x43, 0x6f,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34,
	0x0a, 0x15, 0x67, 0x69, 0x66, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x67,
	0x69, 0x66, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x67, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x67, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x69, 0x66, 0x74, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x69, 0x66,
	0x74, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15,
	0x63, 0x61, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x61, 0x6c,
	0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63,
	0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x45,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x53,
	0x5f, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6d, 0x61, 0x73, 0x47, 0x69, 0x66, 0x74, 0x22, 0x9b,
	0x01, 0x0a, 0x10, 0x53, 0x43, 0x5f, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6d, 0x61, 0x73, 0x47,
	0x69, 0x66, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x66, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x66, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x66, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6e, 0x66, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x2c, 0x0a, 0x0f,
	0x43, 0x53, 0x5f, 0x4d, 0x56, 0x42, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x14, 0x53, 0x43,
	0x5f, 0x4d, 0x56, 0x42, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x4d, 0x56, 0x42,
	0x42, 0x6f, 0x6f, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63,
	0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3c, 0x0a, 0x0f, 0x53, 0x43, 0x5f, 0x4d, 0x56,
	0x42, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x78, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x6f,
	0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x2e, 0x4d, 0x56, 0x42, 0x42, 0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x62, 0x6f, 0x78, 0x73, 0x22, 0x21, 0x0a, 0x0f, 0x43, 0x53, 0x5f, 0x4d, 0x56, 0x42, 0x50,
	0x69, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x6f, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x0f, 0x53, 0x43, 0x5f, 0x4d,
	0x56, 0x42, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x6f, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x70, 0x22, 0x48, 0x0a, 0x15,
	0x53, 0x43, 0x5f, 0x4d, 0x56, 0x42, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x6f, 0x78, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x2e, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x30, 0x0a, 0x18, 0x43, 0x53, 0x5f, 0x4d, 0x56, 0x42,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0x61, 0x0a, 0x18, 0x53, 0x43, 0x5f, 0x4d,
	0x56, 0x42, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x4d, 0x56, 0x42, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x0e, 0x0a, 0x0c, 0x43,
	0x53, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x53,
	0x43, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x43,
	0x53, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x60,
	0x0a, 0x0f, 0x53, 0x43, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x22, 0x5c, 0x0a, 0x12, 0x43, 0x53, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x33, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59,
	0x0a, 0x12, 0x53, 0x43, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7f, 0x0a, 0x10, 0x53, 0x43, 0x5f,
	0x4c, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x72, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x6f, 0x72, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6c, 0x69,
	0x76, 0x65, 0x42, 0x6f, 0x72, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x50, 0x0a, 0x16, 0x53, 0x43,
	0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x2e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x11, 0x0a, 0x0f,
	0x43, 0x53, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x45, 0x0a, 0x0f, 0x53, 0x43, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6e, 0x0a, 0x16, 0x53, 0x43, 0x5f, 0x4c, 0x69, 0x76,
	0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x0a, 0x53, 0x43, 0x5f, 0x43, 0x68, 0x61,
	0x74, 0x42, 0x61, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x1a, 0x53, 0x43, 0x5f, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x61, 0x70, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x33, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x43,
	0x53, 0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x61, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x5e, 0x0a, 0x1a, 0x53, 0x43, 0x5f,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x61, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x69, 0x0a, 0x15, 0x53, 0x43, 0x5f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x61, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x1a, 0x53, 0x43, 0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x68, 0x65, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47,
	0x75, 0x69, 0x64, 0x73, 0x22, 0x5a, 0x0a, 0x1d, 0x53, 0x43, 0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x68, 0x65, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x69,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x22, 0x32, 0x0a, 0x15, 0x53, 0x43, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x41, 0x4d, 0x41, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x53, 0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x41, 0x4d, 0x41, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x10, 0x53, 0x43, 0x5f,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x4d, 0x41, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x45, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x2e, 0x41, 0x4d, 0x41, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x5a, 0x0a, 0x17, 0x53, 0x43, 0x5f, 0x41, 0x4d,
	0x41, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x2e, 0x41, 0x4d, 0x41, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x30, 0x0a, 0x16, 0x53, 0x43, 0x5f, 0x41, 0x4d, 0x41, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x78, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x0d, 0x43, 0x53, 0x5f, 0x41, 0x4d, 0x41, 0x4d,
	0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x5b, 0x0a, 0x0d, 0x53, 0x43, 0x5f, 0x41, 0x4d, 0x41, 0x4d, 0x43,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x2b, 0x0a, 0x11, 0x43, 0x53, 0x5f, 0x41, 0x4d, 0x41, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x13,
	0x0a, 0x11, 0x53, 0x43, 0x5f, 0x41, 0x4d, 0x41, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x22, 0x31, 0x0a, 0x19, 0x43, 0x53, 0x5f, 0x41, 0x4d, 0x41, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x61, 0x67, 0x72, 0x65, 0x65, 0x22, 0x49, 0x0a, 0x19, 0x53, 0x43, 0x5f, 0x41, 0x4d, 0x41,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x24, 0x0a, 0x0a, 0x43, 0x53, 0x5f, 0x41, 0x4d, 0x41, 0x4b, 0x69, 0x63, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x0c, 0x0a, 0x0a, 0x53, 0x43, 0x5f, 0x41, 0x4d,
	0x41, 0x4b, 0x69, 0x63, 0x6b, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x53, 0x5f, 0x41, 0x4d, 0x41, 0x53,
	0x70, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x1a, 0x43,
	0x53, 0x5f, 0x41, 0x4d, 0x41, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x1a, 0x53, 0x43, 0x5f,
	0x41, 0x4d, 0x41, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x16, 0x43, 0x53, 0x5f, 0x41, 0x4d,
	0x41, 0x4e, 0x65, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x16, 0x53, 0x43, 0x5f,
	0x41, 0x4d, 0x41, 0x4e, 0x65, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x17, 0x53, 0x43, 0x5f,
	0x41, 0x4d, 0x41, 0x4e, 0x65, 0x77, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x18,
	0x53, 0x43, 0x5f, 0x41, 0x4d, 0x41, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x22, 0x38, 0x0a, 0x18, 0x53, 0x43, 0x5f, 0x41, 0x4d, 0x41, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x65, 0x77, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x22, 0x15, 0x0a, 0x13,
	0x43, 0x53, 0x5f, 0x41, 0x4d, 0x41, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x75, 0x70, 0x22, 0x2d, 0x0a, 0x13, 0x53, 0x43, 0x5f, 0x41, 0x4d, 0x41, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x58, 0x0a, 0x0f, 0x43, 0x53, 0x5f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x86, 0x01, 0x0a,
	0x0f, 0x53, 0x43, 0x5f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x4e, 0x53, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x59, 0x0a, 0x10, 0x43, 0x53, 0x5f, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x87, 0x01, 0x0a, 0x10, 0x53, 0x43, 0x5f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e,
	0x53, 0x4e, 0x53, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4d, 0x0a, 0x0f, 0x43, 0x53,
	0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x0f, 0x53, 0x43,
	0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x36, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e,
	0x53, 0x4e, 0x53, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x0a, 0x10, 0x43, 0x53, 0x5f,
	0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x10, 0x53, 0x43, 0x5f, 0x47, 0x65,
	0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69,
	0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x19, 0x53, 0x43, 0x5f, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x2b, 0x0a, 0x0e, 0x43, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x42,
	0x0a, 0x0e, 0x53, 0x43, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x30, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x4e, 0x53, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x22, 0x2b, 0x0a, 0x0f, 0x43, 0x53, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22,
	0x8c, 0x01, 0x0a, 0x0f, 0x53, 0x43, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x43, 0x6f,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x30,
	0x0a, 0x13, 0x53, 0x43, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64,
	0x22, 0x10, 0x0a, 0x0e, 0x43, 0x53, 0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x22, 0x98, 0x02, 0x0a, 0x0e, 0x53, 0x43, 0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x4d,
	0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x41, 0x4d, 0x41, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x98, 0x43,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x63, 0x54, 0x69, 0x70, 0x73, 0x18, 0x9b, 0x4e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f,
	0x54, 0x69, 0x70, 0x73, 0x52, 0x06, 0x73, 0x63, 0x54, 0x69, 0x70, 0x73, 0x12, 0x34, 0x0a, 0x09,
	0x73, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x9c, 0x4e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x73, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0xcd, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x2e, 0x43, 0x53, 0x5f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x63, 0x73, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x63, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0xf5, 0x4e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x2e, 0x53, 0x43, 0x5f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x73, 0x63, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x52, 0x0a, 0x13, 0x63, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0xce, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x52, 0x13, 0x63, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x52, 0x0a, 0x13, 0x73, 0x63, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0xf6, 0x4e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x2e, 0x53, 0x43, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x13, 0x73, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0xbc, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x63, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x6f, 0x6f, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x11, 0x73, 0x63, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xe4, 0x4f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x2e, 0x53, 0x43, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x11, 0x73, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f,
	0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0xb1, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x0c, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0xd9, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x0c, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0xbd, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52,
	0x11, 0x63, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x63, 0x73, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xbe, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x47,
	0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x12, 0x63, 0x73, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x12, 0x73, 0x63, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xe6, 0x4f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x12, 0x73, 0x63, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x73, 0x45, 0x78, 0x69, 0x74, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0xb2, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x45, 0x78, 0x69, 0x74, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x52, 0x0b, 0x63, 0x73, 0x45, 0x78, 0x69, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x63, 0x45, 0x78, 0x69, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18,
	0xda, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x45, 0x78, 0x69, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52,
	0x0b, 0x73, 0x63, 0x45, 0x78, 0x69, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x4f, 0x0a, 0x12,
	0x73, 0x63, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x18, 0xdb, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x12, 0x73, 0x63, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x4c, 0x0a,
	0x11, 0x73, 0x63, 0x45, 0x78, 0x69, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x18, 0xdc, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x45, 0x78, 0x69, 0x74, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x11, 0x73, 0x63, 0x45, 0x78, 0x69, 0x74,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x63,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x18, 0xb5, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43,
	0x53, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x0c, 0x63, 0x73,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x73,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb6, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e,
	0x43, 0x53, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x63, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4f, 0x0a, 0x12, 0x73, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0xdf, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x12, 0x73, 0x63,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x55, 0x0a, 0x14, 0x73, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0xe0, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x52, 0x14, 0x73, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x61, 0x0a, 0x18, 0x73, 0x63, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x18, 0xe1, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x18, 0x73, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x73,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0xbf, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43,
	0x53, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x0d, 0x63,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x06,
	0x63, 0x73, 0x43, 0x68, 0x61, 0x74, 0x18, 0x95, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x06, 0x63, 0x73, 0x43, 0x68, 0x61, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x63, 0x43,
	0x68, 0x61, 0x74, 0x18, 0xbd, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x52, 0x06,
	0x73, 0x63, 0x43, 0x68, 0x61, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x63, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0xa1, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0c, 0x73, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0xfa, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x50, 0x69, 0x63, 0x6b,
	0x75, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0c, 0x63, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x63, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70,
	0x43, 0x6f, 0x69, 0x6e, 0x18, 0xa2, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x50, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0c, 0x73, 0x63, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x43,
	0x6f, 0x69, 0x6e, 0x12, 0x4f, 0x0a, 0x12, 0x73, 0x63, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x43,
	0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0xa3, 0x51, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f,
	0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x12, 0x73, 0x63, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x85, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x4c, 0x69, 0x6e,
	0x65, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0e, 0x73, 0x63, 0x4c, 0x69, 0x6e,
	0x65, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x73, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x18, 0xde, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43,
	0x53, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x52, 0x0e,
	0x63, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x12, 0x3a,
	0x0a, 0x0b, 0x63, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x18, 0xc1, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x2e, 0x43, 0x53, 0x5f, 0x4c, 0x69, 0x6b, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x52, 0x0b, 0x63,
	0x73, 0x4c, 0x69, 0x6b, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x63,
	0x4c, 0x69, 0x6b, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x18, 0xe9, 0x52, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f,
	0x4c, 0x69, 0x6b, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x52, 0x0b, 0x73, 0x63, 0x4c, 0x69, 0x6b,
	0x65, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x12, 0x55, 0x0a, 0x14, 0x73, 0x63, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0xcd,
	0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x2e, 0x53, 0x43, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x14, 0x73, 0x63, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x55, 0x0a,
	0x14, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0xa6, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x14,
	0x63, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0xce, 0x53, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e,
	0x53, 0x43, 0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x14, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x63,
	0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0xa7, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x13, 0x63, 0x73, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x52, 0x0a, 0x13, 0x73, 0x63, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xcf, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x13,
	0x73, 0x63, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x17, 0x63, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x56, 0x18, 0xa8,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x2e, 0x43, 0x53, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x56, 0x52, 0x17, 0x63, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x54, 0x56, 0x12, 0x5e, 0x0a, 0x17, 0x73, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x56, 0x18, 0xd0,
	0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x2e, 0x53, 0x43, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x56, 0x52, 0x17, 0x73, 0x63, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x54, 0x56, 0x12, 0x6a, 0x0a, 0x1b, 0x73, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x18, 0xd1, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x52, 0x1b, 0x73, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x55, 0x0a, 0x14, 0x73, 0x63, 0x52, 0x65, 0x61, 0x64, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d,
	0x56, 0x42, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0xb1, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x56, 0x42, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x14, 0x73, 0x63, 0x52, 0x65, 0x61, 0x64, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x56,
	0x42, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x4d, 0x56, 0x42, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x8a, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x56, 0x42, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0f, 0x63,
	0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x56, 0x42, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x46,
	0x0a, 0x0f, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x56, 0x42, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x18, 0xb2, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x56, 0x42,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0f, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x56,
	0x42, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x73, 0x43, 0x68, 0x72, 0x69,
	0x73, 0x74, 0x6d, 0x61, 0x73, 0x47, 0x69, 0x66, 0x74, 0x18, 0x8b, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f,
	0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6d, 0x61, 0x73, 0x47, 0x69, 0x66, 0x74, 0x52, 0x0f, 0x63,
	0x73, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6d, 0x61, 0x73, 0x47, 0x69, 0x66, 0x74, 0x12, 0x46,
	0x0a, 0x0f, 0x73, 0x63, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6d, 0x61, 0x73, 0x47, 0x69, 0x66,
	0x74, 0x18, 0xb3, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6d, 0x61,
	0x73, 0x47, 0x69, 0x66, 0x74, 0x52, 0x0f, 0x73, 0x63, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6d,
	0x61, 0x73, 0x47, 0x69, 0x66, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x73, 0x4d, 0x56, 0x42, 0x42,
	0x6f, 0x6f, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x18, 0x8c, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x4d,
	0x56, 0x42, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x0e, 0x63, 0x73, 0x4d,
	0x56, 0x42, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x52, 0x0a, 0x13, 0x73,
	0x63, 0x4d, 0x56, 0x42, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x18, 0xb5, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x4d, 0x56, 0x42, 0x43, 0x61, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x13, 0x73, 0x63, 0x4d, 0x56,
	0x42, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x43, 0x0a, 0x0e, 0x73, 0x63, 0x4d, 0x56, 0x42, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f,
	0x78, 0x18, 0xb6, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x4d, 0x56, 0x42, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x6f, 0x78, 0x52, 0x0e, 0x73, 0x63, 0x4d, 0x56, 0x42, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x6f, 0x78, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x73, 0x4d, 0x56, 0x42, 0x50, 0x69, 0x63,
	0x6b, 0x75, 0x70, 0x42, 0x6f, 0x78, 0x18, 0x8f, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x4d, 0x56, 0x42,
	0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x6f, 0x78, 0x52, 0x0e, 0x63, 0x73, 0x4d, 0x56, 0x42,
	0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x6f, 0x78, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x63, 0x4d,
	0x56, 0x42, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x6f, 0x78, 0x18, 0xb7, 0x54, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53,
	0x43, 0x5f, 0x4d, 0x56, 0x42, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x6f, 0x78, 0x52, 0x0e,
	0x73, 0x63, 0x4d, 0x56, 0x42, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x6f, 0x78, 0x12, 0x55,
	0x0a, 0x14, 0x73, 0x63, 0x4d, 0x56, 0x42, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x6f, 0x78,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0xb8, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x4d, 0x56, 0x42,
	0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x6f, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x14, 0x73, 0x63, 0x4d, 0x56, 0x42, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x6f, 0x78, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x5e, 0x0a, 0x17, 0x63, 0x73, 0x4d, 0x56, 0x42, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x18, 0x91, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x4d, 0x56, 0x42, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x17, 0x63, 0x73,
	0x4d, 0x56, 0x42, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x5e, 0x0a, 0x17, 0x73, 0x63, 0x4d, 0x56, 0x42, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x18, 0xb9, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x4d, 0x56, 0x42, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x17, 0x73, 0x63,
	0x4d, 0x56, 0x42, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x73, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x42, 0x65, 0x61, 0x74, 0x18, 0xcc, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x42, 0x65, 0x61, 0x74, 0x52, 0x0b, 0x63, 0x73, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x63, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74,
	0x18, 0xf4, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74,
	0x52, 0x0b, 0x73, 0x63, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x43, 0x0a,
	0x0e, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0xcf, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x52, 0x0e, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x18, 0xf7, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x0e, 0x73, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0xd0, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e,
	0x43, 0x53, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x52, 0x11, 0x63, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x73, 0x63, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0xf8, 0x4e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43,
	0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x52, 0x11, 0x73, 0x63, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x73, 0x63, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x72,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0xa4, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x4c, 0x69, 0x76,
	0x65, 0x42, 0x6f, 0x72, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x0f, 0x73, 0x63, 0x4c, 0x69,
	0x76, 0x65, 0x42, 0x6f, 0x72, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x15, 0x73,
	0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x18, 0xa5, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x15,
	0x73, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x73, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0xfe, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0e, 0x63, 0x73, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x63,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0xa6, 0x51, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e,
	0x53, 0x43, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x0e, 0x73, 0x63, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x58, 0x0a, 0x15, 0x73, 0x63, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0xa7, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x4c,
	0x69, 0x76, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x52, 0x15, 0x73, 0x63, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x63, 0x43,
	0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x18, 0xbe, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x43, 0x68, 0x61,
	0x74, 0x42, 0x61, 0x6e, 0x52, 0x09, 0x73, 0x63, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x12,
	0x64, 0x0a, 0x19, 0x73, 0x63, 0x52, 0x65, 0x61, 0x64, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68,
	0x65, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x61, 0x70, 0x63, 0x65, 0x18, 0x95, 0x55, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e,
	0x53, 0x43, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x61,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x61, 0x70, 0x63, 0x65, 0x52, 0x19, 0x73, 0x63, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x61, 0x70, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x19, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x18, 0xee, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x68, 0x65, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x19, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65,
	0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x19, 0x73,
	0x63, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x61, 0x64, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x96, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x61, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x19, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x55, 0x0a, 0x14, 0x73, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x68, 0x65, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x97, 0x55, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x61, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x14, 0x73, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x68, 0x65, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x19, 0x73, 0x63, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x68, 0x65, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x98, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x68, 0x65, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x19, 0x73, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x61, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x6d,
	0x0a, 0x1c, 0x73, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x61, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x99,
	0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x2e, 0x53, 0x43, 0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x61, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x1c, 0x73, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x55, 0x0a,
	0x14, 0x73, 0x63, 0x52, 0x65, 0x61, 0x64, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x4d, 0x41,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0xf9, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x4d, 0x41, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x14,
	0x73, 0x63, 0x52, 0x65, 0x61, 0x64, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x4d, 0x41, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x41,
	0x4d, 0x41, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0xd2, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x41, 0x4d, 0x41, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0f, 0x63, 0x73, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x41, 0x4d, 0x41, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0f,
	0x73, 0x63, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x4d, 0x41, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18,
	0xfa, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x4d, 0x41, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x0f, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x4d, 0x41, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x16, 0x73, 0x63, 0x41, 0x4d, 0x41, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x18, 0xfb,
	0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x2e, 0x53, 0x43, 0x5f, 0x41, 0x4d, 0x41, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x16, 0x73, 0x63, 0x41, 0x4d, 0x41,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x58, 0x0a, 0x15, 0x73, 0x63, 0x41, 0x4d, 0x41, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x78, 0x69, 0x74, 0x18, 0xfc, 0x55, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43,
	0x5f, 0x41, 0x4d, 0x41, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x45, 0x78, 0x69, 0x74, 0x52, 0x15, 0x73, 0x63, 0x41, 0x4d, 0x41, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x78, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x63,
	0x73, 0x41, 0x4d, 0x41, 0x4d, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd5, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43,
	0x53, 0x5f, 0x41, 0x4d, 0x41, 0x4d, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x73,
	0x41, 0x4d, 0x41, 0x4d, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x63,
	0x41, 0x4d, 0x41, 0x4d, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xfd, 0x55, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43,
	0x5f, 0x41, 0x4d, 0x41, 0x4d, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x63, 0x41,
	0x4d, 0x41, 0x4d, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x63, 0x73, 0x41,
	0x4d, 0x41, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x18, 0xd6, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x2e, 0x43, 0x53, 0x5f, 0x41, 0x4d, 0x41, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65,
	0x61, 0x6b, 0x52, 0x10, 0x63, 0x73, 0x41, 0x4d, 0x41, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53,
	0x70, 0x65, 0x61, 0x6b, 0x12, 0x49, 0x0a, 0x10, 0x73, 0x63, 0x41, 0x4d, 0x41, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x18, 0xfe, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x41,
	0x4d, 0x41, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x10, 0x73,
	0x63, 0x41, 0x4d, 0x41, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x12,
	0x61, 0x0a, 0x18, 0x63, 0x73, 0x41, 0x4d, 0x41, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xde, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43,
	0x53, 0x5f, 0x41, 0x4d, 0x41, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x18, 0x63, 0x73, 0x41, 0x4d, 0x41, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x61, 0x0a, 0x18, 0x73, 0x63, 0x41, 0x4d, 0x41, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x86,
	0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x2e, 0x53, 0x43, 0x5f, 0x41, 0x4d, 0x41, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x18, 0x73, 0x63, 0x41,
	0x4d, 0x41, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x73, 0x41, 0x4d, 0x41, 0x4b, 0x69,
	0x63, 0x6b, 0x18, 0xd9, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x41, 0x4d, 0x41, 0x4b, 0x69, 0x63, 0x6b,
	0x52, 0x09, 0x63, 0x73, 0x41, 0x4d, 0x41, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x09, 0x73,
	0x63, 0x41, 0x4d, 0x41, 0x4b, 0x69, 0x63, 0x6b, 0x18, 0x81, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x41,
	0x4d, 0x41, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x09, 0x73, 0x63, 0x41, 0x4d, 0x41, 0x4b, 0x69, 0x63,
	0x6b, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x73, 0x41, 0x4d, 0x41, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xda, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x41, 0x4d, 0x41,
	0x53, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x63, 0x73,
	0x41, 0x4d, 0x41, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x64, 0x0a, 0x19, 0x63, 0x73, 0x41, 0x4d, 0x41, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xdb, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e,
	0x43, 0x53, 0x5f, 0x41, 0x4d, 0x41, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x19, 0x63, 0x73, 0x41, 0x4d,
	0x41, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x19, 0x73, 0x63, 0x41, 0x4d, 0x41, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x83, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x41, 0x4d, 0x41, 0x53, 0x70, 0x65, 0x61,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x19, 0x73, 0x63, 0x41, 0x4d, 0x41, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x63,
	0x73, 0x41, 0x4d, 0x41, 0x4e, 0x65, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0xdc, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x41, 0x4d, 0x41, 0x4e, 0x65,
	0x77, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x15,
	0x63, 0x73, 0x41, 0x4d, 0x41, 0x4e, 0x65, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x15, 0x73, 0x63, 0x41, 0x4d, 0x41, 0x4e, 0x65,
	0x77, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x84,
	0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x2e, 0x53, 0x43, 0x5f, 0x41, 0x4d, 0x41, 0x4e, 0x65, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x15, 0x73, 0x63, 0x41, 0x4d, 0x41, 0x4e,
	0x65, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x5b, 0x0a, 0x16, 0x73, 0x63, 0x41, 0x4d, 0x41, 0x4e, 0x65, 0x77, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x87, 0x56, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f,
	0x41, 0x4d, 0x41, 0x4e, 0x65, 0x77, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x16, 0x73, 0x63, 0x41, 0x4d, 0x41, 0x4e, 0x65, 0x77, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x17,
	0x73, 0x63, 0x41, 0x4d, 0x41, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x85, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x41, 0x4d,
	0x41, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x17, 0x73, 0x63, 0x41, 0x4d, 0x41, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x5e, 0x0a, 0x17,
	0x73, 0x63, 0x41, 0x4d, 0x41, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x88, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x41, 0x4d,
	0x41, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x17, 0x73, 0x63, 0x41, 0x4d, 0x41, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x4f, 0x0a, 0x12,
	0x63, 0x73, 0x41, 0x4d, 0x41, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x73,
	0x75, 0x70, 0x18, 0xe1, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x41, 0x4d, 0x41, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x75, 0x70, 0x52, 0x12, 0x63, 0x73, 0x41, 0x4d, 0x41,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x75, 0x70, 0x12, 0x4f, 0x0a,
	0x12, 0x73, 0x63, 0x41, 0x4d, 0x41, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x75, 0x70, 0x18, 0x89, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x41, 0x4d, 0x41, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x75, 0x70, 0x52, 0x12, 0x73, 0x63, 0x41, 0x4d,
	0x41, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x75, 0x70, 0x12, 0x43,
	0x0a, 0x0e, 0x63, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0xb5, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x0e, 0x63, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x63, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xdd, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x73, 0x63, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x73, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xb6, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43,
	0x53, 0x5f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x0f, 0x63, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x0f, 0x73, 0x63, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0xde, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x73, 0x63, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0xb7, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53,
	0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x0e, 0x63,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x43, 0x0a,
	0x0e, 0x73, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18,
	0xdf, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x52, 0x0e, 0x73, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x73, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xb8, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x73, 0x47, 0x65, 0x74,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0f, 0x73, 0x63,
	0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xe0, 0x56,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x2e, 0x53, 0x43, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x73, 0x63, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x61, 0x0a, 0x18, 0x73, 0x63, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0xe1,
	0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x2e, 0x53, 0x43, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x18, 0x73, 0x63, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x73, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xba, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63, 0x73, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x63, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xe2, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x63, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x73, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0xd1, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43,
	0x53, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x0e,
	0x63, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x43,
	0x0a, 0x0e, 0x73, 0x63, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0xf9, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x73, 0x63, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x12, 0x73, 0x63, 0x52, 0x65, 0x61, 0x64, 0x79, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x18, 0xc1, 0x57, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x52, 0x12, 0x73, 0x63, 0x52, 0x65, 0x61, 0x64, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x18, 0x9a, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x53, 0x5f, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x0d, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x18, 0xc2, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x43, 0x5f, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x0d, 0x73, 0x63, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2a, 0x32, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x02, 0x2a, 0x27, 0x0a, 0x0c,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x10, 0x01, 0x2a, 0x30, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x01, 0x2a, 0x25, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x2a, 0x19,
	0x0a, 0x03, 0x53, 0x65, 0x78, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x61, 0x6e, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x57, 0x6f, 0x6d, 0x61, 0x6e, 0x10, 0x01, 0x2a, 0x40, 0x0a, 0x0f, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x02, 0x2a, 0x29, 0x0a, 0x12, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x65, 0x6c, 0x66, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x10, 0x01, 0x2a, 0x2b, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x10, 0x01, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f, 0x3b, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Message_proto_rawDescOnce sync.Once
	file_Message_proto_rawDescData = file_Message_proto_rawDesc
)

func file_Message_proto_rawDescGZIP() []byte {
	file_Message_proto_rawDescOnce.Do(func() {
		file_Message_proto_rawDescData = protoimpl.X.CompressGZIP(file_Message_proto_rawDescData)
	})
	return file_Message_proto_rawDescData
}

var file_Message_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_Message_proto_msgTypes = make([]protoimpl.MessageInfo, 132)
var file_Message_proto_goTypes = []interface{}{
	(ServiceStatus)(0),                    // 0: metaverse.ServiceStatus
	(OnlineStatus)(0),                     // 1: metaverse.OnlineStatus
	(NotifyType)(0),                       // 2: metaverse.NotifyType
	(StatusCode)(0),                       // 3: metaverse.StatusCode
	(Sex)(0),                              // 4: metaverse.Sex
	(LoginStatusCode)(0),                  // 5: metaverse.LoginStatusCode
	(PersonalSpaceGroup)(0),               // 6: metaverse.PersonalSpaceGroup
	(ChatBanStatus)(0),                    // 7: metaverse.ChatBanStatus
	(*Line)(nil),                          // 8: metaverse.Line
	(*Vector3)(nil),                       // 9: metaverse.Vector3
	(*PickupItemInfo)(nil),                // 10: metaverse.PickupItemInfo
	(*LotteryPlayerInfo)(nil),             // 11: metaverse.LotteryPlayerInfo
	(*PlayerAssetsInfo)(nil),              // 12: metaverse.PlayerAssetsInfo
	(*PlayerAvatarInfo)(nil),              // 13: metaverse.PlayerAvatarInfo
	(*PlayerBaseInfo)(nil),                // 14: metaverse.PlayerBaseInfo
	(*SyncTrans)(nil),                     // 15: metaverse.SyncTrans
	(*PlayerSceneInfo)(nil),               // 16: metaverse.PlayerSceneInfo
	(*BoothInfo)(nil),                     // 17: metaverse.BoothInfo
	(*MVBBoothCallInfo)(nil),              // 18: metaverse.MVBBoothCallInfo
	(*MVBBoothInfo)(nil),                  // 19: metaverse.MVBBoothInfo
	(*BoothValueInfo)(nil),                // 20: metaverse.BoothValueInfo
	(*CoinInfo)(nil),                      // 21: metaverse.CoinInfo
	(*MVBProjectData)(nil),                // 22: metaverse.MVBProjectData
	(*PersonalSpaceInfo)(nil),             // 23: metaverse.PersonalSpaceInfo
	(*AMASpacePersonalInfo)(nil),          // 24: metaverse.AMASpacePersonalInfo
	(*SNSFollowerInfo)(nil),               // 25: metaverse.SNSFollowerInfo
	(*MVBBoxInfo)(nil),                    // 26: metaverse.MVBBoxInfo
	(*BlockheadGameVictoryInfo)(nil),      // 27: metaverse.BlockheadGameVictoryInfo
	(*SC_Tips)(nil),                       // 28: metaverse.SC_Tips
	(*SC_Version)(nil),                    // 29: metaverse.SC_Version
	(*CS_Login)(nil),                      // 30: metaverse.CS_Login
	(*SC_Login)(nil),                      // 31: metaverse.SC_Login
	(*CS_ChangePlayerInfos)(nil),          // 32: metaverse.CS_ChangePlayerInfos
	(*SC_ChangePlayerInfos)(nil),          // 33: metaverse.SC_ChangePlayerInfos
	(*CS_UpdateBoothInfo)(nil),            // 34: metaverse.CS_UpdateBoothInfo
	(*SC_UpdateBoothInfo)(nil),            // 35: metaverse.SC_UpdateBoothInfo
	(*CS_EnterScene)(nil),                 // 36: metaverse.CS_EnterScene
	(*SC_EnterScene)(nil),                 // 37: metaverse.SC_EnterScene
	(*CS_ReadyEnterScene)(nil),            // 38: metaverse.CS_ReadyEnterScene
	(*CS_GetGameSpaceInfo)(nil),           // 39: metaverse.CS_GetGameSpaceInfo
	(*SC_GetGameSpaceInfo)(nil),           // 40: metaverse.SC_GetGameSpaceInfo
	(*CS_ExitScene)(nil),                  // 41: metaverse.CS_ExitScene
	(*SC_ExitScene)(nil),                  // 42: metaverse.SC_ExitScene
	(*SC_EnterSceneNotify)(nil),           // 43: metaverse.SC_EnterSceneNotify
	(*SC_ExitSceneNotify)(nil),            // 44: metaverse.SC_ExitSceneNotify
	(*CS_PlayerMove)(nil),                 // 45: metaverse.CS_PlayerMove
	(*CS_PlayerAction)(nil),               // 46: metaverse.CS_PlayerAction
	(*SC_PlayerMoveNotify)(nil),           // 47: metaverse.SC_PlayerMoveNotify
	(*SC_PlayerActionNotify)(nil),         // 48: metaverse.SC_PlayerActionNotify
	(*SC_ChangePlayerInfoNotify)(nil),     // 49: metaverse.SC_ChangePlayerInfoNotify
	(*CS_PlayerFloor)(nil),                // 50: metaverse.CS_PlayerFloor
	(*CS_Chat)(nil),                       // 51: metaverse.CS_Chat
	(*SC_Chat)(nil),                       // 52: metaverse.SC_Chat
	(*SC_CreateCoin)(nil),                 // 53: metaverse.SC_CreateCoin
	(*CS_PickupCoin)(nil),                 // 54: metaverse.CS_PickupCoin
	(*SC_PickupCoin)(nil),                 // 55: metaverse.SC_PickupCoin
	(*SC_PickupCoinNotify)(nil),           // 56: metaverse.SC_PickupCoinNotify
	(*SC_LineupNotify)(nil),               // 57: metaverse.SC_LineupNotify
	(*CS_CancelLineUp)(nil),               // 58: metaverse.CS_CancelLineUp
	(*CS_LikeBooth)(nil),                  // 59: metaverse.CS_LikeBooth
	(*SC_LikeBooth)(nil),                  // 60: metaverse.SC_LikeBooth
	(*SC_ReadyPersonalSpace)(nil),         // 61: metaverse.SC_ReadyPersonalSpace
	(*CS_EnterPersonalSpace)(nil),         // 62: metaverse.CS_EnterPersonalSpace
	(*SC_EnterPersonalSpace)(nil),         // 63: metaverse.SC_EnterPersonalSpace
	(*CS_PersonalSpaceList)(nil),          // 64: metaverse.CS_PersonalSpaceList
	(*SC_PersonalSpaceList)(nil),          // 65: metaverse.SC_PersonalSpaceList
	(*CS_UpdatePersonalSpaceTV)(nil),      // 66: metaverse.CS_UpdatePersonalSpaceTV
	(*SC_UpdatePersonalSpaceTV)(nil),      // 67: metaverse.SC_UpdatePersonalSpaceTV
	(*SC_ChangePersonalSpaceNotify)(nil),  // 68: metaverse.SC_ChangePersonalSpaceNotify
	(*SC_ReadyEnterMVBSpace)(nil),         // 69: metaverse.SC_ReadyEnterMVBSpace
	(*CS_EnterMVBSpace)(nil),              // 70: metaverse.CS_EnterMVBSpace
	(*SC_EnterMVBSpace)(nil),              // 71: metaverse.SC_EnterMVBSpace
	(*CS_ChristmasGift)(nil),              // 72: metaverse.CS_ChristmasGift
	(*SC_ChristmasGift)(nil),              // 73: metaverse.SC_ChristmasGift
	(*CS_MVBBoothCall)(nil),               // 74: metaverse.CS_MVBBoothCall
	(*SC_MVBCallInfoNotify)(nil),          // 75: metaverse.SC_MVBCallInfoNotify
	(*SC_MVBCreateBox)(nil),               // 76: metaverse.SC_MVBCreateBox
	(*CS_MVBPickupBox)(nil),               // 77: metaverse.CS_MVBPickupBox
	(*SC_MVBPickupBox)(nil),               // 78: metaverse.SC_MVBPickupBox
	(*SC_MVBPickupBoxNotify)(nil),         // 79: metaverse.SC_MVBPickupBoxNotify
	(*CS_MVBProjectDataRefresh)(nil),      // 80: metaverse.CS_MVBProjectDataRefresh
	(*SC_MVBProjectDataRefresh)(nil),      // 81: metaverse.SC_MVBProjectDataRefresh
	(*CS_HeartBeat)(nil),                  // 82: metaverse.CS_HeartBeat
	(*SC_HeartBeat)(nil),                  // 83: metaverse.SC_HeartBeat
	(*CS_ServiceLines)(nil),               // 84: metaverse.CS_ServiceLines
	(*SC_ServiceLines)(nil),               // 85: metaverse.SC_ServiceLines
	(*CS_ReadyChangeLine)(nil),            // 86: metaverse.CS_ReadyChangeLine
	(*SC_ReadyChangeLine)(nil),            // 87: metaverse.SC_ReadyChangeLine
	(*SC_LiveBoradcast)(nil),              // 88: metaverse.SC_LiveBoradcast
	(*SC_StartRollingLottery)(nil),        // 89: metaverse.SC_StartRollingLottery
	(*CS_RefreshToken)(nil),               // 90: metaverse.CS_RefreshToken
	(*SC_RefreshToken)(nil),               // 91: metaverse.SC_RefreshToken
	(*SC_LiveBroadcastBanner)(nil),        // 92: metaverse.SC_LiveBroadcastBanner
	(*SC_ChatBan)(nil),                    // 93: metaverse.SC_ChatBan
	(*SC_ReadyBlockheadGameSapce)(nil),    // 94: metaverse.SC_ReadyBlockheadGameSapce
	(*CS_EnterBlockheadGameSpace)(nil),    // 95: metaverse.CS_EnterBlockheadGameSpace
	(*SC_EnterBlockheadGameSpace)(nil),    // 96: metaverse.SC_EnterBlockheadGameSpace
	(*SC_StartBlockheadGame)(nil),         // 97: metaverse.SC_StartBlockheadGame
	(*SC_BlockheadGameKillNotify)(nil),    // 98: metaverse.SC_BlockheadGameKillNotify
	(*SC_BlockheadGameVictoryNotify)(nil), // 99: metaverse.SC_BlockheadGameVictoryNotify
	(*SC_ReadyEnterAMASpace)(nil),         // 100: metaverse.SC_ReadyEnterAMASpace
	(*CS_EnterAMASpace)(nil),              // 101: metaverse.CS_EnterAMASpace
	(*SC_EnterAMASpace)(nil),              // 102: metaverse.SC_EnterAMASpace
	(*SC_AMANotifyMemberEnter)(nil),       // 103: metaverse.SC_AMANotifyMemberEnter
	(*SC_AMANotifyMemberExit)(nil),        // 104: metaverse.SC_AMANotifyMemberExit
	(*CS_AMAMCState)(nil),                 // 105: metaverse.CS_AMAMCState
	(*SC_AMAMCState)(nil),                 // 106: metaverse.SC_AMAMCState
	(*CS_AMAInviteSpeak)(nil),             // 107: metaverse.CS_AMAInviteSpeak
	(*SC_AMAInviteSpeak)(nil),             // 108: metaverse.SC_AMAInviteSpeak
	(*CS_AMAInviteSpeakResponse)(nil),     // 109: metaverse.CS_AMAInviteSpeakResponse
	(*SC_AMAInviteSpeakResponse)(nil),     // 110: metaverse.SC_AMAInviteSpeakResponse
	(*CS_AMAKick)(nil),                    // 111: metaverse.CS_AMAKick
	(*SC_AMAKick)(nil),                    // 112: metaverse.SC_AMAKick
	(*CS_AMASpeakRequest)(nil),            // 113: metaverse.CS_AMASpeakRequest
	(*CS_AMASpeakRequestResponse)(nil),    // 114: metaverse.CS_AMASpeakRequestResponse
	(*SC_AMASpeakRequestResponse)(nil),    // 115: metaverse.SC_AMASpeakRequestResponse
	(*CS_AMANewListenerEnter)(nil),        // 116: metaverse.CS_AMANewListenerEnter
	(*SC_AMANewListenerEnter)(nil),        // 117: metaverse.SC_AMANewListenerEnter
	(*SC_AMANewBroadcastEnter)(nil),       // 118: metaverse.SC_AMANewBroadcastEnter
	(*SC_AMASpeakRequestNotify)(nil),      // 119: metaverse.SC_AMASpeakRequestNotify
	(*SC_AMAMasterChangeNotify)(nil),      // 120: metaverse.SC_AMAMasterChangeNotify
	(*CS_AMACancelHandsup)(nil),           // 121: metaverse.CS_AMACancelHandsup
	(*SC_AMACancelHandsup)(nil),           // 122: metaverse.SC_AMACancelHandsup
	(*CS_FollowerList)(nil),               // 123: metaverse.CS_FollowerList
	(*SC_FollowerList)(nil),               // 124: metaverse.SC_FollowerList
	(*CS_FollowingList)(nil),              // 125: metaverse.CS_FollowingList
	(*SC_FollowingList)(nil),              // 126: metaverse.SC_FollowingList
	(*CS_UpdateFollow)(nil),               // 127: metaverse.CS_UpdateFollow
	(*SC_UpdateFollow)(nil),               // 128: metaverse.SC_UpdateFollow
	(*CS_GetFollowInfo)(nil),              // 129: metaverse.CS_GetFollowInfo
	(*SC_GetFollowInfo)(nil),              // 130: metaverse.SC_GetFollowInfo
	(*SC_UserStatusChangeNotify)(nil),     // 131: metaverse.SC_UserStatusChangeNotify
	(*CS_GetUserInfo)(nil),                // 132: metaverse.CS_GetUserInfo
	(*SC_GetUserInfo)(nil),                // 133: metaverse.SC_GetUserInfo
	(*CS_OtherPlayers)(nil),               // 134: metaverse.CS_OtherPlayers
	(*SC_OtherPlayers)(nil),               // 135: metaverse.SC_OtherPlayers
	(*SC_ReadyEnterIsland)(nil),           // 136: metaverse.SC_ReadyEnterIsland
	(*CS_EnterIsland)(nil),                // 137: metaverse.CS_EnterIsland
	(*SC_EnterIsland)(nil),                // 138: metaverse.SC_EnterIsland
	(*Message)(nil),                       // 139: metaverse.Message
}
var file_Message_proto_depIdxs = []int32{
	0,   // 0: metaverse.Line.status:type_name -> metaverse.ServiceStatus
	4,   // 1: metaverse.PlayerBaseInfo.sex:type_name -> metaverse.Sex
	9,   // 2: metaverse.SyncTrans.position:type_name -> metaverse.Vector3
	9,   // 3: metaverse.PlayerSceneInfo.position:type_name -> metaverse.Vector3
	14,  // 4: metaverse.PlayerSceneInfo.baseInfo:type_name -> metaverse.PlayerBaseInfo
	13,  // 5: metaverse.PlayerSceneInfo.avatarInfo:type_name -> metaverse.PlayerAvatarInfo
	18,  // 6: metaverse.MVBBoothInfo.call_info:type_name -> metaverse.MVBBoothCallInfo
	9,   // 7: metaverse.CoinInfo.position:type_name -> metaverse.Vector3
	16,  // 8: metaverse.AMASpacePersonalInfo.scenePlayerInfo:type_name -> metaverse.PlayerSceneInfo
	1,   // 9: metaverse.SNSFollowerInfo.status:type_name -> metaverse.OnlineStatus
	9,   // 10: metaverse.MVBBoxInfo.position:type_name -> metaverse.Vector3
	5,   // 11: metaverse.SC_Login.status:type_name -> metaverse.LoginStatusCode
	14,  // 12: metaverse.SC_Login.baseInfo:type_name -> metaverse.PlayerBaseInfo
	13,  // 13: metaverse.SC_Login.avatarInfo:type_name -> metaverse.PlayerAvatarInfo
	12,  // 14: metaverse.SC_Login.assetsInfo:type_name -> metaverse.PlayerAssetsInfo
	4,   // 15: metaverse.CS_ChangePlayerInfos.sex:type_name -> metaverse.Sex
	13,  // 16: metaverse.CS_ChangePlayerInfos.avatarInfo:type_name -> metaverse.PlayerAvatarInfo
	3,   // 17: metaverse.SC_ChangePlayerInfos.status:type_name -> metaverse.StatusCode
	20,  // 18: metaverse.SC_UpdateBoothInfo.bothValueInfo:type_name -> metaverse.BoothValueInfo
	9,   // 19: metaverse.CS_EnterScene.position:type_name -> metaverse.Vector3
	17,  // 20: metaverse.SC_EnterScene.bothInfos:type_name -> metaverse.BoothInfo
	20,  // 21: metaverse.SC_EnterScene.bothValueInfos:type_name -> metaverse.BoothValueInfo
	16,  // 22: metaverse.SC_EnterScene.allPlayerInfo:type_name -> metaverse.PlayerSceneInfo
	21,  // 23: metaverse.SC_EnterScene.allCoinInfo:type_name -> metaverse.CoinInfo
	3,   // 24: metaverse.SC_ExitScene.status:type_name -> metaverse.StatusCode
	16,  // 25: metaverse.SC_EnterSceneNotify.playerInfo:type_name -> metaverse.PlayerSceneInfo
	9,   // 26: metaverse.CS_PlayerMove.position:type_name -> metaverse.Vector3
	15,  // 27: metaverse.SC_PlayerMoveNotify.playerTrans:type_name -> metaverse.SyncTrans
	14,  // 28: metaverse.SC_ChangePlayerInfoNotify.baseInfo:type_name -> metaverse.PlayerBaseInfo
	13,  // 29: metaverse.SC_ChangePlayerInfoNotify.avatarInfo:type_name -> metaverse.PlayerAvatarInfo
	9,   // 30: metaverse.CS_PlayerFloor.position:type_name -> metaverse.Vector3
	21,  // 31: metaverse.SC_CreateCoin.coins:type_name -> metaverse.CoinInfo
	3,   // 32: metaverse.SC_PickupCoin.status:type_name -> metaverse.StatusCode
	10,  // 33: metaverse.SC_PickupCoinNotify.infos:type_name -> metaverse.PickupItemInfo
	3,   // 34: metaverse.SC_LikeBooth.statusCode:type_name -> metaverse.StatusCode
	16,  // 35: metaverse.SC_EnterPersonalSpace.allPlayerInfo:type_name -> metaverse.PlayerSceneInfo
	6,   // 36: metaverse.CS_PersonalSpaceList.group:type_name -> metaverse.PersonalSpaceGroup
	6,   // 37: metaverse.SC_PersonalSpaceList.group:type_name -> metaverse.PersonalSpaceGroup
	23,  // 38: metaverse.SC_PersonalSpaceList.spaces:type_name -> metaverse.PersonalSpaceInfo
	3,   // 39: metaverse.SC_UpdatePersonalSpaceTV.status:type_name -> metaverse.StatusCode
	9,   // 40: metaverse.SC_ReadyEnterMVBSpace.position:type_name -> metaverse.Vector3
	19,  // 41: metaverse.SC_EnterMVBSpace.bothInfos:type_name -> metaverse.MVBBoothInfo
	16,  // 42: metaverse.SC_EnterMVBSpace.allPlayerInfos:type_name -> metaverse.PlayerSceneInfo
	26,  // 43: metaverse.SC_EnterMVBSpace.allBoxInfos:type_name -> metaverse.MVBBoxInfo
	21,  // 44: metaverse.SC_EnterMVBSpace.allCoinInfo:type_name -> metaverse.CoinInfo
	18,  // 45: metaverse.SC_MVBCallInfoNotify.call_info:type_name -> metaverse.MVBBoothCallInfo
	26,  // 46: metaverse.SC_MVBCreateBox.boxs:type_name -> metaverse.MVBBoxInfo
	3,   // 47: metaverse.SC_MVBPickupBox.status:type_name -> metaverse.StatusCode
	10,  // 48: metaverse.SC_MVBPickupBoxNotify.infos:type_name -> metaverse.PickupItemInfo
	22,  // 49: metaverse.SC_MVBProjectDataRefresh.datas:type_name -> metaverse.MVBProjectData
	8,   // 50: metaverse.SC_ServiceLines.lines:type_name -> metaverse.Line
	9,   // 51: metaverse.CS_ReadyChangeLine.position:type_name -> metaverse.Vector3
	3,   // 52: metaverse.SC_ReadyChangeLine.code:type_name -> metaverse.StatusCode
	11,  // 53: metaverse.SC_StartRollingLottery.players:type_name -> metaverse.LotteryPlayerInfo
	7,   // 54: metaverse.SC_ChatBan.status:type_name -> metaverse.ChatBanStatus
	9,   // 55: metaverse.SC_ReadyBlockheadGameSapce.position:type_name -> metaverse.Vector3
	16,  // 56: metaverse.SC_EnterBlockheadGameSpace.allPlayerInfo:type_name -> metaverse.PlayerSceneInfo
	27,  // 57: metaverse.SC_BlockheadGameVictoryNotify.infos:type_name -> metaverse.BlockheadGameVictoryInfo
	24,  // 58: metaverse.SC_EnterAMASpace.allPlayerInfo:type_name -> metaverse.AMASpacePersonalInfo
	24,  // 59: metaverse.SC_AMANotifyMemberEnter.playerInfo:type_name -> metaverse.AMASpacePersonalInfo
	25,  // 60: metaverse.SC_FollowerList.list:type_name -> metaverse.SNSFollowerInfo
	25,  // 61: metaverse.SC_FollowingList.list:type_name -> metaverse.SNSFollowerInfo
	25,  // 62: metaverse.SC_UpdateFollow.userInfo:type_name -> metaverse.SNSFollowerInfo
	1,   // 63: metaverse.SC_GetFollowInfo.status:type_name -> metaverse.OnlineStatus
	2,   // 64: metaverse.SC_UserStatusChangeNotify.change_type:type_name -> metaverse.NotifyType
	1,   // 65: metaverse.SC_UserStatusChangeNotify.status:type_name -> metaverse.OnlineStatus
	25,  // 66: metaverse.SC_GetUserInfo.users:type_name -> metaverse.SNSFollowerInfo
	16,  // 67: metaverse.SC_OtherPlayers.allPlayerInfos:type_name -> metaverse.PlayerSceneInfo
	21,  // 68: metaverse.SC_OtherPlayers.allCoinInfo:type_name -> metaverse.CoinInfo
	24,  // 69: metaverse.SC_EnterIsland.allPlayerInfo:type_name -> metaverse.AMASpacePersonalInfo
	28,  // 70: metaverse.Message.scTips:type_name -> metaverse.SC_Tips
	29,  // 71: metaverse.Message.scVersion:type_name -> metaverse.SC_Version
	30,  // 72: metaverse.Message.csLogin:type_name -> metaverse.CS_Login
	31,  // 73: metaverse.Message.scLogin:type_name -> metaverse.SC_Login
	32,  // 74: metaverse.Message.csChangePlayerInfos:type_name -> metaverse.CS_ChangePlayerInfos
	33,  // 75: metaverse.Message.scChangePlayerInfos:type_name -> metaverse.SC_ChangePlayerInfos
	34,  // 76: metaverse.Message.csUpdateBoothInfo:type_name -> metaverse.CS_UpdateBoothInfo
	35,  // 77: metaverse.Message.scUpdateBoothInfo:type_name -> metaverse.SC_UpdateBoothInfo
	36,  // 78: metaverse.Message.csEnterScene:type_name -> metaverse.CS_EnterScene
	37,  // 79: metaverse.Message.scEnterScene:type_name -> metaverse.SC_EnterScene
	38,  // 80: metaverse.Message.csReadyEnterScene:type_name -> metaverse.CS_ReadyEnterScene
	39,  // 81: metaverse.Message.csGetGameSpaceInfo:type_name -> metaverse.CS_GetGameSpaceInfo
	40,  // 82: metaverse.Message.scGetGameSpaceInfo:type_name -> metaverse.SC_GetGameSpaceInfo
	41,  // 83: metaverse.Message.csExitScene:type_name -> metaverse.CS_ExitScene
	42,  // 84: metaverse.Message.scExitScene:type_name -> metaverse.SC_ExitScene
	43,  // 85: metaverse.Message.scEnterSceneNotify:type_name -> metaverse.SC_EnterSceneNotify
	44,  // 86: metaverse.Message.scExitSceneNotify:type_name -> metaverse.SC_ExitSceneNotify
	45,  // 87: metaverse.Message.csPlayerMove:type_name -> metaverse.CS_PlayerMove
	46,  // 88: metaverse.Message.csPlayerAction:type_name -> metaverse.CS_PlayerAction
	47,  // 89: metaverse.Message.scPlayerMoveNotify:type_name -> metaverse.SC_PlayerMoveNotify
	48,  // 90: metaverse.Message.scPlayerActionNotify:type_name -> metaverse.SC_PlayerActionNotify
	49,  // 91: metaverse.Message.scChangePlayerInfoNotify:type_name -> metaverse.SC_ChangePlayerInfoNotify
	50,  // 92: metaverse.Message.csPlayerFloor:type_name -> metaverse.CS_PlayerFloor
	51,  // 93: metaverse.Message.csChat:type_name -> metaverse.CS_Chat
	52,  // 94: metaverse.Message.scChat:type_name -> metaverse.SC_Chat
	53,  // 95: metaverse.Message.scCreateCoin:type_name -> metaverse.SC_CreateCoin
	54,  // 96: metaverse.Message.csPickupCoin:type_name -> metaverse.CS_PickupCoin
	55,  // 97: metaverse.Message.scPickupCoin:type_name -> metaverse.SC_PickupCoin
	56,  // 98: metaverse.Message.scPickupCoinNotify:type_name -> metaverse.SC_PickupCoinNotify
	57,  // 99: metaverse.Message.scLineupNotify:type_name -> metaverse.SC_LineupNotify
	58,  // 100: metaverse.Message.csCancelLineUp:type_name -> metaverse.CS_CancelLineUp
	59,  // 101: metaverse.Message.csLikeBooth:type_name -> metaverse.CS_LikeBooth
	60,  // 102: metaverse.Message.scLikeBooth:type_name -> metaverse.SC_LikeBooth
	61,  // 103: metaverse.Message.scReadyPersonalSpace:type_name -> metaverse.SC_ReadyPersonalSpace
	62,  // 104: metaverse.Message.csEnterPersonalSpace:type_name -> metaverse.CS_EnterPersonalSpace
	63,  // 105: metaverse.Message.scEnterPersonalSpace:type_name -> metaverse.SC_EnterPersonalSpace
	64,  // 106: metaverse.Message.csPersonalSpaceList:type_name -> metaverse.CS_PersonalSpaceList
	65,  // 107: metaverse.Message.scPersonalSpaceList:type_name -> metaverse.SC_PersonalSpaceList
	66,  // 108: metaverse.Message.csUpdatePersonalSpaceTV:type_name -> metaverse.CS_UpdatePersonalSpaceTV
	67,  // 109: metaverse.Message.scUpdatePersonalSpaceTV:type_name -> metaverse.SC_UpdatePersonalSpaceTV
	68,  // 110: metaverse.Message.scChangePersonalSpaceNotify:type_name -> metaverse.SC_ChangePersonalSpaceNotify
	69,  // 111: metaverse.Message.scReadyEnterMVBSpace:type_name -> metaverse.SC_ReadyEnterMVBSpace
	70,  // 112: metaverse.Message.csEnterMVBSpace:type_name -> metaverse.CS_EnterMVBSpace
	71,  // 113: metaverse.Message.scEnterMVBSpace:type_name -> metaverse.SC_EnterMVBSpace
	72,  // 114: metaverse.Message.csChristmasGift:type_name -> metaverse.CS_ChristmasGift
	73,  // 115: metaverse.Message.scChristmasGift:type_name -> metaverse.SC_ChristmasGift
	74,  // 116: metaverse.Message.csMVBBoothCall:type_name -> metaverse.CS_MVBBoothCall
	75,  // 117: metaverse.Message.scMVBCallInfoNotify:type_name -> metaverse.SC_MVBCallInfoNotify
	76,  // 118: metaverse.Message.scMVBCreateBox:type_name -> metaverse.SC_MVBCreateBox
	77,  // 119: metaverse.Message.csMVBPickupBox:type_name -> metaverse.CS_MVBPickupBox
	78,  // 120: metaverse.Message.scMVBPickupBox:type_name -> metaverse.SC_MVBPickupBox
	79,  // 121: metaverse.Message.scMVBPickupBoxNotify:type_name -> metaverse.SC_MVBPickupBoxNotify
	80,  // 122: metaverse.Message.csMVBProjectDataRefresh:type_name -> metaverse.CS_MVBProjectDataRefresh
	81,  // 123: metaverse.Message.scMVBProjectDataRefresh:type_name -> metaverse.SC_MVBProjectDataRefresh
	82,  // 124: metaverse.Message.csHeartBeat:type_name -> metaverse.CS_HeartBeat
	83,  // 125: metaverse.Message.scHeartBeat:type_name -> metaverse.SC_HeartBeat
	84,  // 126: metaverse.Message.csServiceLines:type_name -> metaverse.CS_ServiceLines
	85,  // 127: metaverse.Message.scServiceLines:type_name -> metaverse.SC_ServiceLines
	86,  // 128: metaverse.Message.csReadyChangeLine:type_name -> metaverse.CS_ReadyChangeLine
	87,  // 129: metaverse.Message.scReadyChangeLine:type_name -> metaverse.SC_ReadyChangeLine
	88,  // 130: metaverse.Message.scLiveBoradcast:type_name -> metaverse.SC_LiveBoradcast
	89,  // 131: metaverse.Message.scStartRollingLottery:type_name -> metaverse.SC_StartRollingLottery
	90,  // 132: metaverse.Message.csRefreshToken:type_name -> metaverse.CS_RefreshToken
	91,  // 133: metaverse.Message.scRefreshToken:type_name -> metaverse.SC_RefreshToken
	92,  // 134: metaverse.Message.scLiveBroadcastBanner:type_name -> metaverse.SC_LiveBroadcastBanner
	93,  // 135: metaverse.Message.scChatBan:type_name -> metaverse.SC_ChatBan
	94,  // 136: metaverse.Message.scReadyBlockheadGameSapce:type_name -> metaverse.SC_ReadyBlockheadGameSapce
	95,  // 137: metaverse.Message.csEnterBlockheadGameSpace:type_name -> metaverse.CS_EnterBlockheadGameSpace
	96,  // 138: metaverse.Message.scEnterBlockheadGameSpace:type_name -> metaverse.SC_EnterBlockheadGameSpace
	97,  // 139: metaverse.Message.scStartBlockheadGame:type_name -> metaverse.SC_StartBlockheadGame
	98,  // 140: metaverse.Message.scBlockheadGameKillNotify:type_name -> metaverse.SC_BlockheadGameKillNotify
	99,  // 141: metaverse.Message.scBlockheadGameVictoryNotify:type_name -> metaverse.SC_BlockheadGameVictoryNotify
	100, // 142: metaverse.Message.scReadyEnterAMASpace:type_name -> metaverse.SC_ReadyEnterAMASpace
	101, // 143: metaverse.Message.csEnterAMASpace:type_name -> metaverse.CS_EnterAMASpace
	102, // 144: metaverse.Message.scEnterAMASpace:type_name -> metaverse.SC_EnterAMASpace
	103, // 145: metaverse.Message.scAMANotifyMemberEnter:type_name -> metaverse.SC_AMANotifyMemberEnter
	104, // 146: metaverse.Message.scAMANotifyMemberExit:type_name -> metaverse.SC_AMANotifyMemberExit
	105, // 147: metaverse.Message.csAMAMCState:type_name -> metaverse.CS_AMAMCState
	106, // 148: metaverse.Message.scAMAMCState:type_name -> metaverse.SC_AMAMCState
	107, // 149: metaverse.Message.csAMAInviteSpeak:type_name -> metaverse.CS_AMAInviteSpeak
	108, // 150: metaverse.Message.scAMAInviteSpeak:type_name -> metaverse.SC_AMAInviteSpeak
	109, // 151: metaverse.Message.csAMAInviteSpeakResponse:type_name -> metaverse.CS_AMAInviteSpeakResponse
	110, // 152: metaverse.Message.scAMAInviteSpeakResponse:type_name -> metaverse.SC_AMAInviteSpeakResponse
	111, // 153: metaverse.Message.csAMAKick:type_name -> metaverse.CS_AMAKick
	112, // 154: metaverse.Message.scAMAKick:type_name -> metaverse.SC_AMAKick
	113, // 155: metaverse.Message.csAMASpeakRequest:type_name -> metaverse.CS_AMASpeakRequest
	114, // 156: metaverse.Message.csAMASpeakRequestResponse:type_name -> metaverse.CS_AMASpeakRequestResponse
	115, // 157: metaverse.Message.scAMASpeakRequestResponse:type_name -> metaverse.SC_AMASpeakRequestResponse
	116, // 158: metaverse.Message.csAMANewListenerEnter:type_name -> metaverse.CS_AMANewListenerEnter
	117, // 159: metaverse.Message.scAMANewListenerEnter:type_name -> metaverse.SC_AMANewListenerEnter
	118, // 160: metaverse.Message.scAMANewBroadcastEnter:type_name -> metaverse.SC_AMANewBroadcastEnter
	119, // 161: metaverse.Message.scAMASpeakRequestNotify:type_name -> metaverse.SC_AMASpeakRequestNotify
	120, // 162: metaverse.Message.scAMAMasterChangeNotify:type_name -> metaverse.SC_AMAMasterChangeNotify
	121, // 163: metaverse.Message.csAMACancelHandsup:type_name -> metaverse.CS_AMACancelHandsup
	122, // 164: metaverse.Message.scAMACancelHandsup:type_name -> metaverse.SC_AMACancelHandsup
	123, // 165: metaverse.Message.csFollowerList:type_name -> metaverse.CS_FollowerList
	124, // 166: metaverse.Message.scFollowerList:type_name -> metaverse.SC_FollowerList
	125, // 167: metaverse.Message.csFollowingList:type_name -> metaverse.CS_FollowingList
	126, // 168: metaverse.Message.scFollowingList:type_name -> metaverse.SC_FollowingList
	127, // 169: metaverse.Message.csUpdateFollow:type_name -> metaverse.CS_UpdateFollow
	128, // 170: metaverse.Message.scUpdateFollow:type_name -> metaverse.SC_UpdateFollow
	129, // 171: metaverse.Message.csGetFollowInfo:type_name -> metaverse.CS_GetFollowInfo
	130, // 172: metaverse.Message.scGetFollowInfo:type_name -> metaverse.SC_GetFollowInfo
	131, // 173: metaverse.Message.scUserStatusChangeNotify:type_name -> metaverse.SC_UserStatusChangeNotify
	132, // 174: metaverse.Message.csGetUserInfo:type_name -> metaverse.CS_GetUserInfo
	133, // 175: metaverse.Message.scGetUserInfo:type_name -> metaverse.SC_GetUserInfo
	134, // 176: metaverse.Message.csOtherPlayers:type_name -> metaverse.CS_OtherPlayers
	135, // 177: metaverse.Message.scOtherPlayers:type_name -> metaverse.SC_OtherPlayers
	136, // 178: metaverse.Message.scReadyEnterIsland:type_name -> metaverse.SC_ReadyEnterIsland
	137, // 179: metaverse.Message.csEnterIsland:type_name -> metaverse.CS_EnterIsland
	138, // 180: metaverse.Message.scEnterIsland:type_name -> metaverse.SC_EnterIsland
	181, // [181:181] is the sub-list for method output_type
	181, // [181:181] is the sub-list for method input_type
	181, // [181:181] is the sub-list for extension type_name
	181, // [181:181] is the sub-list for extension extendee
	0,   // [0:181] is the sub-list for field type_name
}

func init() { file_Message_proto_init() }
func file_Message_proto_init() {
	if File_Message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Line); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickupItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerAssetsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerAvatarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncTrans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSceneInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoothInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MVBBoothCallInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MVBBoothInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoothValueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MVBProjectData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalSpaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AMASpacePersonalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNSFollowerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MVBBoxInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockheadGameVictoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_Tips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_Login); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_Login); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_ChangePlayerInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_ChangePlayerInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_UpdateBoothInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_UpdateBoothInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_EnterScene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_EnterScene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_ReadyEnterScene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_GetGameSpaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_GetGameSpaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_ExitScene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_ExitScene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_EnterSceneNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_ExitSceneNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_PlayerMove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_PlayerAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_PlayerMoveNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_PlayerActionNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_ChangePlayerInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_PlayerFloor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_Chat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_Chat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_CreateCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_PickupCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_PickupCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_PickupCoinNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_LineupNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_CancelLineUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_LikeBooth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_LikeBooth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_ReadyPersonalSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_EnterPersonalSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_EnterPersonalSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_PersonalSpaceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_PersonalSpaceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_UpdatePersonalSpaceTV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_UpdatePersonalSpaceTV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_ChangePersonalSpaceNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_ReadyEnterMVBSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_EnterMVBSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_EnterMVBSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_ChristmasGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_ChristmasGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_MVBBoothCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_MVBCallInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_MVBCreateBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_MVBPickupBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_MVBPickupBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_MVBPickupBoxNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_MVBProjectDataRefresh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_MVBProjectDataRefresh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_HeartBeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_HeartBeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_ServiceLines); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_ServiceLines); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_ReadyChangeLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_ReadyChangeLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_LiveBoradcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_StartRollingLottery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_RefreshToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_RefreshToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_LiveBroadcastBanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_ChatBan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_ReadyBlockheadGameSapce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_EnterBlockheadGameSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_EnterBlockheadGameSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_StartBlockheadGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_BlockheadGameKillNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_BlockheadGameVictoryNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_ReadyEnterAMASpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_EnterAMASpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_EnterAMASpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_AMANotifyMemberEnter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_AMANotifyMemberExit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_AMAMCState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_AMAMCState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_AMAInviteSpeak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_AMAInviteSpeak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_AMAInviteSpeakResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_AMAInviteSpeakResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_AMAKick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_AMAKick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_AMASpeakRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_AMASpeakRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_AMASpeakRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_AMANewListenerEnter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_AMANewListenerEnter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_AMANewBroadcastEnter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_AMASpeakRequestNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_AMAMasterChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_AMACancelHandsup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_AMACancelHandsup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_FollowerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_FollowerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_FollowingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_FollowingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_UpdateFollow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_UpdateFollow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_GetFollowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_GetFollowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_UserStatusChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_GetUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_GetUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_OtherPlayers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_OtherPlayers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_ReadyEnterIsland); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS_EnterIsland); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SC_EnterIsland); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Message_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   132,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Message_proto_goTypes,
		DependencyIndexes: file_Message_proto_depIdxs,
		EnumInfos:         file_Message_proto_enumTypes,
		MessageInfos:      file_Message_proto_msgTypes,
	}.Build()
	File_Message_proto = out.File
	file_Message_proto_rawDesc = nil
	file_Message_proto_goTypes = nil
	file_Message_proto_depIdxs = nil
}
